(function () {
    'use strict';

    /* global jQuery, ActiveXObject */
    (function ($) {
        // create HTML5 elements for IE8
        document.createElement('main');
        document.createElement('nav');

        var $tmp = document.createElement('div');

        // check for canvas
        $.support.canvas = !!document.createElement('canvas').getContext;

        // check for background size
        $.support.backgroundSize = (function () {
            var s = false;
            $.each(['backgroundSize', 'MozBackgroundSize', 'WebkitBackgroundSize', 'OBackgroundSize'], function () {
                if (typeof $tmp.style[this] !== 'undefined') {
                    s = true;
                }
            });

            return s;
        })();

        /* http://downloads.beninzambia.com/blog/acrobat_detection.js.txt
         * Modified for our purposes
         */
        $.support.pdf = (function () {
            try {
                // Old IE
                if (!$.support.cssFloat) {
                    var control = null;

                    //
                    // load the activeX control
                    //
                    try {
                        // AcroPDF.PDF is used by version 7 and later
                        control = new ActiveXObject('AcroPDF.PDF');
                    } catch (e) { 
                        // error
                    }

                    if (!control) {
                        try {
                            // PDF.PdfCtrl is used by version 6 and earlier
                            control = new ActiveXObject('PDF.PdfCtrl');
                        } catch (e) {
                            // error
                        }
                    }

                    return control ? true : false;

                } else if (navigator.plugins) {
                    for (var n in navigator.plugins) {
                        if (n == 'Adobe Acrobat') {
                            return true;
                        }

                        if (navigator.plugins[n].name && (navigator.plugins[n].name == 'Adobe Acrobat' || navigator.plugins[n].name == 'Chrome PDF Viewer')) {
                            return true;
                        }
                    }
                } else if (navigator.mimeTypes) {
                    // from PDFObject - https://github.com/pipwerks/PDFObject
                    var mime = navigator.mimeTypes["application/pdf"];

                    if (mime && mime.enabledPlugin) {
                        return true;
                    }
                }
            } catch (e) {
                // error
            }

            return false;
        })();

        /*
         * From Modernizr v2.0.6
         * http://www.modernizr.com
         * Copyright (c) 2009-2011 Faruk Ates, Paul Irish, Alex Sexton
         */
        $.support.video = (function () {
            var el = document.createElement('video'),
                o = {};
            // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224
            try {

                if (el.canPlayType) {
                    o.ogg = el.canPlayType('video/ogg; codecs="theora"');

                    // Workaround required for IE9, which doesn't report video support without audio codec specified.
                    //   bug 599718 @ msft connect
                    var h264 = 'video/mp4; codecs="avc1.42E01E';
                    o.mp4 = el.canPlayType(h264 + '"') || el.canPlayType(h264 + ', mp4a.40.2"');

                    o.webm = el.canPlayType('video/webm; codecs="vp8, vorbis"');

                    return o;
                }

            } catch (e) {
                // error
            }

            return false;
        })();

        /*
         * From Modernizr v2.0.6
         * http://www.modernizr.com
         * Copyright (c) 2009-2011 Faruk Ates, Paul Irish, Alex Sexton
         */
        $.support.audio = (function () {
            var el = document.createElement('audio'),
                o = {};
            try {
                if (el.canPlayType) {
                    o.ogg = el.canPlayType('audio/ogg; codecs="vorbis"');
                    o.mp3 = el.canPlayType('audio/mpeg;');

                    // Mimetypes accepted:
                    //   https://developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
                    //   http://bit.ly/iphoneoscodecs
                    o.wav = el.canPlayType('audio/wav; codecs="1"');
                    o.m4a = el.canPlayType('audio/x-m4a;') || el.canPlayType('audio/aac;');
                    o.webm = el.canPlayType('audio/webm; codecs="vp8, vorbis"');

                    return o;
                }
            } catch (e) {
                // error
            }

            return false;
        })();

        $.support.cssCalc = (function () {
            var el = document.createElement('a');

            el.style.cssText = 'width:calc(10px);';

            return !!el.style.length;
        })();

    })(jQuery);

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /* global jQuery */

    (function ($) {

        $.support.canvas = false; //!!document.createElement('canvas').getContext;

        $.fn.tips = function (options) {
            options = $.extend({
                speed: 150,
                position: 'top center',
                className: '',
                offsets: {
                    'x': 16,
                    'y': 16
                },
                width: 200,
                fixed: true,
                parent: 'body',
                trigger: 'hover',
                disabled: ':disabled, .disabled'
            }, options);

            /**
             * Initialise the tooltip
             * @param {Object} elements
             * @param {Object} options
             */
            function init(element) {

                // cancel on drag/drop/sortable
                if ($(element).hasClass('wf-tooltip-cancel-ondrag')) {
                    cancelOnDrag(element);
                }

                $(element).on('click', function (e) {
                    e.preventDefault();

                    if (options.trigger == 'click' && $(this).is(options.disabled)) {
                        return;
                    }

                    // don't pin tip if a link or parent of a link
                    if (this.nodeName == 'A' || $('a', this).length || $(this).hasClass('wf-tooltip-cancel-ondrag')) {
                        return;
                    }

                    if (options.trigger == 'click') {
                        if ($('.uk-tooltip').is(':visible')) {
                            return end();
                        }

                        start(e, element);
                    }

                    if ($('.uk-tooltip').hasClass('uk-tooltip-sticky')) {
                        unpin();
                    } else {
                        pin(element);
                    }
                });

                $(element).on('tooltip:close', function () {
                    return end(element);
                });

                if (options.trigger == 'hover') {
                    $(element).on('mouseover', function (e) {

                        if ($('.uk-tooltip').hasClass('uk-tooltip-sticky') || $(this).hasClass('uk-tooltip-nohover')) {
                            return;
                        }

                        return start(e, element);
                    }).on('mouseout', function (e) {
                        if ($('.uk-tooltip').hasClass('uk-tooltip-sticky') || $(this).hasClass('uk-tooltip-nohover')) {
                            return;
                        }
                        return end(element);
                    });
                }
            }

            /**
             * Create the tooltip div
             */
            function createTips() {
                var $tips = $('.uk-tooltip');

                if (!$tips.get(0)) {
                    $tips = $('<div class="uk-tooltip" role="tooltip" aria-hidden="true">' +
                        '<span class="close uk-icon uk-icon-close" title="Close"></span>' +
                        '<div class="uk-tooltip-inner"></div>' +
                        '<div class="arrow"></div>' +
                        '</div>').appendTo(options.parent);

                    $('.uk-icon-close', $tips).on('click', function () {
                        end();
                    }).hide();
                }

                $tips.addClass(options.className);

                if ($tips.hasClass('popover')) {
                    $tips.find('.arrow').addClass('popover-arrow');
                }
            }

            /**
             * Show the tooltip and build the tooltip text
             * @param {Object} e  Event
             * @param {Object} el Target Element
             */
            function start(e, element) {
                // Create tooltip if it doesn't exist
                createTips();

                var $tips = $('.uk-tooltip');

                if ($(element).hasClass('hasPopover')) {
                    $tips.addClass('popover');
                }

                // store element
                $tips.data('source', element);

                if (options.content) {
                    var h = options.content;
                } else {
                    // Get tooltip text from title
                    var h = '', text = $(element).attr('title') || '', title = '';

                    // get text from data-content attribute (popover)
                    text = $(element).data('content') || text;

                    // Split tooltip text ie: title::text
                    if (/::/.test(text)) {
                        var parts = text.split('::');
                        title = $.trim(parts[0]);
                        text = $.trim(parts[1]);
                    }

                    // use element innerText for title
                    if (!title) {
                        title = $(element).text();
                    }

                    if (title) {
                        // Set tooltip title html
                        h += '<h4>' + title + '</h4>';
                    }

                    // Store original title and remove
                    $(element).data('title', $(element).attr('title')).attr('title', '');

                    // add aria description
                    $(element).attr('aria-describedby', 'uk-tooltip');

                    // Set tooltip text html
                    h += '<div class="uk-tooltip-content">' + text + '</div>';
                }

                // Set tooltip html
                $('.uk-tooltip-inner', $tips).html(h);

                if ($(element).hasClass('hasPopover')) {
                    $('.uk-tooltip-inner > h4', $tips).addClass('popover-title popover-header');
                    $('.uk-tooltip-inner > .uk-tooltip-content', $tips).addClass('popover-content popover-body');
                }

                // Set visible
                $tips.show().addClass('in').attr('aria-hidden', 'false');

                locate(e);

                $(element).trigger('tooltip:show');

                window.setTimeout(function () {
                    $tips.css('visibility', 'visible');
                }, 1);
            }

            /**
             * Fade Out and hide the tooltip
             * Restore the original element title
             * @param {Object} el Element
             */
            function end(element) {
                var $tips = $('.uk-tooltip'),
                    element = $tips.data('source') || element;

                if ($(element).data('title')) {
                    // Restore title
                    $(element).attr('title', $(element).data('title'));
                }

                // remove aria
                $(element).removeAttr('aria-describedby');
                // Fade out tooltip and hide
                $tips.css('visibility', 'hidden').attr('aria-hidden', 'true').hide();

                // reset classes
                $('.uk-tooltip').attr('class', 'uk-tooltip').removeClass('in');
                // empty tooltip
                $('.uk-tooltip-inner').empty();

                $(element).trigger('tooltip:hide');

                unpin();
            }

            function cancelOnDrag(element) {
                $(element).on('mousedown', function () {
                    $(this).addClass('nohover');
                    // hide tooltip
                    end();

                    // Store original title and remove
                    $(this).data('title', $(this).attr('title')).attr('title', '');

                }).on('mouseup', function () {
                    $(this).removeClass('nohover');

                    // Restore title
                    $(this).attr('title', $(this).data('title'));
                });
            }

            function pin(element) {
                $('.uk-tooltip').addClass('uk-tooltip-sticky');
                $('.uk-icon-close', '.uk-tooltip').show();

                // add blur handler
                $(window).on('click.tooltip-blur', function (e) {
                    var el = $(element).get(0),
                        n = e.target;

                    if (n == el || (el.nodeName == 'LABEL' && $(el).attr('for') && n == $('#' + $(el).attr('for')).get(0)) || n == $('.uk-tooltip').get(0)) {
                        return;
                    }

                    if ($(n).parents('.uk-tooltip').length === 0) {
                        end();
                    }
                });
            }

            function unpin() {
                $('.uk-tooltip').removeClass('uk-tooltip-sticky');
                $('.uk-icon-close', '.uk-tooltip').hide();

                $(window).off('click.tooltip-blur');
            }

            /**
             * Position the tooltip
             * @param {Object} e Event trigger
             */
            function locate(e, element) {
                createTips();

                var $tips = $('.uk-tooltip');
                var o = options.offsets;

                var pos = $(e.target).offset(),
                    parent = $tips.parent().position();

                pos.left = pos.left - parent.left;
                pos.top = pos.top - parent.top;

                var tip = { "width": $tips.outerWidth(), "height": $tips.outerHeight() };
                pos = $.extend(pos, { "width": $(e.target).outerWidth(), "height": $(e.target).outerHeight() });

                var position = options.position;
                var scrollTop = $(document).scrollTop();

                // Switch from bottom to top
                if ((pos.top - tip.height) < 0 || pos.top < (scrollTop + tip.height + o.y)) {
                    position = position.replace(/(top|center)\s+/, 'bottom ');
                } else {
                    position = position.replace(/(bottom|center)\s+/, 'top ');
                }

                if ((pos.left + tip.width) > $(window).width()) {
                    position = position.replace('right', 'left');
                } else {
                    position = position.replace('left', 'right');
                }

                var style = {
                    "top center": {
                        "top": Math.max(pos.top - tip.height - o.y, 10),
                        "left": Math.max(pos.left + pos.width / 2 - tip.width / 2, 5)
                    },
                    "bottom center": {
                        "top": Math.max(pos.top + pos.height + o.y, 10),
                        "left": Math.max(pos.left + pos.width / 2 - tip.width / 2, 5)
                    },
                    "center right": {
                        "top": Math.max(pos.top - tip.height / 2 + pos.height / 2, 5),
                        "left": Math.max(pos.left + pos.width, 10)
                    },
                    "center left": {
                        "top": Math.max(pos.top - tip.height / 2 + pos.height / 2, 5),
                        "left": Math.max(pos.left - tip.width, 10)
                    },
                    "bottom right": {
                        "top": Math.max(pos.top - tip.height + o.y, 5),
                        "left": Math.max(pos.left + pos.width, 10)
                    },
                    "bottom left": {
                        "top": Math.max(pos.top - tip.height + pos.height + o.y, 5),
                        "left": Math.max(pos.left - tip.width, 10)
                    },
                    "top right": {
                        "top": Math.max(pos.top - tip.height - o.y, 10),
                        "left": Math.max(pos.left + pos.width, 10)
                    },
                    "top left": {
                        "top": Math.max(pos.top - tip.height - o.y, 10),
                        "left": Math.max(pos.left - tip.width, 10)
                    }
                };

                $.each(position.split(' '), function (i, s) {
                    $tips.addClass(s).addClass('uk-tooltip-' + s);

                    if ($tips.hasClass('popover')) {
                        $tips.addClass(s).addClass('bs-popover-' + s);
                    }
                });

                $tips.css(style[position]);
            }

            return this.each(function () {
                init(this);
            });
        };

    })(jQuery);

    /* eslint-disable consistent-this */
    /* global jQuery */
    (function ($) {
        // jQuery or selector - https://github.com/byrichardpowell/jquery-or
        $.fn.or = function (fallbackSelector) {
            return this.length ? this : $(fallbackSelector || 'body');
        };

        $.fn.borderWidget = function () {
            $(this).on('click change', function () {
                var state = this.checked;

                $(this).parents('.uk-form-controls').find(':input').not(this).toggleClass('uk-text-muted', !state).attr('disabled', function () {
                    return !state ? true : null;
                });

                $(this).trigger('border:change');
            }).trigger('change');

            return this;
        };

        $.fn.checkbox = function () {
            return this.each(function () {
                var self = this;

                if ($(this).hasClass('uk-form-constrain')) {
                    return this;
                }

                $(this).wrap('<i class="uk-checkbox" />').on('click', function () {
                    $(this).parent().toggleClass('uk-icon-check', this.checked);
                }).on('checkbox:check', function () {
                    $(this).parent().toggleClass('uk-icon-check', self.checked);
                }).parent().toggleClass('uk-icon-check', self.checked).css('margin-top', $(self).parent().height() / 2);
            });
        };

        $.fn.equalize = function () {
            return this.each(function () {
                var x = 0,
                    cb = this,
                    $elms = $(this).parents('.uk-form-equalize').find('input[type="text"]'),
                    self = this;

                // add icon and click
                $(self).on('click', function () {
                    var state = this.checked;

                    //$(this).parent('.uk-icon-lock').toggleClass('uk-icon-unlock-alt', !state);

                    $elms.slice(1).prop('disabled', state).prev('label').toggleClass('uk-text-muted', state);

                    if (state) {
                        var value = $elms.first().val();

                        $elms.slice(1).val(value).trigger('change');

                        $(cb).trigger('equalize:change', [$elms.addBack()]);
                    }
                });

                /*if ($(self).parent('label').length === 0) {
                    $(self).wrap('<i class="uk-equalize uk-icon-lock" />');
                }*/

                $elms.first().on('change', function () {
                    var state = $(self).prop('checked');

                    if (state) {
                        $elms.not(this).val(this.value).trigger('change');
                    }

                    // trigger event
                    $(cb).trigger('equalize:change', [$elms.addBack()]);
                });

                $(this).on('equalize:update', function () {
                    // get first value
                    var value = $elms.first().val();

                    $elms.each(function () {
                        if ($(this).val() === value) {
                            x++;
                        }
                    });

                    // state
                    var state = (x === $elms.length);

                    $elms.slice(1).prop('disabled', state).prev('label').toggleClass('uk-text-muted', state);

                    // check
                    $(this).prop('checked', state); //.parent('.uk-icon-lock').toggleClass('uk-icon-unlock-alt', !state);
                });
            });
        };

        $.fn.constrain = function () {
            return this.each(function () {
                var cb = this,
                    $elms = $(this).parents('.uk-form-constrain').find('input[type="text"], input[type="number"]');

                $(this).parent('label').addClass('uk-constrain-label');

                $(this).on('constrain:update', function () {
                    $(this).parents('.uk-form-constrain').find('input[type="text"], input[type="number"]').each(function () {
                        $(this).data('tmp', this.value);
                    });
                });

                $(this).parents('.uk-form-constrain').toggleClass('uk-constrain-active', this.checked);

                $(cb).on('click', function () {
                    $(this).parents('.uk-form-constrain').toggleClass('uk-constrain-active', this.checked);
                });

                $(cb).parent().append('<i class="uk-icon-lock" role="presentation"></i><i class="uk-icon-unlocked" role="presentation"></i>');

                // set tmp values
                $elms.each(function () {
                    $(this).data('tmp', this.value);
                }).on('change', function (e) {
                    e.stopPropagation();

                    var a = this,
                        $elms = $(this).parents('.uk-form-constrain').find('input'),
                        b = $elms.not(':checkbox').not(this),
                        cb = $elms.filter(':checkbox');

                    var w = $(a).val(),
                        h = $(b).val(),
                        tw = $(a).data('tmp');

                    if (w && h && tw) {
                        // ignore percentage values
                        if (w.indexOf('%') !== -1 || h.indexOf('%') !== -1) {
                            return;
                        }

                        // if constrain is on
                        if ($(cb).is(':checked')) {
                            var temp = ((h / tw) * w).toFixed(0);
                            $(b).val(temp).data('tmp', temp);
                        }
                    }

                    $(a).data('tmp', w);

                    // trigger change
                    $(cb).trigger('constrain:change', [$elms]);
                });
            });
        };

        $.fn.repeatable = function () {
            return this.each(function () {
                var self = this;

                if ($(this).data('uk-repeatable')) {
                    return this;
                }

                $(this).data('uk-repeatable', 1);

                function clone() {
                    // clone element
                    var el = $(self).clone(true, true);

                    // clear inputs
                    $(el).find('input').val('');

                    $(self).trigger('repeatable:create', [self, $(el).get(0)]);

                    // add new element
                    $(el).insertAfter($(self).siblings('.uk-repeatable').add(self).last());
                }

                $('.uk-repeatable-create', this).on('click', function (e) {
                    clone();
                    e.preventDefault();
                });

                $('.uk-repeatable-delete', this).on('click', function (e) {
                    var $elm = $(this).parent().parent();

                    //$elm.remove();
                    $elm.hide();

                    $(self).trigger('repeatable:delete', [self, $elm.get(0)]);

                    e.preventDefault();
                });

                $(self).on('repeatable:clone', function (e, count) {
                    for (var i = 0; i < count; i++) {
                        clone();
                    }
                });
            });
        };

        $.fn.button = function (options, key, value) {
            options = options || {};

            var map = {
                "uk-icon-circle-arrow-w": "uk-icon-refresh",
                "uk-icon-arrowreturnthick-1-w": "uk-icon-undo",
                "uk-icon-circle-check": "uk-icon-check",
                "uk-icon-check": "uk-icon-check",
                "uk-icon-closethick": "uk-icon-close"
            };

            return this.each(function () {
                // jQuery UI legacy
                if (typeof options === "string") {
                    if (options === "option" && key && value) {
                        if (key === "label") {
                            $('.uk-button-text', this).text(value);
                        }
                    }

                    if (options === "enable") {
                        $(this).prop('disabled', false);
                    }

                    if (options === "disable") {
                        $(this).prop('disabled', true);
                    }

                    // end here so as not to re-create the button
                    return this;
                }
                // add button classes
                $(this).addClass('uk-button').addClass(options.classes || "");
                // add icon
                $(this).html('<span class="uk-button-text">' + $(this).text() + '</span>');

                if (options.icons && options.icons.primary) {
                    var icon = map[options.icons.primary] || options.icons.primary || "";

                    $('<i class="uk-margin-small-right uk-icon ' + icon + '"></i>').prependTo(this);
                }
            });
        };

        $.fn.tabs = function (options, key, value) {
            return this.each(function () {

                var el = this;

                // jQuery UI legacy
                if (typeof options === "string") {
                    // end here so as not to re-create the tabs
                    return this;
                }

                if ($(this).data('tabs')) {
                    return this;
                }

                $(this).addClass('uk-tabs');

                $(this).children('ul').addClass('uk-tab');

                if ($(this).children('.uk-switcher').length === 0) {
                    $('<div class="uk-switcher"></div>').append($(this).children('div')).appendTo(this);
                }

                $(this).children('.uk-switcher').addClass('uk-tabs-panel').children().first().addClass('uk-active').attr('aria-hidden', false);

                $('.uk-tab li', el).on('click', function (e) {
                    e.preventDefault();

                    $(this).find('[autofocus]').trigger('focus');

                    // legacy
                    $(el).children('.uk-switcher').children().addClass('uk-tabs-hide');

                    // get current active panel
                    var panel = $(el).children('.uk-switcher').children('.uk-active').get(0);

                    // get current active tab
                    var tab = $(el).children('.uk-tab').children('.uk-active').get(0);

                    // trigger tab event
                    $(el).trigger('tabs.beforeactivate', [tab, panel]);

                    // toggle all tabs and panels
                    $(el).children('.uk-tab').children().removeClass('uk-active').attr('aria-selected', false);
                    $(el).children('.uk-switcher').children().removeClass('uk-active').attr('aria-hidden', true);

                    // activate tab
                    $(this).addClass('uk-active').attr('aria-selected', true);

                    // activate new panel
                    var panel = $(el).children('.uk-switcher').children().eq($(this).index()).addClass('uk-active').removeClass('uk-tabs-hide').attr('aria-hidden', false).get(0);

                    // trigger tab event
                    $(el).trigger('tabs.activate', [this, panel]);

                    // kill default events
                    e.preventDefault();
                }).first().addClass('uk-active').attr('aria-selected', true).find('button').trigger('focus');

                $('body').on('keydown.tabs', function (e) {

                    if ($(e.target).hasClass('uk-button-tab')) {
                        if (e.keyCode >= 37 && e.keyCode <= 40) {
                            var parent = e.target.parentNode, $tabItems = $(parent).siblings().addBack();

                            var endIndex = Math.max(0, $tabItems.length - 1), idx = $tabItems.index(parent);

                            if (e.keyCode === 37 || e.keyCode === 38) {
                                idx--;
                            }

                            if (e.keyCode === 39 || e.keyCode === 40) {
                                idx++;
                            }

                            if (idx > endIndex) {
                                idx = 0;
                            }

                            if (idx < 0) {
                                idx = endIndex;
                            }

                            $tabItems.eq(idx).trigger('click');

                            e.preventDefault();
                        }
                    }
                });

                $(this).data('tabs', true);
            });
        };

        $.fn.accordion = function (options, key, value) {
            var el = this,
                hidden = {
                    'height': 0,
                    'position': 'relative',
                    'overflow': 'hidden'
                };

            // jQuery UI legacy
            if (typeof options === "string") {
                if (options === "activate" && typeof key !== "undefined") {
                    $('.uk-accordion-title', this).trigger('click');
                }
                // end here so as not to re-create the button
                return this;
            }

            //options = $.extend({index: 0}, options || {});

            $(this).children('h3').addClass('uk-accordion-title').next('div').addClass('uk-accordion-content').css(hidden);

            $('.uk-accordion-title', this).on('click', function (e) {
                e.preventDefault();

                var tab = this;

                // collapse all content
                $('.uk-accordion-content', el).height(0);
                // deactivate title
                $('.uk-accordion-title', el).removeClass('uk-active');

                $(this).addClass('uk-active').next('div').css('height', function (i, v) {
                    if (parseInt(v, 10) === 0) {
                        $(el).trigger('accordion.activate', [tab, this]);
                        return 'auto';
                    }

                    return 0;
                });
            });

            if ($.isPlainObject(options)) {
                if (typeof options.beforeActivate === "function") {
                    $(this).on('accordion:activate', function (e, tab) {
                        var ui = {
                            "newHeader": tab
                        };
                        options.beforeActivate(e, ui);
                    });
                }
            }

            // reset
            $(this).on('accordion:reset', function (e) {
                // collapse all content
                $('.uk-accordion-content', el).height(0);
                // deactivate title
                $('.uk-accordion-title', el).removeClass('uk-active');
            });

            return this;
        };

        $.fn.clearable = function () {
            return this.each(function () {
                var el = this;

                $(this).addClass('uk-form-icon uk-form-icon-flip');
                
                $('<button class="uk-icon uk-icon-close uk-button uk-button-link">').on('click', function () {
                    $(el).find('input').val('').trigger('change');
                }).appendTo(this);
            });
        };

        $.fn.dialog = function () {
            return this;
        };
    })(jQuery);

    /* eslint-disable consistent-this */
    /* global jQuery */
    (function ($) {
        var specialKeyCodeMap = {
            9: 'tab',
            17: 'ctrl',
            18: 'alt',
            27: 'esc',
            32: 'space',
            37: 'left',
            39: 'right',
            13: 'enter',
            91: 'cmd',
            38: 'up',
            40: 'down'
        };

        // http://stackoverflow.com/a/6969486
        function escapeRegExChars(str) {
            return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
        }

        $.fn.datalist = function (settings) {
            settings = $.extend({
                "seperator": " ",
                "loading": "Loading..."
            }, settings);

            return this.each(function () {
                var select = this, options = [], multiple = $(this).prop('multiple'), id = $(this).attr('id');

                // an input node requires an associated datalist
                if (this.nodeName === 'INPUT' && !this.list) {
                    return false;
                }

                // wrap in control div
                $(this).wrap('<div class="uk-datalist-control" role="combobox" aria-autocomplete="list" aria-haspopup="true" aria-expanded="false" aria-owns="' + id + '_datalist_menu" data-label-loading="' + settings.loading + '"></div>');

                // set the parent container
                var container = $(this).parent();

                // update attributes
                $(container).attr('aria-multiselectable', multiple);

                // hide select
                $(this).hide().attr('aria-hidden', 'true').attr('tabindex', '-1');

                // create input element
                var input = $('<input type="text" autocomplete="off" autocapitalize="off" spellcheck="false" placeholder="..." />');

                // create list button - non-focusable
                var btn = $('<button type="button" class="uk-button uk-datalist-button" tabindex="-1"></button');

                // wrap combobox elements
                var combobox = $('<div class="uk-datalist-combobox"></div>').appendTo(container).append([input, btn]);

                // not a datalist
                if (this.nodeName === 'SELECT') {
                    $(combobox).addClass('uk-datalist-placeholder');
                    $(input).prop('readonly', true).attr('placeholder', '');
                }

                // create menu with select options
                var menu = $('<div id="' + id + '_datalist_menu" class="uk-dropdown uk-dropdown-scrollable uk-datalist-dropdown" role="listbox" aria-multiselectable="' + (!!multiple) + '"><ul class="uk-nav uk-nav-dropdown"></ul></div>').appendTo(select.parentNode);

                // add new menu items if options are updated
                $(select).on('update:option', function (e, option) {
                    var $item;

                    if (option.type === "optgroup") {
                        $item = $('<li class="uk-nav-header" tabindex="-1">' + option.text + '</li>');
                    } else {
                        $item = $('<li title="' + option.text + '" data-value="' + option.value + '" role="option"><a href="#" role="presentation">' + option.text + '</a></li>');
                    }

                    $.each(['style', 'class'], function (i, attr) {
                        if (option[attr]) {
                            $item.attr(attr, option[attr]);
                        }
                    });

                    $('ul', menu).append($item);

                    if (option.selected) {
                        updateComboBox(option);
                    }
                }).on('change.datalist', function (e, o) {
                    if (o && o.internal) {
                        return;
                    }

                    $(this).trigger('datalist:update', { change: true });
                });

                function removeTag(tag) {
                    var values = $(select).val();

                    if (typeof values === 'string') {
                        values = values.split(settings.seperator);
                    }

                    values = values.filter(function (value) {
                        if (value !== $(tag).val()) {
                            return true;
                        }
                    });

                    // remove from select values
                    $(select).val(function () {
                        if (this.nodeName === 'INPUT') {
                            return values.join(settings.seperator);
                        }

                        return values;
                    });

                    // udpate select
                    $(select).trigger('change', { internal: true });

                    // remove tag
                    $(tag).remove();
                }

                function updateComboBox(data) {
                    if (!settings.input && !data.text) {
                        $('option', select).each(function () {
                            if (this.value === data.value) {
                                data.text = $(this).attr('label') || $(this).text();
                            }
                        });
                    }

                    $(input).val($.trim(data.text || data.value)).trigger('datalist-input:clear');

                    if (multiple) {
                        // clear input and focus
                        $(input).val('');

                        var found = false;

                        // tag already exists
                        $('button', container).each(function () {
                            if (this.value === data.value) {
                                found = true;
                            }
                        });

                        if (found) {
                            return;
                        }

                        $('<button class="uk-button uk-datalist-tag" role="presentation" aria-label="" value="' + data.value + '"><label>' + data.value + '</label></button>').on('click', function (e) {
                            e.preventDefault();

                            if (e.target.nodeName === "LABEL") {
                                return;
                            }

                            removeTag(this);
                        }).insertBefore(combobox);
                    }
                }

                function selectItem(data) {
                    var values = $(select).val();

                    if (typeof values === 'string') {
                        values = values.split(settings.seperator);
                    }

                    if (!Array.isArray(values)) {
                        values = [values];
                    }

                    var value = data.value || '';

                    // already selected and tagged, clear and focus
                    if (multiple && $.inArray(value, values) > -1) {
                        $(input).val('').trigger('focus');
                        return;
                    }

                    updateComboBox(data);

                    // update with single value
                    if (!multiple) {
                        values = [value];

                    } else {
                        // add new value to select array
                        values.push(value);
                    }

                    $(select).val(function () {
                        if (this.nodeName === 'INPUT') {
                            return values.join(settings.seperator);
                        }

                        return values;
                    });

                    // filter out original options from set values
                    var i = values.length;

                    while (i--) {
                        var val = values[i];

                        // eslint-disable-next-line no-loop-func
                        $.each(options, function (x, opt) {
                            if (opt.value === val) {
                                values.splice(i, 1);
                            }
                        });
                    }

                    // get datalist or select
                    var list = select.list || select;

                    // create new options from remaining values and set selected
                    $.each(values, function (i, val) {
                        $(list).append(new Option(val, val, false, true));
                    });

                    // trigger change
                    $(select).trigger('change', { internal: true });
                }

                function selectMenuItem(e) {
                    e.preventDefault();

                    var el = e.target;

                    if (el.nodeName === "A") {
                        el = el.parentNode;
                    }

                    // must be a list item
                    if (el.nodeName !== "LI") {
                        return;
                    }

                    var data = { text: el.title, value: el.getAttribute('data-value') };

                    selectItem(data);

                    hideMenu();
                }

                // select item on click
                $(menu).on('mousedown click touchstart', function (e) {
                    selectMenuItem(e);
                });

                var $items, focusIdx = -1;

                function hideMenu(e) {
                    if (!isMenuOpen()) {
                        return;
                    }

                    $(menu).attr('aria-hidden', 'true').parent().removeClass('uk-open');
                    // reset focus index
                    focusIdx = -1;
                    // update aria
                    $([container, menu]).attr('aria-expanded', 'false');

                    if (e) {
                        // focus input
                        $(input).trigger('focus');
                    }
                }

                function positionMenu() {
                    var ch = $(container).outerHeight(), pos = $(container).offset(), top = pos.top + ch + 2;

                    menu.css({
                        top: top,
                        left: pos.left,
                        width: $(container).outerWidth(),
                        maxHeight: settings.maxHeight || 160
                    });

                    // re-position menu above input
                    if ($(menu).height() + top > $(window).height()) {
                        $(menu).css('top', pos.top - $(menu).outerHeight() - 2);
                    }
                }

                function showMenu() {
                    menu.attr('aria-hidden', 'false').parent().addClass('uk-open');

                    positionMenu();

                    $([container, menu]).attr('aria-expanded', 'true');

                    // update items list
                    $items = $('li', menu);

                    var values = $(select).val();

                    if (!Array.isArray(values)) {
                        values = [values];
                    }

                    $items.each(function () {
                        var val = this.getAttribute('data-value');
                        $(this).toggleClass('uk-active', $.inArray(val, values) !== -1);
                    });
                }

                function isMenuOpen() {
                    return $(menu).parent().hasClass('uk-open');
                }

                function moveFocus(dir) {
                    focusIdx += dir;

                    // get filtered list
                    var $filtered = $items.filter(':visible').filter(function () {
                        return this.getAttribute('tabindex') > -1;
                    });

                    // return focus to input
                    if (focusIdx < 0) {
                        $(input).trigger('focus');
                        return;
                        // end
                    } else if (focusIdx >= $filtered.length) {
                        return;
                    }

                    // blur all items
                    $items.trigger('blur');

                    // focus item
                    $filtered.eq(focusIdx).attr('tabindex', 0).trigger('focus');
                }

                $(input).on('keydown', function (e) {
                    switch (e.keyCode) {
                        // enter
                        case 13:
                            e.preventDefault();
                            e.stopImmediatePropagation();

                            if (this.value === "") {
                                showMenu();
                                moveFocus(1);
                            } else {
                                selectItem({ value: this.value, text: '' });
                                hideMenu(e);
                            }
                            break;
                        // down arrow
                        case 40:
                            e.preventDefault();
                            e.stopImmediatePropagation();

                            showMenu();
                            moveFocus(1);
                            break;
                        // backspace
                        case 8:
                            // keep normal behaviour while input has a value
                            if (this.value) {
                                return;
                            }

                            var $tags = $('.uk-datalist-tag', container);

                            if ($tags.length) {
                                var val = $tags.last().val();

                                // remove tag
                                removeTag($tags.last());

                                e.preventDefault();

                                // update value with tag value and focus
                                $(this).val(val).trigger('focus');
                            }
                            break;
                    }
                });

                $(input).on('keyup paste', function (e) {
                    // create tag on space / seperator input
                    if (multiple && e.originalEvent.key === settings.seperator) {
                        selectItem({ value: $.trim(this.value), text: '' });
                        hideMenu(e);
                    }

                    if (specialKeyCodeMap[e.keyCode]) {
                        e.preventDefault();
                        e.stopPropagation();
                        return;
                    }

                    if (!this.value.length) {
                        hideMenu(e);
                    } else {
                        showMenu();
                    }

                    var matcher = new RegExp('^' + escapeRegExChars(this.value), "i");

                    $('li', menu).each(function () {
                        $(this).toggle(matcher.test($(this).data('value')));
                    });
                }).on('change', function (e) {
                    // clear select
                    if (this.value === "") {
                        $(select).val('');
                        // update select with custom value
                    } else {
                        if (!multiple) {
                            selectItem({ text: this.value, value: this.value, selected: true });
                        }

                        e.stopPropagation();
                    }
                }).on('focus', function () {
                    $(container).addClass('uk-focus');
                }).on('blur', function (e) {
                    $(container).removeClass('uk-focus');
                }).on('datalist-input:clear', function () {
                    $('li', menu).show();
                });

                $(menu).on('keydown', function (e) {
                    if (isMenuOpen()) {
                        if (e.keyCode === 13) {
                            selectMenuItem(e);

                            hideMenu(e);

                            e.preventDefault();
                            e.stopPropagation();
                        }

                        // esc
                        if (e.keyCode === 27) {
                            hideMenu(e);
                            e.preventDefault();
                            e.stopPropagation();
                            return;
                        }

                        // home
                        if (e.keyCode === 36) {
                            $(input).trigger('focus');
                            e.preventDefault();
                            return;
                        }

                        // arrow-up or arrow-down
                        if (e.keyCode === 38 || e.keyCode === 40) {
                            var dir = e.keyCode - 39;
                            moveFocus(dir);
                            e.preventDefault();
                            return;
                        }
                    }
                });

                $(btn).on('click', function (e) {
                    e.preventDefault();
                    showMenu();
                    moveFocus(1);
                });

                // hide menu if no focus
                $('body').on('mousedown touchstart keyup', function (e) {
                    // only process on TAB
                    if (e.keyCode && e.keyCode !== 9) {
                        return;
                    }

                    var elm = e.target;

                    // dropdown button
                    if (elm == btn.get(0)) {
                        return;
                    }

                    // menu box, including scrollbar
                    if (elm == menu.get(0)) {
                        return;
                    }

                    // action is inside the menu
                    if (menu.find(elm).length || $(elm).parents(menu).length) {                
                        return;
                    }

                    hideMenu();

                    // not a datalist
                    if (!select.list) {
                        return;
                    }

                    // action is inside the container
                    if (container.find(elm).length) {
                        return;
                    }

                    var val = input.val();

                    if (val !== '') {
                        selectItem({ text: val, value: val, select: true });
                    }
                });

                $(select).on('datalist:update', function (e, o) {
                    var list = select.list || select;

                    o = o || {};

                    // do not update on change event
                    if (!o.change) {
                        // add initial list of menu items
                        $('option, optgroup', list).each(function () {
                            var text = $(this).attr('label') || $(this).text();

                            if (this.parentNode.nodeName === "OPTGROUP") {
                                $(this).addClass('uk-nav-indent');
                            }

                            var option = {
                                value: this.value,
                                text: text,
                                style: $(this).attr('style') || '',
                                selected: this.selected,
                                title: this.title || '',
                                class: $(this).attr('class') || '',
                                type: this.nodeName.toLowerCase()
                            };

                            $(select).trigger('update:option', option);
                        });
                    }

                    // datalist
                    var values = $(this).val();

                    if (values) {
                        if (typeof values === 'string') {
                            values = values.split(settings.seperator);
                        }

                        $.each(values, function (i, value) {
                            updateComboBox({ value: value });
                        });
                    }

                    $(this).trigger('datalist:disabled', this.disabled);

                }).on('datalist:disabled', function (e, state) {
                    // update disabled state
                    $([input, btn]).each(function () {
                        if (!state) {
                            $(this).prop('disabled', false).removeAttr('disabled');
                        } else {
                            $(this).prop('disabled', true);
                        }
                    });
                }).on('datalist:position', function () {
                    positionMenu();
                }).on('datalist:loading', function () {
                    if ($(container).hasClass('uk-datalist-loading')) {
                        $(container).removeClass('uk-datalist-loading');

                        $(this).trigger('datalist:disabled', false);

                    } else {
                        $(container).addClass('uk-datalist-loading');

                        $(this).trigger('datalist:disabled', true);
                    }
                }).on('datalist:clear', function () {
                    // clear input
                    $(input).val();
                    // clear menu
                    $('ul', menu).empty();
                }).trigger('datalist:disabled', select.disabled);
            });
        };
    })(jQuery);

    /* eslint-disable consistent-this */
    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /* global tinyMCEPopup, jQuery */

    (function ($) {
        var ColorPicker = function (element, options) {
            this.options = $.extend(this.options, options);

            this.element = element;

            this._init();
        };

        ColorPicker.prototype = {
            options: {
                color: '#FFFFFF',
                detail: 50,
                speed: 200,
                //template_colors: '',
                'stylesheets': [],
                custom_colors: '',
                forcedHighContrastMode: false,
                labels: {
                    picker: 'Picker',
                    title: 'Color Picker',
                    //palette_tab 	: 'Palette',
                    palette: 'Web Colors',
                    // named_tab 	: 'Named',
                    named: 'Named Colors',
                    //template_tab 	: 'Template',
                    template: 'Template Colors',
                    custom: 'Custom Colors',
                    color: 'Color',
                    apply: 'Apply',
                    name: 'Name'
                },
                dialog: false,
                parent: 'body'
            },

            _strhex: "0123456789abcdef",
            /**
             * Array of Web Color values
             */
            _colors: [
                "#000000", "#000033", "#000066", "#000099", "#0000cc", "#0000ff", "#330000", "#330033",
                "#330066", "#330099", "#3300cc", "#3300ff", "#660000", "#660033", "#660066", "#660099",
                "#6600cc", "#6600ff", "#990000", "#990033", "#990066", "#990099", "#9900cc", "#9900ff",
                "#cc0000", "#cc0033", "#cc0066", "#cc0099", "#cc00cc", "#cc00ff", "#ff0000", "#ff0033",
                "#ff0066", "#ff0099", "#ff00cc", "#ff00ff", "#003300", "#003333", "#003366", "#003399",
                "#0033cc", "#0033ff", "#333300", "#333333", "#333366", "#333399", "#3333cc", "#3333ff",
                "#663300", "#663333", "#663366", "#663399", "#6633cc", "#6633ff", "#993300", "#993333",
                "#993366", "#993399", "#9933cc", "#9933ff", "#cc3300", "#cc3333", "#cc3366", "#cc3399",
                "#cc33cc", "#cc33ff", "#ff3300", "#ff3333", "#ff3366", "#ff3399", "#ff33cc", "#ff33ff",
                "#006600", "#006633", "#006666", "#006699", "#0066cc", "#0066ff", "#336600", "#336633",
                "#336666", "#336699", "#3366cc", "#3366ff", "#666600", "#666633", "#666666", "#666699",
                "#6666cc", "#6666ff", "#996600", "#996633", "#996666", "#996699", "#9966cc", "#9966ff",
                "#cc6600", "#cc6633", "#cc6666", "#cc6699", "#cc66cc", "#cc66ff", "#ff6600", "#ff6633",
                "#ff6666", "#ff6699", "#ff66cc", "#ff66ff", "#009900", "#009933", "#009966", "#009999",
                "#0099cc", "#0099ff", "#339900", "#339933", "#339966", "#339999", "#3399cc", "#3399ff",
                "#669900", "#669933", "#669966", "#669999", "#6699cc", "#6699ff", "#999900", "#999933",
                "#999966", "#999999", "#9999cc", "#9999ff", "#cc9900", "#cc9933", "#cc9966", "#cc9999",
                "#cc99cc", "#cc99ff", "#ff9900", "#ff9933", "#ff9966", "#ff9999", "#ff99cc", "#ff99ff",
                "#00cc00", "#00cc33", "#00cc66", "#00cc99", "#00cccc", "#00ccff", "#33cc00", "#33cc33",
                "#33cc66", "#33cc99", "#33cccc", "#33ccff", "#66cc00", "#66cc33", "#66cc66", "#66cc99",
                "#66cccc", "#66ccff", "#99cc00", "#99cc33", "#99cc66", "#99cc99", "#99cccc", "#99ccff",
                "#cccc00", "#cccc33", "#cccc66", "#cccc99", "#cccccc", "#ccccff", "#ffcc00", "#ffcc33",
                "#ffcc66", "#ffcc99", "#ffcccc", "#ffccff", "#00ff00", "#00ff33", "#00ff66", "#00ff99",
                "#00ffcc", "#00ffff", "#33ff00", "#33ff33", "#33ff66", "#33ff99", "#33ffcc", "#33ffff",
                "#66ff00", "#66ff33", "#66ff66", "#66ff99", "#66ffcc", "#66ffff", "#99ff00", "#99ff33",
                "#99ff66", "#99ff99", "#99ffcc", "#99ffff", "#ccff00", "#ccff33", "#ccff66", "#ccff99",
                "#ccffcc", "#ccffff", "#ffff00", "#ffff33", "#ffff66", "#ffff99", "#ffffcc", "#ffffff"
            ],
            /**
             * Array of named color values
             */
            _named: {
                '#F0F8FF': 'AliceBlue',
                '#FAEBD7': 'AntiqueWhite',
                '#7FFFD4': 'Aquamarine',
                '#F0FFFF': 'Azure',
                '#F5F5DC': 'Beige',
                '#FFE4C4': 'Bisque',
                '#000000': 'Black',
                '#FFEBCD': 'BlanchedAlmond',
                '#0000FF': 'Blue',
                '#8A2BE2': 'BlueViolet',
                '#A52A2A': 'Brown',
                '#DEB887': 'BurlyWood',
                '#5F9EA0': 'CadetBlue',
                '#7FFF00': 'Chartreuse',
                '#D2691E': 'Chocolate',
                '#FF7F50': 'Coral',
                '#6495ED': 'CornflowerBlue',
                '#FFF8DC': 'Cornsilk',
                '#DC143C': 'Crimson',
                '#00008B': 'DarkBlue',
                '#008B8B': 'DarkCyan',
                '#B8860B': 'DarkGoldenRod',
                '#A9A9A9': 'DarkGray',
                '#006400': 'DarkGreen',
                '#BDB76B': 'DarkKhaki',
                '#8B008B': 'DarkMagenta',
                '#556B2F': 'DarkOliveGreen',
                '#FF8C00': 'Darkorange',
                '#9932CC': 'DarkOrchid',
                '#8B0000': 'DarkRed',
                '#E9967A': 'DarkSalmon',
                '#8FBC8F': 'DarkSeaGreen',
                '#483D8B': 'DarkSlateBlue',
                '#2F4F4F': 'DarkSlateGrey',
                '#00CED1': 'DarkTurquoise',
                '#9400D3': 'DarkViolet',
                '#FF1493': 'DeepPink',
                '#00BFFF': 'DeepSkyBlue',
                '#696969': 'DimGrey',
                '#1E90FF': 'DodgerBlue',
                '#B22222': 'FireBrick',
                '#FFFAF0': 'FloralWhite',
                '#228B22': 'ForestGreen',
                '#DCDCDC': 'Gainsboro',
                '#F8F8FF': 'GhostWhite',
                '#FFD700': 'Gold',
                '#DAA520': 'GoldenRod',
                '#808080': 'Grey',
                '#008000': 'Green',
                '#ADFF2F': 'GreenYellow',
                '#F0FFF0': 'HoneyDew',
                '#FF69B4': 'HotPink',
                '#CD5C5C': 'IndianRed',
                '#4B0082': 'Indigo',
                '#FFFFF0': 'Ivory',
                '#F0E68C': 'Khaki',
                '#E6E6FA': 'Lavender',
                '#FFF0F5': 'LavenderBlush',
                '#7CFC00': 'LawnGreen',
                '#FFFACD': 'LemonChiffon',
                '#ADD8E6': 'LightBlue',
                '#F08080': 'LightCoral',
                '#E0FFFF': 'LightCyan',
                '#FAFAD2': 'LightGoldenRodYellow',
                '#D3D3D3': 'LightGrey',
                '#90EE90': 'LightGreen',
                '#FFB6C1': 'LightPink',
                '#FFA07A': 'LightSalmon',
                '#20B2AA': 'LightSeaGreen',
                '#87CEFA': 'LightSkyBlue',
                '#778899': 'LightSlateGrey',
                '#B0C4DE': 'LightSteelBlue',
                '#FFFFE0': 'LightYellow',
                '#00FF00': 'Lime',
                '#32CD32': 'LimeGreen',
                '#FAF0E6': 'Linen',
                '#FF00FF': 'Magenta',
                '#800000': 'Maroon',
                '#66CDAA': 'MediumAquaMarine',
                '#0000CD': 'MediumBlue',
                '#BA55D3': 'MediumOrchid',
                '#9370D8': 'MediumPurple',
                '#3CB371': 'MediumSeaGreen',
                '#7B68EE': 'MediumSlateBlue',
                '#00FA9A': 'MediumSpringGreen',
                '#48D1CC': 'MediumTurquoise',
                '#C71585': 'MediumVioletRed',
                '#191970': 'MidnightBlue',
                '#F5FFFA': 'MintCream',
                '#FFE4E1': 'MistyRose',
                '#FFE4B5': 'Moccasin',
                '#FFDEAD': 'NavajoWhite',
                '#000080': 'Navy',
                '#FDF5E6': 'OldLace',
                '#808000': 'Olive',
                '#6B8E23': 'OliveDrab',
                '#FFA500': 'Orange',
                '#FF4500': 'OrangeRed',
                '#DA70D6': 'Orchid',
                '#EEE8AA': 'PaleGoldenRod',
                '#98FB98': 'PaleGreen',
                '#AFEEEE': 'PaleTurquoise',
                '#D87093': 'PaleVioletRed',
                '#FFEFD5': 'PapayaWhip',
                '#FFDAB9': 'PeachPuff',
                '#CD853F': 'Peru',
                '#FFC0CB': 'Pink',
                '#DDA0DD': 'Plum',
                '#B0E0E6': 'PowderBlue',
                '#800080': 'Purple',
                '#FF0000': 'Red',
                '#BC8F8F': 'RosyBrown',
                '#4169E1': 'RoyalBlue',
                '#8B4513': 'SaddleBrown',
                '#FA8072': 'Salmon',
                '#F4A460': 'SandyBrown',
                '#2E8B57': 'SeaGreen',
                '#FFF5EE': 'SeaShell',
                '#A0522D': 'Sienna',
                '#C0C0C0': 'Silver',
                '#87CEEB': 'SkyBlue',
                '#6A5ACD': 'SlateBlue',
                '#708090': 'SlateGrey',
                '#FFFAFA': 'Snow',
                '#00FF7F': 'SpringGreen',
                '#4682B4': 'SteelBlue',
                '#D2B48C': 'Tan',
                '#008080': 'Teal',
                '#D8BFD8': 'Thistle',
                '#FF6347': 'Tomato',
                '#40E0D0': 'Turquoise',
                '#EE82EE': 'Violet',
                '#F5DEB3': 'Wheat',
                '#FFFFFF': 'White',
                '#F5F5F5': 'WhiteSmoke',
                '#FFFF00': 'Yellow',
                '#9ACD32': 'YellowGreen'
            },
            _translate: function (s, d) {
                var o = this.options;

                var v = o.labels[s] || d || '';

                if (typeof tinyMCEPopup !== 'undefined') {
                    v = tinyMCEPopup.getLang('colorpicker.' + s, v);
                }

                return v;
            },
            /**
             * Initialise the plugin
             * @param {Object} trigger Trigger element that launches the colorpicker
             * @param {Object} input Input element that contains the hex value
             * @param {Object} options Options object
             */
            _init: function () {
                var self = this;

                // get stylesheet colors
                this._getStylesheetColors();

                // as a dialog, eg: from the editor font color etc.
                if (this.options.dialog) {
                    // tabs already created
                    if ($('#tab-content .colorpicker_generated').length) {
                        return;
                    }

                    var color = $(this.element).val() || '#000000';

                    // named color
                    if (!/\d/.test(color)) {
                        color = this._namedToHex(color);
                    }

                    // convert color
                    if (/rgb/.test(color)) {
                        color = this._rgbToHex(color);
                    }

                    if (color && color.indexOf('#') === -1) {
                        color = '#' + color;
                    }

                    // update element
                    $(this.element).val(color);

                    $('#colorpicker_color').on('change', function () {
                        var v = this.value;

                        if (v.substr(0, 1) === "#") {
                            v = v.substring(1);
                        }

                        // set wheel colour
                        if (self._wheel) {
                            self._wheel.setColor('#' + v);
                        }

                        this.value = v;
                    }).trigger('change');

                    this._createTabs();

                    $('#colorpicker_insert').on('click', function (e) {
                        e.preventDefault();
                        self._insert();
                    });

                    // set wheel colour
                    if (self._wheel) {
                        self._wheel.setColor(color);
                    }

                } else {
                    if (this.options.widget) {
                        this.widget = $(this.options.widget);
                    } else {
                        this.widget = $(this.element).parent().find('.colorpicker_widget');

                        if (!this.widget.length) {
                            this.widget = $('<span class="colorpicker_widget"></span>').insertAfter(this.element);
                        }
                    }

                    $(this.widget).css('background-color', $(this.element).val() || '#000000').tips({
                        trigger: 'click',
                        position: 'center right',
                        content: '<div id="colorpicker" title="Color Picker">' + self._getContent() + '</div>',
                        className: 'wf-colorpicker',
                        opacity: 1,
                        parent: this.options.parent
                    }).on('tooltip:show', function () {
                        var color = $(self.element).val() || '#000000';

                        // convert color
                        if (/rgb/.test(color)) {
                            color = this._rgbToHex(color);
                        }

                        if (color.substr(0, 1) !== "#") {
                            color = '#' + color;
                        }

                        // tabs already created
                        if ($('#tab-content .colorpicker_generated').length) {
                            return;
                        }

                        // translate labels
                        $('#colorpicker_tabs').html(function (i, h) {
                            return h.replace(/\{#(\w+)\}/gi, function (a, b) {
                                return self._translate(b);
                            });
                        });

                        $('#colorpicker').append(
                            '<div class="modal-footer uk-modal-footer">' +
                            '<div id="colorpicker_preview">' +
                            '<div id="colorpicker_preview_text" class="uk-form-icon uk-form-icon-both">' +
                            '<i class="uk-icon-hashtag"></i>' +
                            '<input type="text" id="colorpicker_color" size="8" maxlength="8" value="' + color.substring(1) + '" aria-required="true" />' +
                            '<span class="uk-icon-none" id="colorpicker_preview_color" style="background-color: rgb(0, 0, 0);"></span>' +
                            '</div>' +
                            '</div>' +
                            '<button type="button" class="btn btn-primary uk-button uk-button-primary" id="colorpicker_insert"><i class="uk-icon-check"></i>' + self._translate('apply', 'Apply') + '</button>' +
                            '</div>'
                        );

                        $('#colorpicker_preview_color').css('background-color', color);

                        $('#colorpicker_color').on('change', function () {
                            var v = this.value;

                            if (v.substr(0, 1) === "#") {
                                v = v.substring(1);
                            }

                            // set wheel colour
                            if (self._wheel) {
                                self._wheel.setColor('#' + v);
                            }

                            this.value = v;
                        }).trigger('change');

                        $('#colorpicker_insert').on('click', function (e) {
                            e.preventDefault();
                            self._insert();
                        });

                        // create tabs
                        self._createTabs();

                        // set wheel colour
                        if (self._wheel) {
                            self._wheel.setColor(color);
                        }
                    });
                }
            },
            _getContent: function () {
                var h = '',
                    o = this.options;

                h += '<div id="colorpicker_tabs" class="uk-tabs">';
                h += '<ul class="nav nav-tabs uk-tab">';
                h += '<li><a href="#colorpicker_picker" aria-controls="colorpicker_picker" class="active">{#picker}</a></li>';
                h += '<li><a href="#colorpicker_web" aria-controls="colorpicker_web">{#palette}</a></li>';
                h += '<li><a href="#colorpicker_named" aria-controls="colorpicker_named">{#named}</a></li>';

                // add template / custom colours
                if (o.stylesheets.length) {
                    h += '<li><a href="#colorpicker_template" aria-controls="colorpicker_template">{#template}</a></li>';
                }

                h += '</ul>';
                h += '<div class="tab-content uk-switcher uk-tabs-panel">';
                h += '<div id="colorpicker_picker" data-type="picker" class="tab-pane"></div>';
                h += '<div id="colorpicker_web" data-type="web" class="tab-pane"></div>';
                h += '<div id="colorpicker_named" data-type="named" class="tab-pane"></div>';

                // add stylesheet colours
                if (o.stylesheets.length) {
                    h += '<div id="colorpicker_template" data-type="template" class="tab-pane"></div>';
                }
                h += '</div>';
                h += '</div>';

                return h;
            },
            _createTabs: function () {
                var self = this;

                $('#colorpicker_tabs').on('tabs.activate', function (e, tab, panel) {
                    var type = $(panel).data('type');

                    self['_create' + type].call(self, $(panel));

                    $('#colorpicker_insert').css('visibility', function () {
                        if (type === "picker") {
                            return "visible";
                        }

                        return "hidden";
                    });
                }).tabs();

                // create initial picker from visible tab
                var $tab = $('.uk-tab > li:visible', '#colorpicker_tabs').first();

                // ...otherwise use "picker" as default
                if (!$tab.length) {
                    $tab = $('.uk-tab > li', '#colorpicker_tabs').first();
                }

                // initialize with click
                $tab.addClass('active uk-active').trigger('click');
            },
            /**
             * Close colorpicker on 'blur'
             * @param {Object} e
             */
            _blur: function (e) {
                if (e) {
                    if (e.target == this.picker || e.target == this.picker.colorpicker) {
                        return false;
                    }
                    var matched = false;

                    $(this.picker.colorpicker).find('*').each(function () {
                        if (this == e.target) {
                            matched = true;
                            return false;
                        }
                    });

                    if (!matched) {
                        this.close();
                    }
                }
            },
            /**
             * Close the colorpicker
             */
            _close: function () {
                $(this.widget).trigger('tooltip:close');

                $(this.element).trigger('colorpicker:close');
            },
            /**
             * Insert selected colorpicker value
             */
            _insert: function () {
                var color = $('#colorpicker_color').val();

                if (color.substr(0, 1) !== "#") {
                    color = '#' + color;
                }

                $(this.element).trigger('colorpicker:insert', color);

                if (color) {
                    $(this.element).val(color).removeClass('placeholder').trigger('change');
                    $(this.widget).css('background-color', color);
                }

                this._close();
            },

            _namedToHex: function (value) {
                var color = '';

                $.each(this._named, function (name, hex) {
                    if (name.toLowerCase() === value.toLowerCase()) {
                        color = hex;
                        return true;
                    }
                });

                return color;
            },
            /**
             * Convert RGB color value to Hex value
             * @author Moxiecode
             * @copyright Copyright (C) 2004-2009, Moxiecode Systems AB, All rights reserved.
             * @param {String} c RGB Color
             */
            _rgbToHex: function (c) {
                var r, g, b, re = new RegExp("rgb\\s*\\(\\s*([0-9]+).*,\\s*([0-9]+).*,\\s*([0-9]+).*\\)", "gi");

                if (!c) {
                    return c;
                }

                var rgb = c.replace(re, "$1,$2,$3").split(',');
                if (rgb.length == 3) {
                    r = parseInt(rgb[0]).toString(16);
                    g = parseInt(rgb[1]).toString(16);
                    b = parseInt(rgb[2]).toString(16);

                    r = r.length == 1 ? '0' + r : r;
                    g = g.length == 1 ? '0' + g : g;
                    b = b.length == 1 ? '0' + b : b;

                    return "#" + r + g + b;
                }

                return c;
            },
            /**
             * Convert Hex color value to RGB value
             * @author Moxiecode
             * @copyright Copyright (C) 2004-2009, Moxiecode Systems AB, All rights reserved.
             * @param {String} c Hex Color
             */
            _hexToRGB: function (c) {
                var r, g, b;

                if (c.indexOf('#') != -1) {
                    c = c.replace(new RegExp('[^0-9A-F]', 'gi'), '');

                    r = parseInt(c.substring(0, 2), 16);
                    g = parseInt(c.substring(2, 4), 16);
                    b = parseInt(c.substring(4, 6), 16);

                    return {
                        r: r,
                        g: g,
                        b: b
                    };
                }

                return null;
            },
            /**
             * Generate Picker
             * @param {Object} parent DIV element to insert picker code into
             */
            _createpicker: function (parent) {
                var self = this;

                if ($(parent).hasClass('colorpicker_generated')) {
                    return;
                }

                self._wheel = $.farbtastic(parent, $('#colorpicker_color').val(), function (color) {
                    self._showColor(color);
                });

                $(parent).addClass('colorwheel colorpicker_generated');
            },
            /**
             * Generate Web Color blocks
             * @param {Object} parent DIV element to append code to
             */
            _createweb: function (parent) {
                var self = this,
                    h = '';

                if ($(parent).hasClass('colorpicker_generated')) {
                    return;
                }

                h += '<div role="listbox" aria-labelledby="colorpicker_web" tabindex="0">';
                h += '<ul>';

                $.each(this._colors, function (i, v) {
                    h += '<li style="background-color:' + v + '"><span class="colorpicker_webblock" role="option" aria-labelledby="web_colors_' + i + '" title="' + v + '"></span></li>';
                    if (self.options.forcedHighContrastMode) {
                        h += '<canvas class="mceColorSwatch" data-color="' + v + '"></canvas>';
                    }
                    h += '<span class="mceVoiceLabel" id="web_colors_' + i + '">' + v.toUpperCase() + '</span>';
                });

                h += '</ul></div>';

                $(parent).append(h).append('<br style="clear:both;" />').addClass('colorpicker_generated');

                $('span.colorpicker_webblock', parent).on('click', function () {
                    self._insert();
                }).on('mouseover', function () {
                    self._showColor($(this).attr('title'));
                });

                this._paintCanvas(parent);
            },
            /**
             * Generate Named Color blocks
             * @param {Object} parent DIV element to append code to
             */
            _createnamed: function (parent) {
                var self = this,
                    h = '';

                if ($(parent).hasClass('colorpicker_generated')) {
                    return;
                }

                h += '<div role="listbox" aria-labelledby="colorpicker_named" tabindex="0">';
                h += '<ul>';

                $.each(this._named, function (k, v) {
                    h += '<li style="background-color:' + k + '"><span class="colorpicker_namedblock" aria-labelledby="named_colors_' + k + '" title="' + self._translate(k.replace(/[^\w]/g, ''), v) + '"></span></li>';
                    if (self.options.forcedHighContrastMode) {
                        h += '<canvas class="mceColorSwatch" data-color="' + v + '"></canvas>';
                    }
                    h += '<span class="mceVoiceLabel" id="named_colors_' + k + '">' + v.toUpperCase() + '</span>';
                });

                h += '</ul></div>';

                $(parent).append(h).append('<br style="clear:both;" />').addClass('colorpicker_generated').append('<div id="colorpicker_colorname">' + this.options.labels.name + '</div>');

                $('span.colorpicker_namedblock', parent).on('click', function () {
                    self._insert();
                }).on('mouseover', function () {
                    self._showColor($(this).parent('li').css('background-color'), $(this).attr('title'));
                });

                this._paintCanvas(parent);
            },
            /**
             * Generate Template Color blocks
             * @param {Object} el DIV element to append code to
             */
            _createtemplate: function (parent) {
                var self = this,
                    h = '';

                if ($(parent).hasClass('colorpicker_generated')) {
                    return;
                }

                if (this.template_colors) {
                    var templateColors = this.template_colors;

                    if ($.type(this.template_colors) == 'string') {
                        templateColors = templateColors.split(',');
                    }

                    h += '<div role="listbox" aria-labelledby="colorpicker_template_label" tabindex="0">';
                    h += '<ul>';

                    $.each(templateColors, function (i, v) {
                        if (v.length == 4) {
                            v = v + v.substr(1);
                        }

                        h += '<li style="background-color:' + v + '"><span class="colorpicker_templateblock" aria-labelledby="template_colors_' + i + '" title="' + v + '"></span></li>';
                        if (self.options.forcedHighContrastMode) {
                            h += '<canvas class="mceColorSwatch" data-color="' + v + '"></canvas>';
                        }
                        h += '<span class="mceVoiceLabel" id="template_colors_' + i + '">' + v.toUpperCase() + '</span>';
                    });

                    h += '</ul></div>';

                    $(parent).append(h);
                }
                if (this.options.custom_colors) {
                    var h = '';

                    $(parent).append('<p id="colorpicker_custom_label">' + this.options.labels.custom + '</p>');

                    var customColors = this.options.custom_colors.split(',');

                    h += '<div role="listbox" aria-labelledby="colorpicker_custom_label" tabindex="0">';
                    h += '<ul>';

                    $.each(customColors, function (i, v) {
                        if (v.length == 4) {
                            v = v + v.replace('#', '');
                        }
                        h += '<li style="background-color:' + v + '"><span class="colorpicker_templateblock" aria-labelledby="custom_colors_' + i + '" title="' + v + '"></span></li>';
                        if (self.options.forcedHighContrastMode) {
                            h += '<canvas class="mceColorSwatch" data-color="' + v + '"></canvas>';
                        }
                        h += '<span class="mceVoiceLabel" style="display:none;" id="custom_colors_' + i + '">' + v.toUpperCase() + '</span>';
                        if ((i + 1) % 18 == 0) {
                            h += '</ul><ul>';
                        }
                    });

                    h += '</div>';

                    $(parent).append(h);

                    this._paintCanvas(parent);
                }

                $(parent).addClass('colorpicker_generated');

                $('span.colorpicker_templateblock', parent).on('click', function () {
                    self._insert();
                }).on('mouseover', function () {
                    self._showColor($(this).attr('title'));
                });

            },
            /**
             * Update name, color preview and color value
             * @param {Object} color Color hex value
             * @param {Object} name Color name
             */
            _showColor: function (color, name) {
                if (name) {
                    $("#colorpicker_colorname").html(this.options.labels.name + ': ' + name);
                }

                color = color.toLowerCase();

                if (/rgb/.test(color)) {
                    color = this._rgbToHex(color);
                }

                $("#colorpicker_preview_color").css('background-color', color);

                $("#colorpicker_color").val(color.replace('#', ''));
            },
            /**
             * Update color value and bcakground color preview
             * @param {Object} color Hex value
             */
            _changeFinalColor: function (color) {
                if (!/#/.test(color)) {
                    color = this._rgbToHex(color);
                }

                color = color.toLowerCase();

                $('#colorpicker_preview').css('background-color', color);
                $('#colorpicker_color').val(color.replace('#', ''));
            },
            _paintCanvas: function (el) {
                $('canvas.mceColorSwatch', el).each(function () {
                    var $canvas = $(this).get(0), context;

                    if ($canvas.getContext && (context = $canvas.getContext("2d"))) {
                        context.fillStyle = $canvas.getAttribute('data-color');
                        context.fillRect(0, 0, 10, 10);
                    }
                });

            },
            _sort_colors: function (colors) {

                var sorted = [],
                    s = [];

                $.each(colors, function (x, color) {
                    color = color.replace('#', '').toLowerCase();

                    if (color.length == 6) {
                        var condensed = '';
                        $.each(color.split(''), function (i, c) {
                            if (i % 2 == 0) {
                                condensed += c;
                            }
                        });

                        var color_str = condensed;
                    }
                    var v = 0;

                    $.each(color_str.split(''), function (i, c) {
                        v += parseInt(c, 16);
                    });

                    if (color) {
                        sorted[v + x] = '#' + color;
                    }
                });

                $.each(sorted, function (i, c) {
                    if (c) {
                        s.push(c);
                    }
                });

                return s;
            },
            _getStylesheetColors: function () {
                var self = this,
                    o = this.options,
                    colors = [],
                    hex, rgb;
                var hexRe = /#[0-9a-f]{3,6}/gi,
                    rgbRe = new RegExp("rgb\\s*\\(\\s*([0-9]+).*,\\s*([0-9]+).*,\\s*([0-9]+).*\\)", "gi");

                function addColor(s) {
                    if ($.inArray(s, colors) == -1) {
                        colors.push(s);
                    }
                }

                function parseCSS(s) {
                    // IE style imports

                    if (s.imports) {
                        $.each(s.imports, function (i, r) {
                            parseCSS(r);
                        });
                    }

                    $.each(s.cssRules || s.rules, function (i, r) {
                        // Real type or fake it on IE
                        switch (r.type || 1) {
                            // Rule
                            case 1:
                                var css = r.cssText || r.style.cssText;

                                if (css) {
                                    hex = css.match(hexRe);
                                    rgb = css.match(rgbRe);

                                    if (rgb) {
                                        addColor(self._rgbToHex(rgb[0]));
                                    }

                                    if (hex) {
                                        addColor(hex[0]);
                                    }
                                }

                                break;

                            // Import
                            case 3:
                                // only local imports
                                if (r.href.indexOf('://') != -1) {
                                    return;
                                }

                                parseCSS(r.styleSheet);
                                break;
                        }
                    });
                }

                function processStyleSheets(stylesheets) {
                    try {
                        $.each(stylesheets, function (i, s) {
                            parseCSS(s);
                        });
                    } catch (ex) {
                        // Ignore
                    }

                    //return self._sort_colors(colors);
                    return colors;
                }

                // list of css files
                if ($.type(o.stylesheets[0]) == 'string') {
                    var doc, el, ifr;

                    // only do this once
                    if (document.getElementById('stylsheets_iframe')) {
                        return;
                    }

                    var h = '<!DOCTYPE html><html><head><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge">';

                    $.each(o.stylesheets, function (i, s) {
                        h += '<link href="' + s + '" rel="stylesheet" type="text/css" />';
                    });

                    h += '</head><body></body></html>';

                    ifr = document.createElement('iframe');

                    $(ifr).attr({
                        'src': 'javascript:""',
                        'id': 'stylsheets_iframe'
                    }).hide().appendTo('body').on('load', function (e) {
                        el = e.target, doc = el.contentWindow.document;

                        if (doc && doc.styleSheets) {
                            self.template_colors = processStyleSheets(doc.styleSheets);
                        }

                        $(ifr).remove();
                    });
                    // get document
                    doc = ifr.contentWindow.document;
                    // write document html
                    if (doc) {
                        doc.open();
                        doc.write(h);
                        doc.close();
                    }
                } else {
                    this.template_colors = processStyleSheets(o.stylesheets);
                }
            }
        };

        $.fn.colorpicker = function (options) {
            return this.each(function () {
                // eslint-disable-next-line no-unused-vars
                new ColorPicker(this, options);
            });
        };
    })(jQuery);
    /**
     * Farbtastic Color Picker 1.2
     * (c) 2008 Steven Wittens
     *
     * This program is free software; you can redistribute it and/or modify
     * it under the terms of the GNU General Public License as published by
     * the Free Software Foundation; either version 2 of the License, or
     * (at your option) any later version.
     *
     * This program is distributed in the hope that it will be useful,
     * but WITHOUT ANY WARRANTY; without even the implied warranty of
     * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     * GNU General Public License for more details.
     *
     * You should have received a copy of the GNU General Public License
     * along with this program; if not, write to the Free Software
     * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
     */
    (function ($) {
        $.fn.farbtastic = function (callback) {
            $.farbtastic(this, callback);
            return this;
        };

        $.farbtastic = function (container, color, callback) {
            var container = $(container).get(0);
            return container.farbtastic || (container.farbtastic = new $._farbtastic(container, color, callback));
        };

        $._farbtastic = function (container, color, callback) {
            // Store farbtastic object
            var fb = this;

            // Insert markup
            $(container).html('<div class="farbtastic"><div class="color"></div><div class="wheel"></div><div class="overlay"></div><div class="h-marker marker"></div><div class="sl-marker marker"></div></div>');
            var e = $('.farbtastic', container);
            fb.wheel = $('.wheel', container).get(0);
            // Dimensions
            fb.radius = 84;
            fb.square = 100;
            fb.width = 194;

            // Fix background PNGs in IE6
            if (navigator.appVersion.match(/MSIE [0-6]\./)) {
                $('*', e).each(function () {
                    if (this.currentStyle.backgroundImage != 'none') {
                        var image = this.currentStyle.backgroundImage;
                        image = this.currentStyle.backgroundImage.substring(5, image.length - 2);
                        $(this).css({
                            'backgroundImage': 'none',
                            'filter': "progid:DXImageTransform.Microsoft.AlphaImageLoader(enabled=true, sizingMethod=crop, src='" + image + "')"
                        });
                    }
                });
            }
            /**
             * Link to the given element(s) or callback.
             */
            fb.linkTo = function (callback) {
                // Unbind previous nodes
                if (typeof fb.callback == 'object') {
                    $(fb.callback).off('keyup', fb.updateValue);
                }

                // Reset color
                fb.color = null;

                // Bind callback or elements
                if (typeof callback == 'function') {
                    fb.callback = callback;
                } else if (typeof callback == 'object' || typeof callback == 'string') {
                    fb.callback = $(callback);
                    fb.callback.on('keyup', fb.updateValue);
                    if (fb.callback.get(0).value) {
                        fb.setColor(fb.callback.get(0).value);
                    }
                }
                return this;
            };

            fb.updateValue = function (event) {
                if (this.value && this.value != fb.color) {
                    fb.setColor(this.value);
                }
            };

            /**
             * Change color with HTML syntax #123456
             */
            fb.setColor = function (color) {
                var unpack = fb.unpack(color);
                if (fb.color != color && unpack) {
                    fb.color = color;
                    fb.rgb = unpack;
                    fb.hsl = fb.RGBToHSL(fb.rgb);
                    fb.updateDisplay();
                }
                return this;
            };

            /**
             * Change color with HSL triplet [0..1, 0..1, 0..1]
             */
            fb.setHSL = function (hsl) {
                fb.hsl = hsl;
                fb.rgb = fb.HSLToRGB(hsl);
                fb.color = fb.pack(fb.rgb);
                fb.updateDisplay();
                return this;
            };

            /////////////////////////////////////////////////////

            /**
             * Retrieve the coordinates of the given event relative to the center
             * of the widget.
             */
            fb.widgetCoords = function (event) {
                var x, y;
                var el = event.target || event.srcElement;
                var reference = fb.wheel;

                if (typeof event.offsetX != 'undefined') {
                    // Use offset coordinates and find common offsetParent
                    var pos = {
                        x: event.offsetX,
                        y: event.offsetY
                    };

                    // Send the coordinates upwards through the offsetParent chain.
                    var e = el;
                    while (e) {
                        e.mouseX = pos.x;
                        e.mouseY = pos.y;
                        pos.x += e.offsetLeft;
                        pos.y += e.offsetTop;
                        e = e.offsetParent;
                    }

                    // Look for the coordinates starting from the wheel widget.
                    var e = reference;
                    var offset = {
                        x: 0,
                        y: 0
                    };

                    while (e) {
                        if (typeof e.mouseX != 'undefined') {
                            x = e.mouseX - offset.x;
                            y = e.mouseY - offset.y;
                            break;
                        }
                        offset.x += e.offsetLeft;
                        offset.y += e.offsetTop;
                        e = e.offsetParent;
                    }

                    // Reset stored coordinates
                    e = el;
                    while (e) {
                        e.mouseX = undefined;
                        e.mouseY = undefined;
                        e = e.offsetParent;
                    }
                } else {
                    // Use absolute coordinates
                    var pos = fb.absolutePosition(reference);
                    x = (event.pageX || 0 * (event.clientX + $('html').get(0).scrollLeft)) - pos.x;
                    y = (event.pageY || 0 * (event.clientY + $('html').get(0).scrollTop)) - pos.y;
                }
                // Subtract distance to middle
                return {
                    x: x - fb.width / 2,
                    y: y - fb.width / 2
                };
            };

            /**
             * Mousedown handler
             */
            fb.mousedown = function (event) {
                // Check which area is being dragged
                var pos = fb.widgetCoords(event);
                fb.circleDrag = Math.max(Math.abs(pos.x), Math.abs(pos.y)) * 2 > fb.square;

                // Process
                fb.mousemove(event);
                return false;
            };

            /**
             * TouchConvert: Converts touch co-ordinates to mouse co-ordinates
             */
            fb.touchconvert = function (e) {
                var e = e.originalEvent.touches.item(0);
                return e;
            };

            /**
             * Touchmove handler for iPad, iPhone etc
             */
            fb.touchmove = function (e) {
                fb.mousemove(fb.touchconvert(e));
                event.preventDefault();
                return false;
            };

            /**
             * Touchend handler for iPad, iPhone etc
             */
            fb.touchend = function (event) {
                $(document).off('touchmove', fb.touchmove);
                $(document).off('touchend', fb.touchend);
                document.dragging = false;
                event.preventDefault();
                return false;
            };

            /**
             * Mousemove handler
             */
            fb.mousemove = function (event) {
                // Get coordinates relative to color picker center
                var pos = fb.widgetCoords(event);

                // Set new HSL parameters
                if (fb.circleDrag) {
                    var hue = Math.atan2(pos.x, -pos.y) / 6.28;
                    if (hue < 0) {
                        hue += 1;
                    }
                    fb.setHSL([hue, fb.hsl[1], fb.hsl[2]]);
                } else {
                    var sat = Math.max(0, Math.min(1, -(pos.x / fb.square) + 0.5));
                    var lum = Math.max(0, Math.min(1, -(pos.y / fb.square) + 0.5));
                    fb.setHSL([fb.hsl[0], sat, lum]);
                }
                return false;
            };

            /**
             * Mouseup handler
             */
            fb.mouseup = function () {
                // Uncapture mouse
                $(document).off('mousemove', fb.mousemove);
                $(document).off('mouseup', fb.mouseup);
                document.dragging = false;
            };

            /**
             * Update the markers and styles
             */
            fb.updateDisplay = function () {
                // Markers
                var angle = fb.hsl[0] * 6.28;
                $('.h-marker', e).css({
                    left: Math.round(Math.sin(angle) * fb.radius + fb.width / 2) + 'px',
                    top: Math.round(-Math.cos(angle) * fb.radius + fb.width / 2) + 'px'
                });

                $('.sl-marker', e).css({
                    left: Math.round(fb.square * (0.5 - fb.hsl[1]) + fb.width / 2) + 'px',
                    top: Math.round(fb.square * (0.5 - fb.hsl[2]) + fb.width / 2) + 'px'
                });

                // Saturation/Luminance gradient
                $('.color', e).css('backgroundColor', fb.pack(fb.HSLToRGB([fb.hsl[0], 1, 0.5])));

                // Linked elements or callback
                if (typeof fb.callback == 'object') {
                    // Set background/foreground color
                    $(fb.callback).css({
                        backgroundColor: fb.color,
                        color: fb.hsl[2] > 0.5 ? '#000' : '#fff'
                    });

                    // Change linked value
                    $(fb.callback).each(function () {
                        if (this.value && this.value != fb.color) {
                            this.value = fb.color;
                        }
                    });
                } else if (typeof fb.callback == 'function') {
                    fb.callback.call(fb, fb.color);
                }
            };

            /**
             * Get absolute position of element
             */
            fb.absolutePosition = function (el) {
                var r = {
                    x: el.offsetLeft,
                    y: el.offsetTop
                };
                // Resolve relative to offsetParent
                if (el.offsetParent) {
                    var tmp = fb.absolutePosition(el.offsetParent);
                    r.x += tmp.x;
                    r.y += tmp.y;
                }
                return r;
            };

            /* Various color utility functions */
            fb.pack = function (rgb) {
                var r = Math.round(rgb[0] * 255);
                var g = Math.round(rgb[1] * 255);
                var b = Math.round(rgb[2] * 255);
                return '#' + (r < 16 ? '0' : '') + r.toString(16) +
                    (g < 16 ? '0' : '') + g.toString(16) +
                    (b < 16 ? '0' : '') + b.toString(16);
            };

            fb.unpack = function (color) {
                if (color.length == 7) {
                    return [parseInt('0x' + color.substring(1, 3)) / 255,
                    parseInt('0x' + color.substring(3, 5)) / 255,
                    parseInt('0x' + color.substring(5, 7)) / 255
                    ];
                } else if (color.length == 4) {
                    return [parseInt('0x' + color.substring(1, 2)) / 15,
                    parseInt('0x' + color.substring(2, 3)) / 15,
                    parseInt('0x' + color.substring(3, 4)) / 15
                    ];
                }
            };

            fb.HSLToRGB = function (hsl) {
                var m1, m2;
                var h = hsl[0],
                    s = hsl[1],
                    l = hsl[2];
                m2 = (l <= 0.5) ? l * (s + 1) : l + s - l * s;
                m1 = l * 2 - m2;
                return [this.hueToRGB(m1, m2, h + 0.33333),
                this.hueToRGB(m1, m2, h),
                this.hueToRGB(m1, m2, h - 0.33333)
                ];
            };

            fb.hueToRGB = function (m1, m2, h) {
                h = (h < 0) ? h + 1 : ((h > 1) ? h - 1 : h);
                if (h * 6 < 1) {
                    return m1 + (m2 - m1) * h * 6;
                }
                if (h * 2 < 1) {
                    return m2;
                }
                if (h * 3 < 2) {
                    return m1 + (m2 - m1) * (0.66666 - h) * 6;
                }
                return m1;
            };

            fb.RGBToHSL = function (rgb) {
                var min, max, delta, h, s, l;
                var r = rgb[0],
                    g = rgb[1],
                    b = rgb[2];
                min = Math.min(r, Math.min(g, b));
                max = Math.max(r, Math.max(g, b));
                delta = max - min;
                l = (min + max) / 2;
                s = 0;
                if (l > 0 && l < 1) {
                    s = delta / (l < 0.5 ? (2 * l) : (2 - 2 * l));
                }
                h = 0;
                if (delta > 0) {
                    if (max == r && max != g) {
                        h += (g - b) / delta;
                    }
                    if (max == g && max != b) {
                        h += (2 + (b - r) / delta);
                    }
                    if (max == b && max != r) {
                        h += (4 + (r - g) / delta);
                    }
                    h /= 6;
                }
                return [h, s, l];
            };

            // Install mousedown handler (the others are set on the document on-demand)
            $('*', e).on('mousedown', function (e) {
                // Capture mouse
                if (!document.dragging) {
                    $(document).on('mousemove', fb.mousemove).on('mouseup', fb.mouseup);
                    document.dragging = true;
                }
                fb.mousedown(e);
            });

            // TouchStart bound, calls conversion of touchpoints to mousepoints
            $('*', e).on("touchstart", function (e) {
                // Capture mouse
                if (!document.dragging) {
                    $(document).on('touchmove', fb.touchmove).on('touchend', fb.touchend);
                    document.dragging = true;
                }
                fb.mousedown(fb.touchconvert(e));
                e.preventDefault();
                return false;
            });

            // Init color
            fb.setColor('#000000');

            // Set linked elements/callback
            if (callback) {
                fb.linkTo(callback);
            }
        };

    })(jQuery);

    /* eslint-disable consistent-this */
    /* global tinyMCEPopup */

    // check for tinyMCEPopup
    if (window.tinyMCEPopup) {
        var win = tinyMCEPopup.getWin(), tinymce$1 = win.tinymce;

        var each = tinymce$1.each, PreviewCss = tinymce$1.util.PreviewCss;

        var TinyMCE_Utils$1 = {

            options: [],

            classes: [],

            fillClassList: function (id) {
                var self = this, ed = tinyMCEPopup.editor,
                    lst = document.getElementById(id), values = [], filter = ed.settings.class_filter;

                if (!lst) {
                    return;
                }

                // datalist element
                lst = lst.list || lst;

                if (!self.options.length) {
                    var classes = [];
                    
                    if (ed.getParam('styleselect_custom_classes')) {
                        var custom = ed.getParam('styleselect_custom_classes');

                        if (custom) {
                            values = values.concat(custom.split(','));
                        }
                    }

                    if (ed.getParam('styleselect_stylesheet') !== false) {
                        var importcss_classes = ed.settings.importcss_classes || ed.plugins.importcss.get();

                        // try extraction
                        if (Array.isArray(importcss_classes)) {
                            each(importcss_classes, function (item) {
                                var val = item["class"], ov = val;

                                // Filter classes
                                if (filter && !(val = filter(val, ov))) {
                                    return true;
                                }

                                classes.push(item);
                            });
                        }

                        if (classes.length) {
                            values = values.concat(classes);
                        }

                        // remove duplicates
                        values = values.filter(function (val, ind, arr) {
                            return arr.indexOf(val) === ind;
                        });
                    }

                    each(values, function (item) {
                        // convert custom class to object
                        if (typeof item === "string" && item) {
                            item = { 'selector': item, 'class': '', 'style': '' };
                        }

                        if (item["class"]) {
                            var val = item["class"];
                            var opt = { title: item.title || val, value: val, style: '' };

                            var styles = item.style || PreviewCss.getCssText(val);

                            if (styles) {
                                opt.style = ed.dom.serializeStyle(ed.dom.parseStyle(styles));
                            }

                            self.options.push(opt);
                        }
                    });

                    PreviewCss.reset();
                }

                // add to select list
                each(self.options, function (opt) {
                    var node = new Option(opt.title, opt.value);

                    if (opt.style) {
                        node.setAttribute('style', opt.style);
                    }

                    lst.appendChild(node);
                });
            },

            updateColor: function (parent) {
                if (typeof parent == 'string') {
                    parent = document.getElementById(parent);
                }
                document.getElementById(parent.id + '_pick').style.backgroundColor = parent.value;
            }
        };

        window.TinyMCE_Utils = TinyMCE_Utils$1;
    }

    /* eslint-disable consistent-this */
    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /* global tinyMCEPopup, jQuery, TinyMCE_Utils */

    // String functions
    (function ($) {
        var standalone = (typeof tinyMCEPopup === "undefined");

        var Wf = {
            language: '',
            options: {
                selectChange: $.noop,
                site: '',
                root: '',
                help: $.noop,
                alerts: ''
            },
            getURI: function (absolute) {
                if (!standalone) {
                    return tinyMCEPopup.editor.documentBaseURI.getURI(absolute);
                }

                return (absolute) ? this.options.root : this.options.site;
            },
            init: function (options) {
                var self = this;

                $.extend(this.options, options);

                // add footer class
                $('.mceActionPanel, .actionPanel').addClass('uk-modal-footer');

                // ie flag
                if (/MSIE/.test(navigator.userAgent) || navigator.userAgent.indexOf('Trident/') !== -1 || navigator.userAgent.indexOf('Edge/') !== -1) {
                    $('#jce').addClass('ie');
                }

                // create buttons
                $('button#insert, input#insert, button#update, input#update').button({
                    icons: {
                        primary: 'uk-icon-check'
                    }
                }).addClass('uk-button-primary');

                $('button#refresh, input#refresh').button({
                    icons: {
                        primary: 'uk-icon-refresh'
                    }
                });

                // add button actions
                $('#cancel').button({
                    icons: {
                        primary: 'uk-icon-cancel'
                    }
                });

                // go no further if standalone
                if (standalone) {
                    return;
                }

                TinyMCE_Utils.fillClassList('classes');

                $('#apply').button({
                    icons: {
                        primary: 'uk-icon-plus'
                    }
                });

                $('#help').button({
                    icons: {
                        primary: 'uk-icon-help'
                    }
                }).on('click', function (e) {
                    e.preventDefault();
                    self.help();
                });

                // add button actions
                $('#cancel').on('click', function (e) {
                    tinyMCEPopup.close();
                    e.preventDefault();
                });

                // activate tabs
                $('#tabs').tabs();

                // create colour picker widgets
                this.createColourPickers();

                // create browser widgets
                this.createBrowsers();

                $('.uk-datalist').datalist({ loading: self.translate('message_load', 'Loading...') });

                $('.uk-input-clear').clearable();

                // activate tooltips
                $('.hastip, .tip, .tooltip').tips();

                // set styles events
                $('#align, #clear, #dir').on('change', function () {
                    self.updateStyles();
                });

                // set margin events
                $('input[id^="margin_"]').on('change', function () {
                    self.updateStyles();
                });

                // setup border widget
                $('#border').borderWidget().on('border:change', function () {
                    self.updateStyles();
                });

                // update styles on border change
                $('#border_width, #border_style, #border_color').on('change', function () {
                    self.updateStyles();
                });

                $('#style').on('change', function () {
                    self.setStyles();
                });

                // create constrainables around constrain checkbox
                $('.uk-constrain-checkbox').constrain();

                // equalize input values
                $('.uk-equalize-checkbox').equalize();

                // hide HTML4 only attributes
                if (tinyMCEPopup.editor.settings.schema === 'html5-strict' && tinyMCEPopup.editor.settings.validate) {
                    $('.html4').hide().find(':input').prop('disabled', true);
                }

                // initialise repeatable elements
                $('.uk-repeatable').repeatable();

                $('body').on('keydown.tab', function (e) {
                    if (e.keyCode === 9) {

                        // visible inputs and select2 combobox
                        var $navItems = $(':input:visible:enabled, span[role="combobox"]', this).not('input[type="file"]').filter(function () {
                            return this.getAttribute('tabindex') >= 0;
                        });

                        if (!$navItems.length) {
                            return;
                        }

                        // reset all tabindex values
                        $navItems.attr('tabindex', 0);

                        if (e.shiftKey) {
                            $navItems.reverse();
                        }

                        var endIndex = Math.max(0, $navItems.length - 1), idx = $navItems.index(e.target) + 1;

                        if (idx > endIndex) {
                            idx = 0;
                        }

                        $navItems.eq(idx).trigger('focus').attr('tabindex', 1);

                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                });

                // add scroll event to trigger datalist update
                $('.uk-tabs-panel').on('scroll.tabs', function (e) {
                    $('select').trigger('datalist:position', e);
                });

                // prevent backspace out of window
                $('body').on('keydown.backspace', function (e) {
                    if (e.keyCode === 8 && e.target) {

                        if (e.target && (e.target.nodeName === "INPUT" || e.target.nodeName === "SELECT" || e.target.nodeName === "TEXTAREA")) {
                            return;
                        }

                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                });

                // close on esc
                $('body').on('keyup.esc', function (e) {
                    if (e.keyCode === 27) {
                       // cancel event
                       e.preventDefault();
                       e.stopPropagation();

                        // close an existing modal first
                        if ($('.uk-modal-close').length) {
                            $('.uk-modal-close').not(':submit').trigger('click');
                            return;
                        }

                        tinyMCEPopup.close();
                    }
                });

                if (!standalone) {
                    var ed = tinyMCEPopup.editor;

                    if (ed.onUpdateMedia) {
                        function updateMedia(before, after) {
                            var basedir = $.fn.filebrowser.getbasedir();

                            before = Wf.String.path(basedir, before);
                            after = Wf.String.path(basedir, after);

                            ed.onUpdateMedia.dispatch(ed, { before: before, after: after });
                        }

                        $(window).ready(function () {
                            $('[data-filebrowser]').on('filebrowser:onfilerename filebrowser:onfolderrename', function (e, before, after) {
                                updateMedia(before, after);
                            }).on('filebrowser:onpaste', function (e, type, before, after) {
                                // only on cut/paste
                                if (type != 'moveItem') {
                                    return;
                                }

                                updateMedia(before, after);
                            });
                        });
                    }
                }
            },
            /**
             * Get the name of the plugin
             * @returns {String} Plugin name
             */
            getName: function () {
                return $('body').data('plugin');
            },
            getPath: function (plugin) {
                if (!standalone) {
                    return tinyMCEPopup.editor.plugins[this.getName()].url;
                }

                return this.options.site + 'components/com_jce/editor/tiny_mce/plugins/' + this.getName();
            },
            loadLanguage: function () {
                if (!standalone) {
                    var ed = tinyMCEPopup.editor,
                        u = ed.getParam('document_base_url') + 'components/com_jce/editor/tiny_mce';

                    if (u && ed.settings.language && ed.settings.language_load !== false) {
                        u += '/langs/' + ed.settings.language + '_dlg.js';

                        if (!tinymce.ScriptLoader.isDone(u)) {
                            document.write('<script type="text/javascript" src="' + tinymce._addVer(u) + '"></script>');
                            tinymce.ScriptLoader.markDone(u);
                        }
                    }
                }
            },
            help: function () {
                var ed = tinyMCEPopup.editor;

                ed.windowManager.open({
                    url: ed.getParam('site_url') + 'index.php?option=com_jce&task=plugin.display&plugin=help&lang=' + ed.settings.language + '&section=editor&category=' + this.getName(),
                    title: ed.getLang('dlg.help', 'Help'),
                    width: 896,
                    height: 768,
                    size: 'mce-modal-landscape-full',
                    close_previous: 0
                });
            },

            createColourPickers: function () {
                var self = this,
                    ed = tinyMCEPopup.editor,
                    doc = ed.getDoc();

                $('input.color, input.colour').each(function () {
                    var id = $(this).attr('id');
                    var v = this.value;

                    var elm = this;

                    // remove # from value
                    if (v && v.charAt(0) === "#") {
                        this.value = v.substr(1);
                        v = this.value;
                    }

                    if ($(this).siblings(':input').length) {
                        $(this).wrap('<span />');
                    }

                    $(this).parent('.uk-form-controls, td, span').addClass('uk-form-icon uk-form-icon-both').prepend('<i class="uk-icon-hashtag" />');

                    var $picker = $('<button class="uk-button-link uk-icon-none uk-icon-colorpicker" title="' + self.translate('colorpicker') + '" aria-label="' + self.translate('colorpicker') + '" id="' + id + '_pick"></button>').insertAfter(this).attr('disabled', function () {
                        return $(elm).is(':disabled') ? true : null;
                    });

                    $(this).on('colorpicker:pick', function () {
                        var v = this.value;

                        if (v.charAt(0) !== "#") {
                            v = '#' + v;
                        }

                        $(this).next('.uk-icon-colorpicker').css('background-color', v);
                    });

                    $(this).on('change', function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        var v = this.value;

                        if (v && v.charAt(0) === "#") {
                            $(this).val(v.substr(1));
                        }

                        // default to black
                        if (v === "") {
                            v = "000000";
                        }

                        // toggle disabled
                        $(this).next('.uk-icon-colorpicker').attr('disabled', function () {
                            return elm.disabled ? true : null;
                        });

                        // fire event
                        $(this).trigger('colorpicker:pick', '#' + v);
                    }).trigger('change');

                    var colorpicker_custom_colors = ed.getParam('colorpicker_custom_colors', '');
                    var colorpicker_type = ed.getParam('colorpicker_type', '');

                    if (colorpicker_type === "simple" && colorpicker_custom_colors.length) {

                        if (typeof colorpicker_custom_colors === "string") {
                            colorpicker_custom_colors = colorpicker_custom_colors.split(',');
                        }

                        var html = '<div role="listbox" tabindex="0" class="wf-colorpicker-simple-colors">';

                        $.each(colorpicker_custom_colors, function (i, col) {
                            if (col.length == 4) {
                                col = col + col.substr(1);
                            }

                            html += '<div style="background-color:' + col + '" data-color="' + col + '" title="' + col + '"><span aria-hidden="true" aria-label="' + col + '"></span></div>';
                        });

                        html += '</div>';

                        $picker.tips({
                            trigger: 'click',
                            position: 'bottom center',
                            content: '<div id="colorpicker" aria-label="Colorpicker" title="Color Picker">' + html + '</div>',
                            className: 'wf-colorpicker wf-colorpicker-simple',
                            opacity: 1
                        }).on('tooltip:show', function () {
                            $('#colorpicker').on('click', '.wf-colorpicker-simple-colors > div', function (e) {
                                var col = $(e.target).data('color');

                                if (col) {
                                    $(elm).val(col).trigger('change');
                                    $picker.trigger('tooltip:close');
                                }
                            });
                        });
                    } else {
                        // get stylesheets from editor
                        var stylesheets = [];

                        if (doc.styleSheets.length) {
                            $.each(doc.styleSheets, function (i, s) {
                                // only load template stylesheets, not from tinymce plugins
                                if (s.href && s.href.indexOf('tiny_mce') == -1) {
                                    stylesheets.push(s);
                                }
                            });
                        }

                        var settings = $.extend(ColorPicker.settings, {
                            widget: $picker,
                            labels: {
                                picker_tab: 'Picker',
                                title: 'Color Picker',
                                palette_tab: 'Palette',
                                palette: 'Web Colors',
                                named_tab: 'Named',
                                named: 'Named Colors',
                                template_tab: 'Template',
                                template: 'Template Colors',
                                color: 'Color',
                                apply: 'Apply',
                                name: 'Name'
                            },
                            stylesheets: stylesheets,
                            custom_colors: colorpicker_custom_colors
                        });

                        $(this).colorpicker(settings);
                    }
                });
            },
            createBrowsers: function (el, callback, filter) {
                var self = this;

                if (el) {
                    $(el).addClass('browser').addClass(filter || '');
                }

                $('input.browser').add(el).each(function () {
                    var input = this;

                    filter = (function (el) {
                        if ($(el).hasClass('image') || $(el).hasClass('images')) {
                            return 'images';
                        }
                        if ($(el).hasClass('html')) {
                            return 'html';
                        }
                        if ($(el).hasClass('media')) {
                            return 'media';
                        }
                        return 'files';
                    })(this);

                    $(this).parent('td, .uk-form-controls').addClass('uk-form-icon uk-form-icon-flip');

                    var map = {
                        'images': 'picture',
                        'html': 'file-text',
                        'files': 'file-text',
                        'media': 'film'
                    };

                    $('<button class="uk-icon uk-icon-' + map[filter] + ' uk-button uk-button-link" title="' + self.translate('browse', 'Browse for Files') + '" aria-label="' + self.translate('browse', 'Browse for Files') + '"></button>').on('click', function (e) {
                        e.preventDefault();

                        return tinyMCEPopup.execCommand('mceFileBrowser', true, {
                            "callback": callback || $(input).attr('id'),
                            "value": input.value,
                            "filter": $(this).attr('data-filter') || filter,
                            "caller": self.getName(),
                            "window": window
                        });

                    }).insertAfter(this);
                });
            },
            getLanguage: function () {
                if (!this.language) {
                    var s = $('body').attr('lang') || 'en';

                    if (s.length > 2) {
                        s = s.substr(0, 2);
                    }

                    this.language = s;
                }

                return this.language;
            },
            /**
             * Resize o to fit into container c
             * @param {Object} o Width / Height Object pair
             * @param {Object} c Width / Height Object pair
             */
            sizeToFit: function (o, c) {
                var x = c.width;
                var y = c.height;
                var w = o.width;
                var h = o.height;

                var ratio = x / w;

                if (w / h > ratio) {
                    h = h * (x / w);
                    w = x;
                    if (h > y) {
                        w = w * (y / h);
                        h = y;
                    }
                } else {
                    w = w * (y / h);
                    h = y;
                    if (w > x) {
                        h = h * (x / w);
                        w = x;
                    }
                }

                return {
                    width: Math.round(w),
                    height: Math.round(h)
                };
            },

            translate: function (s, ds) {
                var val = tinyMCEPopup.getLang('dlg.' + s, ds || s);
                return val;
            }
        };

        /**
          * Cookie Functions
          */
        Wf.Storage = {
            /**
             * Gets the raw data of a sessionStorage item by name.
             *
             * @method get
             * @param {String} n Name of item to retrive.
             * @param {String} s Default value to return.
             * @param {Function} fn Function to validate value against, return default if false
             * @return {String} Data string.
             */
            get: function (n, s, fn) {
                if (!window.sessionStorage) {
                    return s;
                }

                var val = sessionStorage.getItem(n);

                if (typeof val == 'undefined' || val == null) {
                    return s;
                }

                if (fn && typeof fn === "function" && !fn(val)) {
                    return s;
                }

                if (val === 'null') {
                    return null;
                }

                if (val === 'true') {
                    return true;
                }

                if (val === 'false') {
                    return false;
                }

                return val;
            },
            /**
             * Sets a raw sessionStorage string.
             *
             * @method set
             * @param {String} n Name of the item.
             * @param {String} v Raw item data.
             */
            set: function (n, v) {
                if (!window.sessionStorage) {
                    return;
                }

                sessionStorage.setItem(n, v);
            }

        };
        // load Language
        Wf.loadLanguage();

        window.Wf = Wf;
    })(jQuery);

    if (typeof ColorPicker === 'undefined') {
        var ColorPicker = {
            settings: {}
        };
    }

    /* global Wf, jQuery, tinyMCEPopup */

    (function ($, Wf) {
        var URL = {
            toAbsolute: function (url) {
                if (typeof tinyMCEPopup !== "undefined") {
                    return tinyMCEPopup.editor.documentBaseURI.toAbsolute(url);
                }

                if (/http(s)?:\/\//.test(url)) {
                    return url;
                }

                return Wf.getURI(true) + url.substr(0, url.indexOf('/'));
            },
            toRelative: function (url) {
                if (typeof tinyMCEPopup !== "undefined") {
                    return tinyMCEPopup.editor.documentBaseURI.toRelative(url);
                }

                if (/http(s)?:\/\//.test(url)) {
                    return url.substr(url.indexOf('/'));
                }

                return url;
            }

        };

        Wf.URL = $.URL = URL;

    })(jQuery, Wf);

    /* global jQuery, Wf */

    (function ($, Wf) {

        var asciiMap = { "192": "A", "193": "A", "194": "A", "195": "A", "196": "A", "197": "A", "198": "AE", "199": "C", "200": "E", "201": "E", "202": "E", "203": "E", "204": "I", "205": "I", "206": "I", "207": "I", "208": "D", "209": "N", "210": "O", "211": "O", "212": "O", "213": "O", "214": "O", "216": "O", "217": "U", "218": "U", "219": "U", "220": "U", "221": "Y", "223": "s", "224": "a", "225": "a", "226": "a", "227": "a", "228": "a", "229": "a", "230": "ae", "231": "c", "232": "e", "233": "e", "234": "e", "235": "e", "236": "i", "237": "i", "238": "i", "239": "i", "241": "n", "242": "o", "243": "o", "244": "o", "245": "o", "246": "o", "248": "o", "249": "u", "250": "u", "251": "u", "252": "u", "253": "y", "255": "y", "256": "A", "257": "a", "258": "A", "259": "a", "260": "A", "261": "a", "262": "C", "263": "c", "264": "C", "265": "c", "266": "C", "267": "c", "268": "C", "269": "c", "270": "D", "271": "d", "272": "D", "273": "d", "274": "E", "275": "e", "276": "E", "277": "e", "278": "E", "279": "e", "280": "E", "281": "e", "282": "E", "283": "e", "284": "G", "285": "g", "286": "G", "287": "g", "288": "G", "289": "g", "290": "G", "291": "g", "292": "H", "293": "h", "294": "H", "295": "h", "296": "I", "297": "i", "298": "I", "299": "i", "300": "I", "301": "i", "302": "I", "303": "i", "304": "I", "305": "i", "306": "IJ", "307": "ij", "308": "J", "309": "j", "310": "K", "311": "k", "313": "L", "314": "l", "315": "L", "316": "l", "317": "L", "318": "l", "319": "L", "320": "l", "321": "l", "322": "l", "323": "N", "324": "n", "325": "N", "326": "n", "327": "N", "328": "n", "329": "n", "332": "O", "333": "o", "334": "O", "335": "o", "336": "O", "337": "o", "338": "OE", "339": "oe", "340": "R", "341": "r", "342": "R", "343": "r", "344": "R", "345": "r", "346": "S", "347": "s", "348": "S", "349": "s", "350": "S", "351": "s", "352": "S", "353": "s", "354": "T", "355": "t", "356": "T", "357": "t", "358": "T", "359": "t", "360": "U", "361": "u", "362": "U", "363": "u", "364": "U", "365": "u", "366": "U", "367": "u", "368": "U", "369": "u", "370": "U", "371": "u", "372": "W", "373": "w", "374": "Y", "375": "y", "376": "Y", "377": "Z", "378": "z", "379": "Z", "380": "z", "381": "Z", "382": "z", "383": "s", "402": "f", "416": "O", "417": "o", "431": "U", "432": "u", "461": "A", "462": "a", "463": "I", "464": "i", "465": "O", "466": "o", "467": "U", "468": "u", "469": "U", "470": "u", "471": "U", "472": "u", "473": "U", "474": "u", "475": "U", "476": "u", "506": "A", "507": "a", "508": "AE", "509": "ae", "510": "O", "511": "o" };

        /**
         * String functions
         */
        Wf.String = {
            /**
             * From php.js
             * More info at: http://phpjs.org
             * php.js is copyright 2011 Kevin van Zonneveld.
             */
            basename: function (s) {
                return s.replace(/^.*[\/\\]/g, '');
            },
            /**
             * From php.js
             * More info at: http://phpjs.org
             * php.js is copyright 2011 Kevin van Zonneveld.
             */
            dirname: function (s) {
                if (/[\\\/]+/.test(s)) {
                    return s.replace(/\\/g, '/').replace(/\/[^\/]*\/?$/, '');
                }

                return '';
            },
            filename: function (s) {
                return this.stripExt(this.basename(s));
            },
            getExt: function (s) {
                return s.substring(s.length, s.lastIndexOf('.') + 1);
            },
            stripExt: function (s) {
                return s.replace(/\.[^.]+$/i, '');
            },
            pathinfo: function (s) {
                var info = {
                    'basename': this.basename(s),
                    'dirname': this.dirname(s),
                    'extension': this.getExt(s),
                    'filename': this.filename(s)
                };
                return info;
            },
            path: function (a, b) {
                if ($.type(a) === "array") {
                    return this.clean(a.join('/'));
                }

                return this.clean(a + '/' + b);
            },
            clean: function (s) {
                if (s.indexOf('://') !== -1) {
                    var parts = s.split('://');

                    parts[1] = parts[1].replace(/\/+/g, '/');
                    return parts.join('://');
                }

                return s.replace(/\/+/g, '/');
            },

            toASCII: function (string) {
                return string.replace(/([^\w\.\-\s ])/gi, function (str) {
                    return asciiMap[str.charCodeAt(0)] || '';
                });
            },

            _toUnicode: function (s) {
                var c = s.toString(16).toUpperCase();

                while (c.length < 4) {
                    c = '0' + c;
                }

                return '\\u' + c;
            },

            safe: function (s, mode, spaces, textcase) {
                mode = mode || 'utf-8';

                spaces = spaces || '_';

                // replace spaces with specified character
                s = s.replace(/[\s ]+/g, spaces);

                // remove some common characters
                s = s.replace(/[\+\\\/\?\#%&<>"\'=\[\]\{\},;@\^\(\)£€$~]/g, '');

                var r = '';

                for (var i = 0, ln = s.length; i < ln; i++) {
                    var ch = s[i];
                    // only process on possible restricted characters or utf-8 letters/numbers
                    if (/[^\w\.\-\s ]/.test(ch)) {
                        // skip any character less than 127, eg: &?@* etc.
                        if (this._toUnicode(ch.charCodeAt(0)) < '\\u007F') {
                            continue;
                        }
                    }

                    r += ch;
                }

                s = r;

                if (mode === 'ascii') {
                    s = this.toASCII(s);
                }

                // remove multiple period characters
                s = s.replace(/(\.){2,}/g, '');

                // remove leading period
                s = s.replace(/^\./, '');

                // remove trailing period
                s = s.replace(/\.$/, '');

                // cleanup path
                s = this.basename(s);

                // change case
                if (textcase) {
                    switch (textcase) {
                        case 'lowercase':
                            s = s.toLowerCase();
                            break;
                        case 'uppercase':
                            s = s.toUpperCase();
                            break;
                    }
                }

                return s;
            },
            query: function (s) {
                var p = {};

                s = this.decode(s);

                // nothing to create query from
                if (s.indexOf('=') === -1) {
                    return p;
                }

                if (/\?/.test(s)) {
                    s = s.substring(s.indexOf('?') + 1);
                }

                if (/#/.test(s)) {
                    s = s.substr(0, s.indexOf('#'));
                }

                var pairs = s.replace(/&amp;/g, '&').split('&');

                $.each(pairs, function (i, item) {            
                    if (item) {
                        var pair = item.split('=');
                        p[pair[0]] = pair[1];
                    }
                });

                return p;
            },
            /**
             * Encode basic entities
             *
             * Copyright 2010, Moxiecode Systems AB
             */
            encode: function (s) {
                var baseEntities = {
                    '"': '&quot;',
                    "'": '&#39;',
                    '<': '&lt;',
                    '>': '&gt;',
                    '&': '&amp;'
                };
                return ('' + s).replace(/[<>&\"\']/g, function (chr) {
                    return baseEntities[chr] || chr;
                });

            },
            /**
             * Decode basic entities
             *
             * Copyright 2010, Moxiecode Systems AB
             */
            decode: function (s) {
                var reverseEntities = {
                    '&lt;': '<',
                    '&gt;': '>',
                    '&amp;': '&',
                    '&quot;': '"',
                    '&apos;': "'"
                };
                return s.replace(/&(#)?([\w]+);/g, function (all, numeric, value) {
                    if (numeric) {
                        return String.fromCharCode(value);
                    }

                    return reverseEntities[all];
                });

            },
            escape: function (s) {
                return encodeURI(s);
            },
            unescape: function (s) {
                return decodeURI(s);
            },
            encodeURI: function (s, preserve_urls) {
                // don't encode local file links
                if (s && s.indexOf('file://') === 0) {
                    return s;
                }

                s = encodeURIComponent(decodeURIComponent(s)).replace(/%2F/g, '/');

                if (preserve_urls) {
                    s = s.replace(/%(21|2A|27|28|29|3B|3A|40|26|3D|2B|24|2C|3F|25|23|5B|5D)/g, function (a, b) {
                        return String.fromCharCode(parseInt(b, 16));
                    });
                }

                return s;
            },
            buildURI: function (s) {
                // add http if necessary
                if (/^\s*www\./.test(s)) {
                    s = 'http://' + s;
                }

                // the url contains "shortcode" characters, skip encoding
                if (s.indexOf('{') !== -1) {
                    return s;
                }

                return s.replace(/ /g, '%20');
            },
            /**
             * From TinyMCE form_utils.js function, slightly modified.
             * @author Moxiecode
             * @copyright Copyright 2004-2008, Moxiecode Systems AB, All rights reserved.
             */
            toHex: function (color) {
                var re = new RegExp("rgb\\s*\\(\\s*([0-9]+).*,\\s*([0-9]+).*,\\s*([0-9]+).*\\)", "gi");

                var rgb = color.replace(re, "$1,$2,$3").split(',');
                if (rgb.length == 3) {
                    var r = parseInt(rgb[0], 10).toString(16);
                    var g = parseInt(rgb[1], 10).toString(16);
                    var b = parseInt(rgb[2], 10).toString(16);

                    r = r.length == 1 ? 0 + r : r;
                    g = g.length == 1 ? 0 + g : g;
                    b = b.length == 1 ? 0 + b : b;

                    return "#" + r + g + b;
                }
                return color;
            },
            /**
             * From TinyMCE form_utils.js function, slightly modified.
             * @author Moxiecode
             * @copyright Copyright  2004-2008, Moxiecode Systems AB, All rights reserved.
             */
            toRGB: function (color) {
                if (color.indexOf('#') != -1) {
                    color = color.replace(new RegExp('[^0-9A-F]', 'gi'), '');

                    var r = parseInt(color.substring(0, 2), 16);
                    var g = parseInt(color.substring(2, 4), 16);
                    var b = parseInt(color.substring(4, 6), 16);

                    return "rgb(" + r + "," + g + "," + b + ")";
                }
                return color;
            },
            ucfirst: function (s) {
                return s.charAt(0).toUpperCase() + s.substring(1);
            },
            formatSize: function (s, int) {
                if (!s) {
                    return "";
                }

                // MB
                if (s > 1048576) {
                    var n = Math.round((s / 1048576) * 100) / 100;

                    if (int) {
                        return n;
                    }

                    return n + " " + Wf.translate('size_mb', 'MB');
                }

                // KB
                if (s > 1024) {
                    var n = Math.round((s / 1024) * 100) / 100;

                    if (int) {
                        return n;
                    }

                    return n + " " + Wf.translate('size_kb', 'KB');
                }

                if (int) {
                    return s;
                }

                return s + " " + Wf.translate('size_bytes', 'Bytes');
            },
            /**
             * Format a UNIX date string
             * @param time UNIX Time in seconds
             * @param fmt Date / Time Format eg: '%d/%m/%Y, %H:%M'
             * @return Formatted Date / Time
             * @copyright Copyright 2009, Moxiecode Systems AB
             */
            formatDate: function (time, fmt) {
                var date = new Date(time * 1000);

                fmt = fmt || '%d/%m/%Y, %H:%M';

                function addZeros(value, len) {
                    var i;

                    value = "" + value;

                    if (value.length < len) {
                        for (i = 0; i < (len - value.length); i++) {
                            value = "0" + value;
                        }
                    }

                    return value;
                }

                fmt = fmt.replace("%D", "%m/%d/%y");
                fmt = fmt.replace("%r", "%I:%M:%S %p");
                fmt = fmt.replace("%Y", "" + date.getFullYear());
                fmt = fmt.replace("%y", "" + date.getYear());
                fmt = fmt.replace("%m", addZeros(date.getMonth() + 1, 2));
                fmt = fmt.replace("%d", addZeros(date.getDate(), 2));
                fmt = fmt.replace("%H", "" + addZeros(date.getHours(), 2));
                fmt = fmt.replace("%M", "" + addZeros(date.getMinutes(), 2));
                fmt = fmt.replace("%S", "" + addZeros(date.getSeconds(), 2));
                fmt = fmt.replace("%I", "" + ((date.getHours() + 11) % 12 + 1));
                fmt = fmt.replace("%p", "" + (date.getHours() < 12 ? "AM" : "PM"));
                fmt = fmt.replace("%%", "%");

                return fmt;
            }
        };
    })(jQuery, Wf);

    /* global jQuery, Wf */

    (function ($, Wf) {
        /**
         * Test if valid JSON string
         * https://github.com/douglascrockford/JSON-js/blob/master/json2.js
         * @param {string} s
         * @return {boolean}
         */
        function isJSON(s) {
            return /^[\],:{}\s]*$/
                .test(s.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                    .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                    .replace(/(?:^|:|,)(?:\s*\[)+/g, ''));
        }

        // uid counter
        var counter = 0;

        /**
         Generates an unique ID.
         @method uid
         @return {String} Virtually unique id.
         */
        function uid() {
            var guid = new Date().getTime().toString(32),
                i;

            for (i = 0; i < 5; i++) {
                guid += Math.floor(Math.random() * 65535).toString(32);
            }

            return 'wf_' + guid + (counter++).toString(32);
        }

        var instance = {};

        Wf.JSON = {
            /**
             * Send JSON request
             *
             * @param func
             *            Function name to execute by the server
             * @param args
             *            String, Array or Object containing arguments to
             *            send
             * @param callback
             *            Callback function to execute
             * @param scope
             *            Scope to execute the callback in
             * @param multi
             *            Allow multiple requests on the same function
             */
            request: function (func, data, callback, scope, multi) {
                var json = {
                    'method': func,
                    'id': uid()
                };

                // already registered so abort in favout of new request
                if (instance[func] && !multi) {
                    instance[func].abort();
                }

                callback = callback || $.noop;

                // additional POST data to add (will not be parsed by PHP json parser)
                var args = {};

                // get form input data (including token) as serialized string
                var fields = $(':input', 'form').serialize();

                // if data is a string or array
                if ($.type(data) === 'string' || $.type(data) === 'array') {
                    $.extend(json, {
                        'params': $.type(data) === 'string' ? Wf.String.encodeURI(data) : $.map(data, function (s) {
                            if (s && $.type(s) === 'string') {
                                return Wf.String.encodeURI(s);
                            }

                            return s;
                        })

                    });
                } else {
                    // if data is an object
                    if ($.type(data) === 'object' && data.json) {
                        $.extend(json, {
                            'params': data.json
                        });

                        delete data.json;
                    }

                    $.extend(args, data);
                }

                // add passed in data to form fields
                if (!$.isEmptyObject(args)) {
                    fields += '&' + $.param(args);
                }

                var url = document.location.href;

                // replace task
                url = url.replace(/task=plugin.display/, 'task=plugin.rpc');

                function showError(e) {
                    var txt = "";

                    if ($.isPlainObject(e)) {
                        txt = e.text || "";
                    } else {
                        txt = $.type(e) === 'array' ? e.join('\n') : e;
                    }

                    if (txt) {
                        // remove linebreaks
                        txt = txt.replace(/<br([^>]+?)>/, '');
                    }

                    // show error
                    Wf.Modal.alert(txt);
                }

                instance[func] = $.ajax({
                    "context": scope || this,
                    "url": url,
                    "dataType": "text",
                    "method": "post",
                    "data": "json=" + JSON.stringify(json) + '&' + fields
                }).done(function (o) {
                    var r;

                    if (o) {
                        // check result - should be object, parse as JSON if string
                        if ($.type(o) === 'string' && isJSON(o)) {
                            // parse string as JSON object
                            var s = JSON.parse(o);
                            // pass if successful
                            if (s) {
                                o = s;
                            }
                        }

                        // process object result
                        if ($.isPlainObject(o)) {
                            if (o.error) {
                                showError(o.text || o.error.message || '');
                            }

                            r = o.result || null;

                            if (r && r.error && r.error.length) {
                                showError(r.error || '');
                            }
                            // show error
                        } else {                        
                            // check for malformed JSON
                            if (/[{}]/.test(o)) {
                                showError('The server returned an invalid JSON response.');
                            } else {
                                showError(o);
                            }
                        }
                    } else {
                        showError('The server returned invalid or missing data.');
                    }

                    // clear instance
                    instance[func] = null;

                    if ($.isFunction(callback)) {
                        callback.call(scope || this, r);
                    } else {
                        return r;
                    }
                }).fail(function (e, status, txt) {
                    // don't show alert for jQuery abort
                    if (status !== "abort") {
                        Wf.Modal.alert(status || ('Server Error - ' + txt));
                    }

                    // clear instance
                    instance[func] = null;
                });
            }
        };
    })(jQuery, Wf);

    /* global jQuery, Wf */

    (function ($, Wf) {
        function calculateWidth(n, cw, ch) {
            var ww = $(n).width() - 60,
                wh = $(n).height(),
                wh = wh - 101;

            var scale = Math.min(ww / cw, wh / ch);

            cw = Math.min(cw, Math.floor(cw * scale));

            $('.uk-modal-dialog', n).css('max-width', cw + 'px');
        }

        function getElementHtml(data) {
            var html = '';
            
            $.each(data, function (key, value) {
                if (value.options) {
                    html += '<div class="uk-form-row uk-flex">';
                    html += '<label class="uk-form-label uk-width-1-5" for="' + key + '">' + (value.label || key) + '</label>';
                    html += '<div class="uk-form-controls uk-width-4-5"><select id="' + key + '" name="' + key + '">';

                    $.each(value.options, function (optionValue, optionName) {
                        var selected = "";

                        if (optionValue['default'] && value === optionValue['default']) {
                            selected = " selected";
                        }

                        html += '<option value="' + optionValue + '"' + selected + '>' + optionName + '</option>';
                    });

                    html += '</select></div>';
                    html += '</div>';
                } else {
                    html += '<div class="uk-form-row uk-flex"><label class="uk-form-label uk-width-1-5" for="' + key + '">' + value.label || key + '</label><div class="uk-form-controls uk-width-4-5"><input id="' + key + '" type="text" name="' + key + '" value="' + value.value || '' + '" /></div></div>';
                }
            });

            return html;
        }

        /**
         * Dialog Functions
         */
        Wf.Modal = {
            counter: 0,
            _uid: function (p) {
                return (!p ? 'wf_' : p) + (this.counter++);
            },
            dialog: function (title, data, options) {
                return this.open(title, options, data);
            },
            /**
             * Basic Dialog
             */
            open: function (title, options, html) {
                var div = document.createElement('div'),
                    footer;

                options = $.extend({
                    container: $('form').first().get(0) || 'body',
                    classes: '',
                    id: 'dialog_' + this._uid(),
                    open: $.noop,
                    close: $.noop,
                    beforeclose: $.noop,
                    buttons: false,
                    header: true,
                    label: { 'confirm': Wf.translate('yes', 'Yes'), 'cancel': Wf.translate('no', 'No') }
                }, options);

                if (options.onOpen) {
                    options.open = options.onOpen;
                }

                if (options.onBeforeClose) {
                    options.beforeclose = options.onBeforeClose;
                }

                if (options.onClose) {
                    options.close = options.onClose;
                }

                // add classes to div
                $(div).addClass('uk-modal');

                if ($('.uk-modal-overlay').length === 0) {
                    $(div).append('<div class="uk-modal-overlay uk-position-cover uk-overlay-background"></div>');
                }

                // create modal
                var modal = $('<div class="uk-modal-dialog" role="dialog" aria-modal="true" aria-label="' + title + '"></div>').appendTo(div);

                // add classes to modal
                $(modal).addClass(options.classes);

                if (options.width) {
                    $(modal).width(options.width);
                }

                if (options.height) {
                    $(modal).height(options.height);
                }

                // add close
                $(modal).append('<button type="button" class="uk-modal-close uk-close" aria-label="' + Wf.translate('close', 'Close') + '"></button>');

                if (options.header) {
                    // add header
                    $(modal).append('<div class="uk-modal-header"><h3>' + title + '</h3></div>');
                }

                // add body and data
                $('<div class="uk-modal-body uk-overflow-container" id="' + options.id + '"></div>').appendTo(modal).append(html);

                if (options.elements) {
                    var html = '';
                    
                    if ($.type(options.elements) === 'string' && options.elements) {
                        html = options.elements;
                    } else {
                        html = getElementHtml(options.elements);
                    }

                    $('.uk-modal-body', modal).append(html);
                }

                // add buttons
                if (options.buttons) {
                    footer = $('<div class="uk-modal-footer uk-text-right"></div>');

                    $.each(options.buttons, function (i, o) {
                        var btn = $('<button class="uk-button uk-margin-small-left" id="' + options.id + '_button_' + i + '"></button>').on('click', function (e) {
                            e.preventDefault();

                            if ($.isFunction(o.click)) {
                                o.click.call(this, e);
                            }
                            // cancel submit
                        }).on('submit', function (e) {
                            e.preventDefault();
                            e.stopImmediatePropagation();
                        });

                        $.each(o.attributes, function (k, v) {
                            if (k === "class") {
                                $(btn).addClass(v);
                            } else {
                                $(btn).attr(k, v);
                            }
                        });

                        // add text
                        if (o.text) {
                            $(btn).append('<label class="uk-text" for="' + options.id + '_button_' + i + '">' + o.text + '</label>');
                        }

                        // add icon
                        if (o.icon) {
                            $(btn).prepend('<i class="uk-icon ' + o.icon + '" aria-hidden="true"></i>&nbsp;');
                        }

                        $(footer).append(btn);
                    });
                }

                // add footer
                $(modal).append(footer);

                // bind option events
                $(div).on('modal.open', function (ev) {
                    // focus input
                    $('input[autofocus], button[autofocus]', div).first().trigger('focus');
                    options.open.call(this, ev);
                }).on('modal.close', function (e, ev) {
                    options.beforeclose.call(this, ev);

                    $(this).off('modal.open modal.close keyup.modal').removeClass('uk-open');

                    $('body').off('keyup.modal');

                    window.setTimeout(function () {
                        $(div).hide().detach();
                    }, 500);

                    options.close.call(this, ev);
                });

                // create click handler
                $('.uk-modal-close', div).on('click', function (e) {
                    // cancel event
                    e.preventDefault();
                    e.stopImmediatePropagation();
                    // hide
                    $(div).trigger('modal.close', e);
                });

                $(div).on('keydown.modal', function (e) {
                    if (e.keyCode === 9) {

                        var $navItems = $(':input:visible', div).not('input[type="file"]').filter(function () {
                            return this.getAttribute('tabindex') >= 0;
                        });

                        if (!$navItems.length) {
                            return;
                        }

                        // reset all tabindex values
                        $navItems.attr('tabindex', 0);

                        if (e.shiftKey) {
                            $navItems.reverse();
                        }

                        var endIndex = Math.max(0, $navItems.length - 1), idx = $navItems.index(e.target) + 1;

                        if (idx > endIndex) {
                            idx = 0;
                        }

                        $navItems.eq(idx).trigger('focus').attr('tabindex', 1);

                        e.preventDefault();
                        e.stopImmediatePropagation();
                    }
                });

                // submit on enter
                $(div).on('keyup.modal', function (e) {
                    if (e.keyCode === 13) {
                        // cancel event
                        e.preventDefault();
                        e.stopPropagation();

                        // trigger focused button
                        if ($('button:focus', this).length) {
                            $(this).find('.uk-modal-dialog button:focus').triggerHandler("click");
                        } else {
                            // "click" submit button
                            $(this).find('.uk-modal-dialog button[type="submit"]').triggerHandler("click");
                        }

                        // close
                        if (options.close_on_submit !== false) {
                            $(this).trigger('modal.close');
                        }
                    }
                });

                // create modal
                $(div).appendTo(options.container);

                // show modal
                $(div).show().scrollTop(0);

                $(div).addClass('uk-open').trigger('modal.open').attr('aria-hidden', false);

                /*$(div).on('modal.assetloaded', function () {
                    $(modal).css('top', ($(div).height() - $(modal).outerHeight()) / 2);
                }).delay(10).trigger('modal.assetloaded');*/

                // return modal div element
                return div;
            },

            /**
             * Confirm Dialog
             */
            confirm: function (s, cb, options) {
                var html = '<p>' + s + '</p>';

                options = $.extend(true, {
                    'label': {
                        'confirm': Wf.translate('yes', 'Yes'),
                        'cancel': Wf.translate('no', 'No')
                    }
                }, options);

                options = $.extend(true, {
                    'classes': 'uk-modal-confirm',
                    buttons: [
                        {
                            text: options.label.cancel,
                            icon: 'uk-icon-close',
                            click: function (e) {
                                // execute callback
                                cb.call(this, false);
                            },
                            attributes: {
                                "class": "uk-modal-close"
                            }
                        },
                        {
                            text: options.label.confirm,
                            icon: 'uk-icon-check',
                            click: function (e) {
                                // execute callback
                                cb.call(this, true);
                            },
                            attributes: {
                                "type": "submit",
                                "class": "uk-button-primary uk-modal-close",
                                "autofocus": true
                            }
                        }
                    ]
                }, options || {});

                return this.open(Wf.translate('confirm', 'Confirm'), options, html);
            },
            /**
             * Alert Dialog
             */
            alert: function (s, options) {
                var html = '<p>' + s + '</p>';

                options = $.extend({ 'label': { 'confirm': Wf.translate('ok', 'Ok') } }, options);

                options = $.extend({
                    'classes': 'uk-modal-alert',
                    buttons: [{
                        text: options.label.confirm,
                        attributes: {
                            "type": "submit",
                            "class": "uk-modal-close",
                            "autofocus": true
                        }
                    }]
                }, options || {});

                return this.open(options.title || Wf.translate('alert', 'Alert'), options, html);
            },
            /**
             * Prompt Dialog
             */
            prompt: function (title, cb, options) {
                var html = '<div class="uk-form-row uk-grid">';

                options = $.extend(true, {
                    'id': 'dialog-prompt',
                    'value': '',
                    'text': '',
                    'multiline': false,
                    'elements': '',
                    'label': {
                        'confirm': Wf.translate('ok', 'OK'),
                        'cancel': Wf.translate('cancel', 'Cancel')
                    }
                }, options);

                if (options.input !== false) {
                    if (options.text) {
                        html += '<label class="uk-form-label uk-width-3-10" for="' + options.id + '">' + options.text + '</label><div class="uk-form-controls uk-width-7-10 uk-margin-remove">';
                    } else {
                        html += '<div class="uk-form-controls uk-width-1-1 uk-margin-remove">';
                    }

                    if (options.multiline) {
                        html += '<textarea id="' + options.id + '-input" required autofocus>' + options.value + '</textarea>';
                    } else {
                        html += '<input id="' + options.id + '-input" type="text" value="' + options.value + '" required autofocus aria-invalid="false" />';

                        /*if (options.validate) {
                            html += '<p class="uk-form-help-block uk-text-danger uk-margin" role="alert"></p>';
                        }*/
                    }
                }

                html += '</div>';
                html += '</div>';

                var onOpen = options.open || function () { };

                options = $.extend(true, options, {
                    'classes': 'uk-modal-prompt',
                    buttons: [
                        {
                            attributes: {
                                "type": "submit",
                                "class": "uk-button-primary",
                                "autofocus": true
                            },
                            text: options.label.confirm,
                            icon: 'uk-icon-check',
                            click: function () {
                                var args = [],
                                    $inp = $('#' + options.id + '-input'),
                                    v = $inp.val();

                                // check default prompt value
                                if (v === "") {
                                    $inp.trigger('focus');
                                    return false;
                                }

                                if (options.elements) {
                                    $(':input', '#' + options.id).not($inp).each(function () {
                                        args.push($(this).val());
                                    });
                                }

                                cb.call(this, v, args);

                                if (options.close_on_submit !== false) {
                                    $inp.parents('.uk-modal').trigger('modal.close');
                                }
                            }
                        }
                    ],
                    open: function () {
                        // call passed in open function
                        onOpen.call(this, { target: this });

                        var n = document.getElementById(options.id + '-input');

                        if (n) {
                            // set timeout to trigger after transition
                            setTimeout(function () {
                                // focus element
                                n.focus();

                                function findInputDifference(stringA, stringB) {
                                    function diff(a, b) {
                                        return a.filter(function (i) {
                                            return !(b.indexOf(i) > -1);
                                        });
                                    }

                                    var invalid = diff(stringA.split(''), stringB.split(''));

                                    return invalid.join('');
                                }

                                function validateInput(n) {
                                    var isValid = false, diff = '';

                                    if (!n.value) {
                                        return;
                                    }

                                    var value = options.validate(n.value);

                                    if (value) {
                                        diff = findInputDifference(n.value, value);

                                        // no difference found, input is valid
                                        if (!diff) {
                                            isValid = true;
                                        }
                                    }

                                    $(n).attr('aria-invalid', !isValid);

                                    /*$(n).toggleClass('uk-form-danger', !isValid).attr('aria-invalid', !isValid);

                                    $(n).next('[role="alert"]').text(function () {
                                        if (isValid) {
                                            return '';
                                        }

                                        return msg.replace('%s', diff ? ': ' + diff : '');
                                    });*/
                                }

                                if (options.validate) {
                                    $(n).on('change keyup', function (e) {
                                        validateInput(n);
                                    });

                                    validateInput(n);
                                }

                                // fix cursor position in Firefox
                                if (n.nodeName === "INPUT" && n.setSelectionRange && n.value) {
                                    n.setSelectionRange(n.value.length, n.value.length);
                                }
                            }, 350);
                        }
                    }

                });

                return this.open(title, options, html);
            },
            /**
             * Custom Dialog
             */
            custom: function (title, cb, options) {
                var html = '';
                
                options = $.extend(true, {
                    'id': 'dialog-custom',
                    'value': '',
                    'text': '',
                    'multiline': false,
                    'elements': '',
                    'label': {
                        'confirm': Wf.translate('ok', 'OK'),
                        'cancel': Wf.translate('cancel', 'Cancel')
                    }
                }, options);

                var onOpen = options.open || function () { };

                options = $.extend(true, options, {
                    'classes': 'uk-modal-prompt',
                    buttons: [
                        {
                            attributes: {
                                "type": "submit",
                                "class": "uk-button-primary",
                                "autofocus": true
                            },
                            text: options.label.confirm,
                            icon: 'uk-icon-check',
                            click: function () {
                                var args = [];

                                if (options.elements) {
                                    $(':input', '#' + options.id).each(function () {
                                        args.push($(this).val());
                                    });
                                }

                                cb.call(this, args);

                                if (options.close_on_submit !== false) {
                                    $(this).parents('.uk-modal').trigger('modal.close');
                                }
                            }
                        }
                    ],
                    open: function () {
                        // call passed in open function
                        onOpen.call(this, { target: this });

                        var n = document.getElementById(options.id + '-input');

                        if (n) {
                            // set timeout to trigger after transition
                            setTimeout(function () {
                                // focus element
                                n.focus();

                                function findInputDifference(stringA, stringB) {
                                    function diff(a, b) {
                                        return a.filter(function (i) {
                                            return !(b.indexOf(i) > -1);
                                        });
                                    }

                                    var invalid = diff(stringA.split(''), stringB.split(''));

                                    return invalid.join('');
                                }

                                function validateInput(n) {
                                    var isValid = false, diff = '';

                                    if (!n.value) {
                                        return;
                                    }

                                    var value = options.validate(n.value);

                                    if (value) {
                                        diff = findInputDifference(n.value, value);

                                        // no difference found, input is valid
                                        if (!diff) {
                                            isValid = true;
                                        }
                                    }

                                    $(n).attr('aria-invalid', !isValid);

                                    /*$(n).toggleClass('uk-form-danger', !isValid).attr('aria-invalid', !isValid);

                                    $(n).next('[role="alert"]').text(function () {
                                        if (isValid) {
                                            return '';
                                        }

                                        return msg.replace('%s', diff ? ': ' + diff : '');
                                    });*/
                                }

                                if (options.validate) {
                                    $(n).on('change keyup', function (e) {
                                        validateInput(n);
                                    });

                                    validateInput(n);
                                }

                                // fix cursor position in Firefox
                                if (n.nodeName === "INPUT" && n.setSelectionRange && n.value) {
                                    n.setSelectionRange(n.value.length, n.value.length);
                                }
                            }, 350);
                        }
                    }

                });

                return this.open(title, options, html);
            },
            /**
             * Upload Dialog
             */
            upload: function (options) {
                var div = $('<div id="upload-body" />').append(
                    '<div id="upload-queue-block" class="uk-placeholder uk-margin-bottom">' +
                    '   <div id="upload-queue"></div>' +
                    '   <input type="file" size="40" tabindex="-1" />' +
                    '</div>' +
                    '<div id="upload-options" class="uk-placeholder uk-placeholder-small"></div>'
                );

                // create backup function
                options.upload = options.upload || $.noop;

                options = $.extend({
                    'classes': 'uk-modal-dialog-full uk-modal-upload',
                    resizable: false,
                    buttons: [
                        {
                            text: Wf.translate('close', 'Close'),
                            icon: 'uk-icon-close',
                            attributes: {
                                "class": "uk-modal-close uk-hidden-small"
                            }
                        },
                        {
                            text: Wf.translate('browse', 'Add Files'),
                            icon: 'uk-icon-search',
                            attributes: {
                                "id": "upload-browse",
                                "class": "uk-button-success",
                                "autofocus": true
                            }
                        }, {
                            text: Wf.translate('upload', 'Upload'),
                            click: function (e) {
                                // cancel event
                                e.preventDefault();
                                // execute callback
                                return options.upload.call();
                            },
                            attributes: {
                                "id": "upload-start",
                                "class": "uk-button-primary"
                            },
                            icon: 'uk-icon-cloud-upload'
                        }
                    ]
                }, options);

                return this.open(Wf.translate('upload', 'Upload'), options, div);
            },
            /**
             * IFrame Dialog
             */
            iframe: function (name, url, options) {
                var div = document.createElement('div');

                function calculateWidth(n) {
                    var ph = $('.uk-modal-dialog', n).outerHeight(),
                        wh = $(n).height();

                    // content width
                    var cw = $('.uk-modal-body', n).width();

                    // content height
                    var ch = $('.uk-modal-body', n).height();

                    // calculate height of popup container without content
                    var mh = ph - $('.uk-modal-body', n).height();

                    // get popup height with content included
                    ph = mh + ch;

                    cw = Math.min(cw, Math.floor(cw * Math.min(wh / ph, 1)));

                    $('.uk-modal-dialog', n).css('max-width', cw - 20 + 'px');

                    return cw;
                }

                var w = options.width,
                    h = options.height;

                options = $.extend({
                    'classes': 'uk-modal-dialog-large uk-modal-preview',
                    open: function (e) {
                        var iframe = document.createElement('iframe');

                        $(div).addClass('loading');

                        $(iframe).attr({
                            'src': url,
                            'scrolling': 'auto',
                            'frameborder': 0
                        }).on('load', function () {
                            if ($.isFunction(options.onFrameLoad)) {
                                options.onFrameLoad.call(this);
                            }

                            $(div).removeClass('loading');
                        });

                        $(div).addClass('iframe-preview').append(iframe);

                        w = calculateWidth(e.target);

                        var ratio = parseFloat((h / w).toFixed(2));

                        if (ratio !== 0.56) {
                            var pct = Math.floor(h / w * 100);
                            $(div).css('padding-bottom', 'calc(' + pct + '% - 20px)');
                        }
                    }

                }, options);

                var name = name || Wf.translate('preview', 'Preview');

                return this.open(name, options, div);
            },
            /**
             * Media Dialog
             */
            media: function (name, url, options) {
                var options = options || {};

                var w = options.width, h = options.height;
                var div = document.createElement('div');

                delete options.width;
                delete options.height;

                $.extend(options, {
                    classes: 'uk-modal-dialog-large uk-modal-preview',
                    open: function (e) {
                        // image
                        if (/\.(jpg|jpeg|gif|png|apng|svg|webp)/i.test(url)) {
                            $(div).addClass('image-preview loading');

                            var img = new Image(),
                                loaded = false;

                            img.onload = function () {
                                if (loaded) {
                                    return false;
                                }

                                w = w || img.width, h = h || img.height;

                                $('.image-preview').removeClass('loading').append('<img src="' + url + '" alt="' + Wf.String.basename(url) + '" />').parent().css('max-width', w + 'px');

                                loaded = true;

                                calculateWidth(e.target, w, h);

                                $('.image-preview').on('click', function (e) {
                                    $(e.target).trigger('modal.close', e);
                                });

                                window.setTimeout(function () {
                                    $('.uk-modal').trigger('modal.assetloaded');
                                }, 0);
                            };

                            // add timestamp to bypass cache 
                            if (!/\?/.test(url)) {
                                url += '?' + new Date().getTime();
                            }

                            img.src = url;

                        } else if (/\.pdf$/i.test(url)) {
                            $(div).addClass('media-preview loading');

                            if ($.support.pdf) {
                                $(div).html('<object data="' + url + '" type="application/pdf"></object>').removeClass('big-loader');
                            } else {
                                $(div).html('<iframe src="' + url + '" frameborder="0"></iframe>').removeClass('big-loader');
                            }

                            $('iframe, object', div).on('load', function () {
                                calculateWidth(e.target, w, h);
                                $('.uk-modal').trigger('modal.assetloaded');
                            });
                        } else {
                            $(div).addClass('media-preview loading');

                            var mediaTypes = {
                                // Type, clsid, mime types,
                                // codebase
                                "flash": {
                                    classid: "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000",
                                    type: "application/x-shockwave-flash",
                                    codebase: "http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"
                                },
                                "shockwave": {
                                    classid: "clsid:166b1bca-3f9c-11cf-8075-444553540000",
                                    type: "application/x-director",
                                    codebase: "http://download.macromedia.com/pub/shockwave/cabs/director/sw.cab#version=8,5,1,0"
                                },
                                "windowsmedia": {
                                    classid: "clsid:6bf52a52-394a-11d3-b153-00c04f79faa6",
                                    type: "application/x-mplayer2",
                                    codebase: "http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=5,1,52,701"
                                },
                                "quicktime": {
                                    classid: "clsid:02bf25d5-8c17-4b23-bc80-d3488abddc6b",
                                    type: "video/quicktime",
                                    codebase: "http://www.apple.com/qtactivex/qtplugin.cab#version=6,0,2,0"
                                },
                                "divx": {
                                    classid: "clsid:67dabfbf-d0ab-41fa-9c46-cc0f21721616",
                                    type: "video/divx",
                                    codebase: "http://go.divx.com/plugin/DivXBrowserPlugin.cab"
                                },
                                "realmedia": {
                                    classid: "clsid:cfcdaa03-8be4-11cf-b84b-0020afbbccfa",
                                    type: "audio/x-pn-realaudio-plugin"
                                },
                                "java": {
                                    classid: "clsid:8ad9c840-044e-11d1-b3e9-00805f499d93",
                                    type: "application/x-java-applet",
                                    codebase: "http://java.sun.com/products/plugin/autodl/jinstall-1_5_0-windows-i586.cab#Version=1,5,0,0"
                                },
                                "silverlight": {
                                    classid: "clsid:dfeaf541-f3e1-4c24-acac-99c30715084a",
                                    type: "application/x-silverlight-2"
                                },
                                "video": {
                                    type: 'video/mp4'
                                },
                                "audio": {
                                    type: 'audio/mp3'
                                }
                            };

                            var mimes = {};

                            // Parses the default mime types
                            // string into a mimes lookup
                            // map
                            (function (data) {
                                var items = data.split(/,/),
                                    i, y, ext;

                                for (i = 0; i < items.length; i += 2) {
                                    ext = items[i + 1].split(/ /);

                                    for (y = 0; y < ext.length; y++) {
                                        mimes[ext[y]] = items[i];
                                    }
                                }
                            })("application/x-director,dcr," + "application/x-mplayer2,wmv wma avi," + "video/divx,divx," + "application/x-shockwave-flash,swf swfl," + "audio/mpeg,mpga mpega mp2 mp3," + "audio/ogg,ogg spx oga," + "audio/x-wav,wav," + "video/mpeg,mpeg mpg mpe," + "video/mp4,mp4 m4v," + "video/ogg,ogg ogv," + "video/webm,webm," + "video/quicktime,qt mov," + "video/x-flv,flv," + "video/vnd.rn-realvideo,rv," + "video/3gpp,3gp," + "video/x-matroska,mkv");

                            var ext = Wf.String.getExt(url);
                            ext = ext.toLowerCase();
                            var mt = mimes[ext];
                            var type, props;

                            $.each(
                                mediaTypes,
                                function (k, v) {
                                    if (v.type && v.type == mt) {
                                        type = k;
                                        props = v;
                                    }
                                });

                            // video types
                            if (/^(mp4|m4v|og(g|v)|webm|flv|f4v)$/i.test(ext)) {
                                type = 'video';
                                props = {
                                    type: mt
                                };
                            }

                            // audio types
                            if (/^(mp3|oga)$/i.test(ext)) {
                                type = 'audio';
                                props = {
                                    type: mt
                                };
                            }

                            if (type && props) {
                                switch (type) {
                                    case 'audio':
                                    case 'video':
                                        if (type == 'video') {
                                            $(div).append('<video autoplay="autoplay" controls="controls" preload="none" type="' + props.type + '" src="' + url + '"></video>');
                                        } else {
                                            $(div).addClass('media-preview-audio').append('<audio autoplay="autoplay" controls="controls" preload="none" type="' + props.type + '" src="' + url + '"></audio>');
                                        }

                                        break;
                                    case 'flash':
                                        $(div).append('<object type="' + props.type + '" data="' + url + '"><param name="movie" value="' + url + '" /></object>');
                                        break;
                                    default:
                                        $(div).append('<object classid="' + props.classid + '"><param name="src" value="' + url + '" /><embed src="' + url + '" type="' + props.type + '"></embed></object>');
                                        break;
                                }

                                $('iframe, object, embed, video, audio', div).on('load loadedmetadata', function () {
                                    $(div).removeClass('loading');

                                    calculateWidth(e.target, w, h);

                                    $('.uk-modal').trigger('modal.assetloaded');
                                }).on('error', function () {
                                    $(div).removeClass('loading');
                                });
                            }
                        }

                        calculateWidth(e.target, w, h);
                    }
                });

                return this.open(name, options, div);
            }
        };
    })(jQuery, Wf);

    /* global Wf, jQuery, tinyMCEPopup*/

    (function ($) {


        $.extend(Wf, {
            /**
             * Get common attribute types
             * @param e Element
             * @param at Attribute name
             * @returns {String|Integer}
             */
            getAttrib: function (e, at) {
                var ed = tinyMCEPopup.editor,
                    v;

                switch (at) {
                    case 'width':
                    case 'height':
                        v = ed.dom.getAttrib(e, at) || e.style[at] || '';

                        if (v.indexOf('px') !== -1) {
                            v = parseInt(v, 10);
                        }

                        break;
                    case 'align':
                        if ((v = ed.dom.getAttrib(e, 'align'))) {
                            return v;
                        }

                        if ((v = ed.dom.getStyle(e, 'float'))) {
                            return v;
                        }

                        if ((v = ed.dom.getStyle(e, 'vertical-align'))) {
                            return v;
                        }

                        if (e.style.display === "block" && ed.dom.getStyle(e, 'margin-left') === "auto" && ed.dom.getStyle(e, 'margin-right') === "auto") {
                            return 'center';
                        }
                        break;
                    case 'margin-top':
                    case 'margin-bottom':
                        if ((v = ed.dom.getStyle(e, at))) {
                            if (/auto|inherit/.test(v)) {
                                return v;
                            }

                            if (!/[a-z%]/i.test(v) || v.indexOf('px') !== -1) {
                                return parseInt(v, 10);
                            }

                            return v;
                        }

                        if ((v = ed.dom.getAttrib(e, 'vspace'))) {
                            return parseInt(v.replace(/[^-0-9]/g, ''), 10);
                        }
                        break;
                    case 'margin-left':
                    case 'margin-right':
                        if ((v = ed.dom.getStyle(e, at))) {
                            if (/auto|inherit/.test(v)) {
                                return v;
                            }

                            if (!/[a-z%]/i.test(v) || v.indexOf('px') !== -1) {
                                return parseInt(v, 10);
                            }

                            return v;
                        }

                        if ((v = ed.dom.getAttrib(e, 'hspace'))) {
                            return parseInt(v.replace(/[^-0-9]/g, ''), 10);
                        }
                        break;
                    case 'border-width':
                    case 'border-style':
                    case 'border-color':
                        v = '';
                        tinymce.each(['top', 'right', 'bottom', 'left'], function (n) {
                            var s = at.replace(/-/, '-' + n + '-');
                            var sv = ed.dom.getStyle(e, s);
                            // False or not the same as prev
                            if (sv !== '' || (sv != v && v !== '')) {
                                v = '';
                            }
                            if (sv) {
                                v = sv;
                            }
                        });

                        // check if we have a value
                        if (v !== '') {
                            $('#border').prop('checked', true);
                        }

                        // set blank value as inherit
                        if ((at == 'border-width' || at == 'border-style') && v === '') {
                            v = 'inherit';
                        }

                        if (at == 'border-color') {
                            v = Wf.String.toHex(v);
                        }

                        if (at == 'border-width') {
                            if (/[0-9][a-z]/.test(v)) {
                                v = parseFloat(v);
                            }
                        }

                        break;
                }

                return v;
            },

            /**
             * Set Margin values for various plugins
             * @param e Init state
             */
            setMargins: function () { },
            /**
             * Set border input options for various plugins
             */
            setBorder: function () { },

            /**
             * Generic function to set dimensions
             */
            setDimensions: function () { },
            /**
             * Set / update styles on a sample image, eg: <img src="image.jpg" id="sample" />
             */
            setStyles: function () {
                var ed = tinyMCEPopup.editor,
                    $img = $('#sample');

                if (!$img.length) {
                    return;
                }

                // apply styles to image
                $img.attr('style', $('#style').val());

                // Margin
                $.each(['top', 'right', 'bottom', 'left'], function (i, k) {
                    // need to use tinymce DOMUilts for this because jQuery returns 0px for blank values
                    var v = ed.dom.getStyle($img.get(0), 'margin-' + k);

                    if (v && v.indexOf('px') != -1) {
                        v = parseInt(v, 10);
                    }

                    $('#margin_' + k).val(v);
                });

                this.setMargins(true);

                var border = false;

                // Handle border
                $.each(['width', 'color', 'style'], function (i, k) {
                    // need to use tinymce DOMUilts for this because jQuery returns odd results for blank values
                    var v = ed.dom.getStyle($img.get(0), 'border-' + k);

                    if (v == '') {
                        $.each(['top', 'right', 'bottom', 'left'], function (i, n) {
                            // need to use tinymce DOMUilts for this because jQuery returns odd results for blank values
                            var sv = ed.dom.getStyle($img.get(0), 'border-' + n + '-' + k);

                            // False or not the same as prev
                            if (sv !== '' || (sv != v && v !== '')) {
                                v = '';
                            }
                            if (sv) {
                                v = sv;
                            }
                        });
                    }

                    if (v !== '') {
                        border = true;
                    }

                    if (k == 'width') {
                        v = /[0-9][a-z]/.test(v) ? parseInt(v, 10) : v;
                    }

                    if (k == 'color' && v) {
                        v = Wf.String.toHex(v);

                        if (v.charAt(0) === "#") {
                            v = v.substr(1);
                        }
                    }

                    if (border) {
                        $('#border_' + k).val(v);

                        $('#border~:input, #border~span, #border~label').attr('disabled', false).toggleClass('uk-text-muted', false);

                        // update pick
                        if (k == 'color') {
                            $('#border_' + k).trigger('pick');
                        }

                        $('#border').prop('checked', true).trigger('change');
                    }
                });

                // Align
                $('#align').val(function () {
                    var v = $img.css("float") || $img.css("vertical-align");

                    if (v) {
                        return v;
                    }

                    if ($img.css('margin-left') === "auto" && $img.css('margin-right') === "auto" && $img.css('display') === "block") {
                        return "center";
                    }

                    return "";
                });
            },
            /**
             * Update styles field with style values from a sample image
             */
            updateStyles: function () {
                var ed = tinyMCEPopup.editor, v, img = new Image(), preview = $('#sample'), k;

                $(img).attr('style', $('#style').val());
                $(img).add(preview).attr('dir', $('#dir').val());

                // Handle align
                $(img).add(preview).css('float', '');

                v = $('#align').val();

                if (v == 'center') {
                    $(img).add(preview).css({ 'display': 'block', 'margin-left': 'auto', 'margin-right': 'auto' });

                    // remove float and vertical-align
                    $(img).add(preview).css({ 'float': '', 'vertical-align': '' });

                    $('#clear').attr('disabled', true).trigger('datalist:disabled', true);

                    $('#margin_left, #margin_right').val('auto');
                } else {
                    if (/(top|middle|bottom)/.test(v)) {
                        $(img).add(preview).css("vertical-align", v);
                    }

                    // remove float etc.
                    $(img).add(preview).css('float', v).css('display', function () {
                        if (this.style.display === "block" && this.style.marginLeft === "auto" && this.style.marginRight === "auto") {
                            return "";
                        }

                        return this.style.display;
                    });

                    $('#margin_left, #margin_right').val(function () {
                        if (this.value === "auto") {
                            return "";
                        }

                        return this.value;
                    });

                    // equal values
                    if ($('#margin_check').is(':checked')) {
                        $('#margin_top').siblings('input[type="text"]').val($('#margin_top').val());
                    }

                    $('#clear').attr('disabled', !v).trigger('datalist:disabled', !v);
                }

                // Handle clear
                v = $('#clear:enabled').val();

                if (v) {
                    if (!$('#sample-br').get(0)) {
                        $(img).add(preview).after('<br id="sample-br" />');
                    }
                    $('#sample-br').css('clear', v);
                } else {
                    $('#sample-br').remove();
                }

                // Handle border
                $.each(['width', 'color', 'style'], function (i, k) {
                    if ($('#border').is(':checked')) {
                        v = $('#border_' + k).val();
                    } else {
                        v = '';
                    }

                    if (v == 'inherit') {
                        v = '';
                    }

                    // add pixel to width
                    if (k == 'width' && /[^a-z]/i.test(v)) {
                        v += 'px';
                    }

                    if (k == 'color' && v.charAt(0) !== "#") {
                        v = '#' + v;
                    }

                    $(img).add(preview).css('border-' + k, v);
                });

                // Margin
                $.each(['top', 'right', 'bottom', 'left'], function (i, k) {
                    v = $('#margin_' + k).val();

                    if (v && !/[a-z%]/i.test(v)) {
                        v = v + 'px';
                    }

                    $(img).add(preview).css('margin-' + k, v);
                });

                var styles = ed.dom.parseStyle($(img).attr('style'));

                function compressBorder(n) {
                    var s = [];

                    $.each(n, function (i, k) {
                        k = 'border-' + k, v = styles[k];

                        if (v == 'none') {
                            delete styles[k];
                            return;
                        }

                        if (v) {
                            s.push(styles[k]);
                            delete styles[k];
                        }
                    });

                    if (s.length) {
                        styles.border = s.join(' ');
                    }
                }

                // compress border
                compressBorder(['width', 'style', 'color', 'image']);

                // remove -moz and -webkit styles
                for (k in styles) {
                    if (k.indexOf('-moz-') >= 0 || k.indexOf('-webkit-') >= 0) {
                        delete styles[k];
                    }
                }

                // Merge
                $('#style').val(ed.dom.serializeStyle(styles));
            },
            setDefaults: function (s) {
                var n, v;

                var x = 0;

                for (n in s) {
                    if (!n) {
                        continue;
                    }

                    v = s[n];

                    if (n === "direction") {
                        n = "dir";
                    }

                    if (v === "default") {
                        v = '';
                    }

                    var $elm = $('#' + n);

                    if ($elm.length) {
                        if ($elm.is(':checkbox')) {
                            $('#' + n).prop('checked', parseFloat(v)); //.trigger('change');
                        } else {
                            $('#' + n).val(v); //.trigger('change');

                            // update colour
                            if (typeof v === "string" && v.charAt(0) === "#") {
                                $('#' + n).trigger('change');
                            }
                        }
                    } else {
                        var $repeatable = $('.uk-repeatable', '#custom_attributes');

                        if (x > 0) {
                            $repeatable.eq(0).clone(true).appendTo($repeatable.parent());
                        }

                        var $elements = $repeatable.eq(x).find('input, select');

                        $elements.eq(0).val(n);
                        $elements.eq(1).val(v);

                        x++;
                    }
                }
            }
        });
    })(jQuery);

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /*
     * Depends: jquery.ui.core.js jquery.ui.widget.js
     */

    /* global Wf, jQuery */

    (function ($, Wf) {

        var Tree = function (element, options) {
            this.element = element;

            this.options = $.extend({
                collapseTree: false,
                charLength: false
            }, options);

            this._init();
        };

        // list of events to stop scoll animation on
        var scrollEvents = 'click.scroll mousedown.scroll wheel.scroll mousewheel.scroll keyup.scroll touchmove.scroll';

        Tree.prototype = {
            /**
             * Shortcut function for event triggering
             * @param {string} ev Event name
             * @param {Mixed} args Arguments
             * @returns {void}
             */
            _trigger: function (ev, args) {
                $(this.element).trigger('tree:' + ev, args);
            },
            _init: function () {
                var self = this;

                if (!this.element) {
                    return;
                }

                this._trigger('init', function () {
                    self.nodeEvents();
                });

                // cancel scrolling animation
                $(this.element).on(scrollEvents, function () {
                    $(this).stop();
                });
            },
            /**
             * Add events to nodes
             * @param {objec} parent object
             * @returns {void}
             */
            nodeEvents: function (parent) {
                var self = this;

                if (!parent) {
                    parent = this.element;
                }

                // Add ARIA role and tabindex to root and ARIA level to children
                $('ul:first', parent).attr({
                    'role': 'tree'
                }).addClass('uk-tree').children('li').attr('aria-level', 1);

                $('.uk-tree', parent).on('click', function (e) {
                    var n = e.target,
                        p = $(n).parents('li').get(0);

                    e.preventDefault();
                    e.stopPropagation();

                    if ($(n).hasClass('uk-icon')) {
                        n = n.parentNode;
                    }

                    if ($(n).hasClass('uk-tree-toggle')) {
                        self.toggleNode(e, p);
                    } else {
                        self._trigger('nodeclick', [e, p]);
                    }

                    // remove all active classes from other tree nodes
                    $(self.element).find('.uk-tree-active').removeClass('uk-tree-active');

                    // add active class to tree node
                    $(p).addClass('uk-tree-active');
                });

                // Add ARIA role and tabindex to tree items
                $('li', parent).attr({
                    'role': 'treeitem'
                }).attr('aria-expanded', function () {
                    return $(this).hasClass('uk-tree-open') ? true : false;
                }).attr('aria-level', function (i, v) {
                    if (!v) {
                        return parseFloat($(this.parentNode.parentNode).attr('aria-level')) + 1;
                    }
                });

                // add toggle icons
                $('li', parent).find('.uk-tree-row').attr('role', 'presentation').prepend('<span class="uk-tree-toggle" role="presentation"><i class="uk-icon uk-icon-caret-right"></i><i class="uk-icon uk-icon-caret-down"></i></span>');

                // add icons
                $('li', parent).not('.uk-tree-root').find('.uk-tree-icon').attr('role', 'presentation').append('<i class="uk-icon uk-icon-folder"></i><i class="uk-icon uk-icon-folder-open"></i>');
            },
            /**
             * Does a parent (ul) have childnodes
             *
             * @param {String}
             *            The parent
             * @return {Boolean}.
             */
            _hasNodes: function (parent) {
                if ($.type(parent) == 'string') {
                    parent = this._findParent(parent);
                }
                var c = $('li', parent);
                return c.length > 1 || (c.length == 1 && !$(c).is(':empty'));
            },
            /**
             * Does the node exist?
             *
             * @param {String}
             *            The node title
             * @param {String
             *            or Element} The parent node
             * @return {Boolean}.
             */
            _isNode: function (id, parent) {
                var n = this._findNode(id, parent);

                return n.length ? true : false;
            },
            /**
             * Does a parent have subnodes?
             *
             * @param {String
             *            or Element} The parent node
             * @return {Boolean}.
             */
            _getNode: function (parent) {
                if ($.type(parent) === "string") {
                    parent = this._findParent(parent);
                }

                return $('.uk-tree-node', parent);
            },
            /**
             * Reset all nodes. Set to closed
             */
            _resetNodes: function () {
                $('li', this.element).removeClass('uk-tree-open');
            },
            /**
             * Rename a node
             *
             * @param {String}
             *            The node title
             * @param {String}
             *            The new title
             */
            renameNode: function (id, name) {
                var parent = Wf.String.dirname(id);

                var node = this._findNode(id, parent);

                // Rename the node
                $(node).attr('data-id', name);

                // Rename the span
                $('a:first .uk-tree-text', node).text(Wf.String.basename(name));

                // Rename each of the child nodes
                $('li[data-id^="' + this._escape(encodeURI(id)) + '"]', node).each(function (n) {
                    var nt = $(n).attr('data-id');
                    $(n).attr('data-id', nt.replace(id, name));
                });

            },
            /**
             * Remove a node
             *
             * @param {String}
             * The node title
             */
            removeNode: function (id) {
                var parent = Wf.String.dirname(id);

                var node = this._findNode(id, parent);

                var ul = $(node).parent('ul');

                // Remove the node
                $(node).remove();

                // Remove it if it is now empty
                if (ul && !this._hasNodes(ul)) {
                    $(ul).remove();
                }
            },

            sortNodes: function (parent) {
                var p = $(parent).parent();

                // detach parent
                parent = $(parent).detach();

                // create the list to sort
                var list = $('li', parent).map(function () {
                    var v = $('.uk-tree-text', this).attr('title');

                    return {
                        value: v,
                        element: this
                    };
                }).get();

                // sort list
                list.sort(function (a, b) {
                    var valueA = a.value || '';
                    var valueB = b.value || '';

                    return valueA.localeCompare(valueB);
                });

                $.each(list, function (i, item) {
                    $(parent).append(item.element);
                });

                $(p).append(parent);
            },

            /**
             * Create a node
             *
             * @param {Stringor Element} The parent node
             * @return {Array} An array of nodes to create.
             */
            createNode: function (nodes, parent, sortNodes) {
                var self = this;

                // no nodes to create!
                if (!nodes.length) {
                    return;
                }

                // If parent is not an element, find the parent element
                if (!parent) {
                    parent = Wf.String.dirname($(nodes[0]).attr('data-id') || $(nodes[0]).attr('id'));
                }

                if ($.type(parent) == 'string') {
                    parent = this._findParent(parent);
                }

                // filter nodes that already exist
                nodes = $.grep(nodes, function (node) {
                    return self._findNode(node.id, parent).length === 0;
                });

                // remove active states
                $(this.element).find('.uk-tree-active').removeClass('uk-tree-active');

                /*
                 * Create the nodes from the array <li><div class="tree-row"><div
                 * class="tree-image"></div><span><a>node</a></span><div></li>
                 */
                if (nodes && nodes.length) {
                    // Get parent ul
                    var ul = $('.uk-tree-node:first', parent) || null;

                    // Create it if it doesn't exist
                    if (!ul.length) {
                        ul = document.createElement('ul');
                        $(ul).attr({
                            'role': 'group'
                        }).addClass('uk-tree-node').append('<li role="treeitem" aria-expanded="false"></li>');

                        $(parent).append(ul);
                    }

                    // Iterate through nodes array
                    $.each(nodes, function (i, node) {
                        if (!self._isNode(node.id, parent)) {
                            // title and link html
                            var title = node.name || node.id;

                            // decode name value from title
                            var name = Wf.String.decode(title);

                            // encode title
                            title = Wf.String.encode(title);

                            var url = node.url || '#';

                            if (!node['class']) {
                                node['class'] = 'folder';
                            }

                            // create the node html
                            var html = '<li data-id="' + self._escape(encodeURI(node.id)) + '" class="' + node['class'] + '" role="treeitem" aria-level="' + parseFloat($(parent).attr('aria-level')) + 1 + '" aria-label="' + title + '">';

                            html += '<div class="uk-tree-row">';

                            if (node['class'].indexOf('folder') >= 0) {
                                html += '<span class="uk-tree-toggle" role="presentation">' + ' <i class="uk-icon uk-icon-caret-right"></i>' + ' <i class="uk-icon uk-icon-caret-down"></i>' + '</span>';
                            }

                            html += '<a href="' + url + '" title="' + title + '"><span class="uk-tree-icon">';

                            if (node['class'].indexOf('folder') >= 0) {
                                html += '<i role="presentation" class="uk-icon uk-icon-folder"></i><i role="presentation" class="uk-icon uk-icon-folder-open"></i>';
                            } else {
                                html += '<i role="presentation" class="uk-icon uk-icon-file-text"></i>';
                            }

                            html += '</span>';

                            html += '<span class="uk-tree-text uk-margin-small-left uk-text-truncate" title="' + title + '">' + name + '</span>';
                            html += '</a></div>';
                            html += '</li>';

                            $(ul).append(html);

                            self.toggleNodeState(parent, 1);
                            self._trigger('nodecreate');
                        } else {
                            // Node exists, set as open
                            self.toggleNodeState(parent, 1);
                        }
                    });

                    // sort list nodes
                    if (sortNodes !== false && $(ul).children().length > 1) {
                        self.sortNodes(ul);
                    }

                } else {
                    // No new nodes, set as open
                    this.toggleNodeState(parent, 1);
                }
            },
            /**
             * Find the parent node
             *
             * @param {String}
             *            The child node id
             * @return {Element} The parent node.
             */
            _findParent: function (el) {
                if ($.type(el) === "string") {
                    return $('li[data-id="' + this._encode(el) + '"]:first', this.element);
                } else {
                    return $(el).parents('li:first');
                }
            },
            /**
             * Find a node by id
             *
             * @param {String}
             *            The child node title
             * @param {String /
             *            Element} The parent node
             * @return {Element} The node.
             */
            _findNode: function (id, parent) {
                if (!parent || parent === "/") {
                    parent = this.element;
                }

                if ($.type(parent) === "string") {
                    parent = this._findParent(parent);
                }

                // remove leading or trailing slash
                id = id.replace(/^\/|\/$/, '');

                return $(parent).find('li[data-id="' + this._escape(this._encode(id)) + '"]:first');
            },
            /**
             * Toggle the loader class on the node span element
             *
             * @param {Element}
             *            The target node
             */
            toggleLoader: function (node) {
                $(node).toggleClass('uk-tree-loading');
            },
            /**
             * Collapse all tree nodes except one excluded
             *
             * @param {Element}
             *            The excluded node
             */
            _collapseNodes: function (ex) {
                var self = this;

                if (!ex) {
                    this._resetNodes();
                }

                var parent = $(ex).parent();

                $('li', parent).each(function (i, el) {
                    if (el !== ex && $(el).parent() !== parent) {
                        self.toggleNodeState(el, 0);

                        var child = self._getNode(el);
                        // hide if found
                        $(child).addClass('uk-tree-hide');
                    }
                });
            },
            /**
             * Toggle a node's state, open or closed
             *
             * @param {Element}
             * The node
             */
            toggleNodeState: function (node, state) {
                if (state) {
                    $(node).addClass('uk-tree-open').attr('aria-expanded', true);
                } else {
                    $(node).removeClass('uk-tree-open').attr('aria-expanded', false);
                }

                if (state) {
                    if ($(node).hasClass('uk-tree-root')) {
                        return;
                    }

                    var c = $('.uk-tree-node', node);

                    if ($(node).hasClass('uk-tree-open')) {
                        $(c).removeClass('uk-tree-hide');
                    } else {
                        $(c).addClass('uk-tree-hide');
                    }
                }
            },
            /**
             * Toggle a node
             *
             * @param {Element}
             *            The node
             */
            toggleNode: function (e, node) {
                // Force reload
                if (e.shiftKey) {
                    return this._trigger('nodeload', node);
                }

                var child = this._getNode(node);

                // No children load or close
                if (!child.length) {
                    if ($(node).hasClass('uk-tree-open')) {
                        this.toggleNodeState(node, 0);
                    } else {
                        this._trigger('nodeload', node);
                    }
                    // Hide children, toggle node
                } else {
                    $(child).toggleClass('uk-tree-hide');
                    this.toggleNodeState(node, !$(child).hasClass('uk-tree-hide'));
                }

                // Collpase the all other tree nodes
                if (this.options.collapseTree) {
                    this._collapseNodes(node);
                }
            },
            refreshNode: function (node) {
                var parent = this._findParent(node);
                return this._trigger('nodeload', parent);
            },
            _encode: function (s) {
                // decode first in case already encoded
                try {
                    s = decodeURIComponent(s);
                } catch (e) {
                    // error
                }

                // encode but decode backspace
                return encodeURIComponent(s).replace(/%2F/gi, '\/');
            },
            /**
             * Private function Escape a string
             *
             * @param {String}
             *            The string
             * @return {String} The escaped string
             */
            _escape: function (s) {
                return s.replace(/'/g, '%27');
            },

            /**
             * Scroll to a node
             *
             * @param {String}
             *            The node id
             * @return void
             */
            scrollTo: function (id) {
                var el = this.element, node = this._findNode(id);

                if ($(node).length) {
                    var padding = parseInt($(node).css('padding-left'), 10) + parseInt($(this.element).css('padding-left'), 10);

                    var left = $(node).get(0).offsetLeft - padding;
                    var top = $(node).get(0).offsetTop - ($('.uk-tree-row', node).outerHeight() + 2);

                    // remove active states
                    $(el).find('.uk-tree-active').removeClass('uk-tree-active');

                    $(el).animate({
                        scrollLeft: Math.round(left)
                    }, 500).animate({
                        scrollTop: Math.round(top)
                    }, 1500, function () {
                        $(this).off(scrollEvents);
                    });

                    // mark as active
                    $(node).addClass('uk-tree-active');
                }
            }
        };

        // jQuery hook
        $.fn.tree = function (options) {
            var inst = new Tree(this, options);

            $(this).on('tree:createnode', function (e, node, parent, sortNodes) {
                if (typeof node === "string") {
                    node = [node];
                }

                inst.createNode(node, parent, sortNodes);
            });

            $(this).on('tree:removenode', function (e, node) {
                inst.removeNode(node);
            });

            $(this).on('tree:renamenode', function (e, node, name) {
                inst.renameNode(node, name);
            });

            $(this).on('tree:togglenode', function (e, ev, node) {
                inst.toggleNode(ev, node);
            });

            $(this).on('tree:togglenodestate', function (e, node, state) {
                inst.toggleNodeState(node, state);
            });

            $(this).on('tree:toggleloader', function (e, node) {
                inst.toggleLoader(node);
            });

            $(this).on('tree:refreshnode', function (e, node) {
                inst.refreshNode(node);
            });

            $(this).on('tree:scroll', function (e, id) {
                inst.scrollTo(id);
            });

            $(this).on('tree:init', function (e) {
                inst.nodeEvents();
            });

            return this;
        };
    })(jQuery, Wf);

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    var WFExtensions$1 = {
        types: {},
        add: function (n, o) {
            this[n] = o;

            return this[n];
        },
        /**
         * Add an extension type eg: popups
         * 
         * @param {Object}
         *            n extenions type key
         */
        addType: function (n) {
            this.types[n] = {};
        },
        /**
         * Add an extension
         * 
         * @param {String}
         *            n Extension type eg: popups
         * @param {Object}
         *            o Extension Object
         */
        addExtension: function (type, n, o) {
            if (typeof this.types[type] == 'undefined') {
                this.addType(type);
            }

            this.types[type][n] = o;
        },
        /**
         * Get an Extension Type Object
         * 
         * @param {String}
         *            type Extension type eg: popups
         */
        getType: function (type) {
            return this.types[type] || false;
        },
        /**
         * Get an Extension Object
         * 
         * @param {String}
         *            type Extension type eg: popups
         * @param {Object}
         *            ext Extension Object key eg: jcemediabox
         */
        getExtension: function (type, ext) {
            var s = this.getType(type);

            return s[ext];
        }
    };
    // expose WFExtensions
    window.WFExtensions = WFExtensions$1;

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */
    /* global WFExtensions */

    // eslint-disable-next-line no-unused-vars
    var WFAggregator = WFExtensions.add('Aggregator', {

        // array of aggregators
        aggregators: {},

        add: function (name, o) {
            this.aggregators[name] = o || {};
        },

        get: function (name) {
            return this.aggregators[name] || null;
        },

        setup: function (options) {
            var self = this;

            options = options || {};

            tinymce.each(this.aggregators, function (o, k) {
                self.setParams(o, options);

                return self._call(o, 'setup');
            });
        },

        getTitle: function (name) {
            var f = this.get(name);

            if (f) {
                return f.title;
            }

            return name;
        },

        getType: function (name) {
            var f = this.get(name);

            if (f) {
                return f.getType();
            }

            return '';
        },

        getValues: function (name, src) {
            var f = this.get(name);

            if (f) {
                return this._call(f, 'getValues', src);
            }
        },

        setValues: function (name, data) {
            var f = this.get(name);

            if (f) {
                return this._call(f, 'setValues', data);
            }
        },

        getAttributes: function (name, args) {
            var f = this.get(name);

            if (f) {
                return this._call(f, 'getAttributes', args);
            }
        },

        setAttributes: function (name, args, callback) {
            var f = this.get(name);

            if (f) {
                var data = this._call(f, 'setAttributes', args);

                if (typeof callback === "function") {
                    callback(data);
                }

                return data;
            }
        },

        /**
         * Check whether a media type is supported
         */
        isSupported: function (args) {
            var self = this, r, v;

            tinymce.each(this.aggregators, function (o) {
                if ((v = self._call(o, 'isSupported', args))) {
                    r = v;
                }
            });

            return r;
        },

        /**
         * Return an aggregator parameter value
         * @param {String} Parameter
         */
        getParam: function (name, param) {
            var f = this.get(name);

            if (f) {
                return f.params[param] || '';
            }

            return '';
        },

        /**
         * Set Aggregator Parameters
         * @param {Object} o Parameter Object
         */
        setParams: function (name, o) {
            var f = this.get(name);

            if (f) {
                tinymce.extend(f.params, o);
            }
        },

        onSelectFile: function (name) {
            var f = this.get(name);

            if (f) {
                return this._call(f, 'onSelectFile');
            }
        },

        onInsert: function (name) {
            var self = this, f = this.get(name);

            if (f) {
                return self._call(f, 'onInsert');
            }
        },

        _call: function (o, fn, vars) {
            var f = o[fn] || function () { };

            return f.call(o, vars);
        }
    });

    window.WFAggregator = WFAggregator;

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /* global WFExtensions, tinyMCEPopup, $ */

    // eslint-disable-next-line no-unused-vars
    var WFPopups = WFExtensions.add('Popups', {
        /**
         * Array of popup extension objects
         */
        popups: {},
        /**
         * Current Popup Extension object
         */
        popup: '',
        /**
         * Global Configuration object
         */
        config: {},
        /**
         * Add a popup extension
         * @param {String} n Extension name
         * @param {Object} o Extension object
         */
        addPopup: function (n, o) {
            this.popups[n] = o;

            WFExtensions.addExtension('popups', n, o);
        },
        /**
         * Get all popups
         */
        getPopups: function () {
            return this.popups;
        },
        setup: function (options) {
            var self = this,
                ed = tinyMCEPopup.editor,
                s = ed.selection,
                n;

            options = $.extend({
                remove: $.noop,
                change: $.noop
            }, options || {});

            // setup and trigger change
            $('#popup_list').on('change', function () {
                self.selectPopup(this.value);
                options.change(this.value);
            }).on('popup:remove', function (e, n) {
                options.remove(n);
            }).trigger('change');

            if (!s.isCollapsed()) {
                n = s.getNode();

                var state = true,
                    v;

                function setText(state, v) {
                    if (state && v) {
                        $('#popup_text').val(v);
                        $('#popup_text').attr('disabled', false);
                    } else {
                        $('#popup_text').val(tinyMCEPopup.getLang('dlg.element_selection', 'Element Selection'));
                        $('#popup_text').attr('disabled', true);
                        $('#popup_text').addClass('disabled');
                    }
                }

                v = s.getContent({
                    format: 'text'
                });

                if (n) {
                    var children = tinymce.grep(n.childNodes, function (node) {
                        return ed.dom.is(node, 'br[data-mce-bogus]') == false;
                    });

                    state = children.length == 1 && children[0].nodeType == 3;
                }

                // set text value and state
                setText(state, v);
            }

            $.each(this.popups, function (k, v) {
                self._call('setup', '', v);
            });

        },
        /**
         * Check if selected node is a Popup
         * @param {Object} n Node
         * @param {Object} v Popup type
         */
        isPopup: function (n, v) {
            return n && n.nodeName == 'A' && this._call('check', n, v);
        },
        /**
         * Get the assigned popup if any from the selected node
         * @param {Object} n Anchor Element / Node
         */
        getPopup: function (n, callback, index) {
            var self = this,
                ed = tinyMCEPopup.editor;

            if (n.nodeName != 'A') {
                n = ed.dom.getParent(n, 'a');
            }

            $.each(this.popups, function (k, v) {
                if (self.isPopup(n, k)) {
                    self.popup = k;
                }
            });

            if (n && this.popup) {
                // Select popup in list
                this.selectPopup(this.popup);

                // Process attributes
                return this.getAttributes(n, index, callback);
            }

            return '';
        },
        /**
         * Set the currently selected popup
         * @param {String} s popup name eg: jcemediabox
         */
        setPopup: function (s) {
            this.popup = s;
        },
        /**
         * Set Global Configuration
         * @param {Object} config Configuration object
         */
        setConfig: function (config) {
            $.extend(this.config, config);
        },
        /**
         * Set parameters for a popup type
         * @param {String} n Popup type
         * @param {Object} p Parameters object
         */
        setParams: function (n, p) {
            var popup = this.popups[n];

            if (popup) {
                if (typeof popup.params == 'undefined') {
                    popup.params = {};
                }
                $.extend(popup.params, p);
            }
        },
        /**
         * Get parameters for a popup type
         * @param {String} n Popup Type
         */
        getParams: function (n) {
            return this.popups[n].params || {};
        },
        /**
         * Get a specific popup type parameter
         * @param {String} n Popup type
         * @param {String} p Paremeter
         */
        getParam: function (n, p) {
            var params = this.getParams(n);
            return params[p] || null;
        },
        /**
         * Selects a popup from the popup list
         * @param {Object} s Select element
         */
        selectPopup: function (v) {
            var self = this;

            // set as selected popup
            self.popup = v;

            // select item
            $('#popup_list').val(v).children('option').each(function () {
                if (this.value) {
                    // hide all popups
                    $('#popup_extension_' + this.value).hide();
                }
            });

            if (v) {
                $('#popup_extension_' + v).show();
                // call onSelect function
                self._call('onSelect', [], v);
            }

        },
        /**
         * Set popup extension parameter values to current node
         * @param {Object} n Popup / Link node
         */
        setAttributes: function (n, args, index) {
            var ed = tinyMCEPopup.editor;

            // map values
            if (this.config.map) {
                $.each(this.config.map, function (to, from) {
                    var v = args[from] || $('#' + from).val();
                    ed.dom.setAttrib(n, to, v);

                    // remove initial value
                    delete args[from];
                });

            }

            return this._call('setAttributes', [n, args, index]);
        },
        /**
         * Apply currently selected popup attributes to link element
         * @param {Object} n Link element / node
         */
        getAttributes: function (n, callback, index) {
            var ed = tinyMCEPopup.editor, data;

            if (n || n.nodeName != 'A') {
                n = ed.dom.getParent(n, 'a');
            }

            // default callback function returns passed in value
            callback = callback || function (val) {
                return val;
            };

            // default index value
            index = index || 0;

            if (n && this.isPopup(n)) {
                data = this._call('getAttributes', [n, index, callback]);
            }

            return data;
        },
        /**
         * Check if popups are enabled (checkbox checked and popup type selected)
         */
        isEnabled: function () {
            return this.popup;
        },
        /**
         * Create a popup on a link element
         * @param {Object} n
         * @param {Object} args
         */
        createPopup: function (n, args, index) {
            var self = this,
                ed = tinyMCEPopup.editor;

            args = args || {};

            // Popup option is enabled
            if (this.isEnabled()) {
                if (n && (n.nodeName == 'A' || ed.dom.getParent(n, 'A'))) {
                    // get parent node
                    if (n.nodeName != 'A') {
                        n = ed.dom.getParent(n, 'A');
                    }

                    // remove all popups
                    this.removePopups(n, true);

                    // set popup attributes
                    this.setAttributes(n, args, index);
                } else {
                    var se = ed.selection;

                    // no selection
                    if (se.isCollapsed()) {
                        ed.execCommand('mceInsertContent', false, '<a href="#" id="__mce_tmp">' + $('#popup_text').val() + '</a>', {
                            skip_undo: 1
                        });
                        // create link on selection or update existing link
                    } else {
                        var n = n || se.getNode();

                        ed.execCommand('mceInsertLink', false, { 'href': '#', 'id': '__mce_tmp' }, {
                            skip_undo: 1
                        });

                        // restore styles
                        ed.dom.setAttrib(n, 'style', ed.dom.getAttrib(n, 'data-mce-style'));
                    }
                    // get new link
                    n = ed.dom.get('__mce_tmp');

                    if (n) {
                        // remove temp id
                        ed.dom.setAttrib(n, 'id', null);

                        // set attributes
                        self.setAttributes(n, args, index);
                    }
                }
            } else {
                n = ed.dom.getParent(n, 'A');

                $.each(this.popups, function (k, v) {
                    if (self.isPopup(n, k)) {
                        // remove all popups
                        self.removePopups(n);
                        return false;
                    }
                });
            }
        },
        /**
         * Remove all popups from the current link node
         */
        removePopups: function (n, no_event) {
            var self = this;

            $.each(this.popups, function (k, v) {
                self._call('remove', n, k);
            });

            if (!no_event) {
                $('#popup_list').trigger('popup:remove', n);
            }
        },
        /**
         * Function called when a file is selected
         * @param {Object} args Arguments object eg: {src : url, width : 640, height : 480}
         */
        onSelectFile: function (args) {
            this._call('onSelectFile', args);
        },
        /**
         * Call a popup function
         * @param {String} fn Function to call
         * @param {Array} args Array of arguments
         * @param {String} popup popup type to call function on
         */
        _call: function (fn, args, popup) {
            if (!popup) {
                popup = this.popup;
            }

            if (typeof popup == 'string') {
                popup = this.popups[popup] || {};
            }

            fn = popup[fn];

            if (typeof fn === "function") {
                if ($.type(args) === "array") {
                    return fn.apply(popup, args);
                } else {
                    return fn.call(popup, args);
                }
            }

            return false;
        }

    });

    window.WFPopups = WFPopups;

})();
