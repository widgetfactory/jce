(function () {
    'use strict';

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /*
     * Depends: jquery.ui.core.js jquery.ui.widget.js
     */

    /* global Wf, jQuery */

    (function ($, Wf) {

        var Tree = function (element, options) {
            this.element = element;

            this.options = $.extend({
                collapseTree: false,
                charLength: false
            }, options);

            this._init();
        };

        // list of events to stop scoll animation on
        var scrollEvents = 'click.scroll mousedown.scroll wheel.scroll mousewheel.scroll keyup.scroll touchmove.scroll';

        Tree.prototype = {
            /**
             * Shortcut function for event triggering
             * @param {string} ev Event name
             * @param {Mixed} args Arguments
             * @returns {void}
             */
            _trigger: function (ev, args) {
                $(this.element).trigger('tree:' + ev, args);
            },
            _init: function () {
                var self = this;

                if (!this.element) {
                    return;
                }

                this._trigger('init', function () {
                    self.nodeEvents();
                });

                // cancel scrolling animation
                $(this.element).on(scrollEvents, function () {
                    $(this).stop();
                });
            },
            /**
             * Add events to nodes
             * @param {objec} parent object
             * @returns {void}
             */
            nodeEvents: function (parent) {
                var self = this;

                if (!parent) {
                    parent = this.element;
                }

                // Add ARIA role and tabindex to root and ARIA level to children
                $('ul:first', parent).attr({
                    'role': 'tree'
                }).addClass('uk-tree').children('li').attr('aria-level', 1);

                $('.uk-tree', parent).on('click', function (e) {
                    var n = e.target,
                        p = $(n).parents('li').get(0);

                    e.preventDefault();
                    e.stopPropagation();

                    if ($(n).hasClass('uk-icon')) {
                        n = n.parentNode;
                    }

                    if ($(n).hasClass('uk-tree-toggle')) {
                        self.toggleNode(e, p);
                    } else {
                        self._trigger('nodeclick', [e, p]);
                    }

                    // remove all active classes from other tree nodes
                    $(self.element).find('.uk-tree-active').removeClass('uk-tree-active');

                    // add active class to tree node
                    $(p).addClass('uk-tree-active');
                });

                // Add ARIA role and tabindex to tree items
                $('li', parent).attr({
                    'role': 'treeitem'
                }).attr('aria-expanded', function () {
                    return $(this).hasClass('uk-tree-open') ? true : false;
                }).attr('aria-level', function (i, v) {
                    if (!v) {
                        return parseFloat($(this.parentNode.parentNode).attr('aria-level')) + 1;
                    }
                });

                // add toggle icons
                $('li', parent).find('.uk-tree-row').attr('role', 'presentation').prepend('<span class="uk-tree-toggle" role="presentation"><i class="uk-icon uk-icon-caret-right"></i><i class="uk-icon uk-icon-caret-down"></i></span>');

                // add icons
                $('li', parent).not('.uk-tree-root').find('.uk-tree-icon').attr('role', 'presentation').append('<i class="uk-icon uk-icon-folder"></i><i class="uk-icon uk-icon-folder-open"></i>');
            },
            /**
             * Does a parent (ul) have childnodes
             *
             * @param {String}
             *            The parent
             * @return {Boolean}.
             */
            _hasNodes: function (parent) {
                if ($.type(parent) == 'string') {
                    parent = this._findParent(parent);
                }
                var c = $('li', parent);
                return c.length > 1 || (c.length == 1 && !$(c).is(':empty'));
            },
            /**
             * Does the node exist?
             *
             * @param {String}
             *            The node title
             * @param {String
             *            or Element} The parent node
             * @return {Boolean}.
             */
            _isNode: function (id, parent) {
                var n = this._findNode(id, parent);

                return n.length ? true : false;
            },
            /**
             * Does a parent have subnodes?
             *
             * @param {String
             *            or Element} The parent node
             * @return {Boolean}.
             */
            _getNode: function (parent) {
                if ($.type(parent) === "string") {
                    parent = this._findParent(parent);
                }

                return $('.uk-tree-node', parent);
            },
            /**
             * Reset all nodes. Set to closed
             */
            _resetNodes: function () {
                $('li', this.element).removeClass('uk-tree-open');
            },
            /**
             * Rename a node
             *
             * @param {String}
             *            The node title
             * @param {String}
             *            The new title
             */
            renameNode: function (id, name) {
                var parent = Wf.String.dirname(id);

                var node = this._findNode(id, parent);

                // Rename the node
                $(node).attr('data-id', name);

                // Rename the span
                $('a:first .uk-tree-text', node).text(Wf.String.basename(name));

                // Rename each of the child nodes
                $('li[data-id^="' + this._escape(encodeURI(id)) + '"]', node).each(function (n) {
                    var nt = $(n).attr('data-id');
                    $(n).attr('data-id', nt.replace(id, name));
                });

            },
            /**
             * Remove a node
             *
             * @param {String}
             * The node title
             */
            removeNode: function (id) {
                var parent = Wf.String.dirname(id);

                var node = this._findNode(id, parent);

                var ul = $(node).parent('ul');

                // Remove the node
                $(node).remove();

                // Remove it if it is now empty
                if (ul && !this._hasNodes(ul)) {
                    $(ul).remove();
                }
            },

            sortNodes: function (parent) {
                var p = $(parent).parent();

                // detach parent
                parent = $(parent).detach();

                // create the list to sort
                var list = $('li', parent).map(function () {
                    var v = $('.uk-tree-text', this).attr('title');

                    return {
                        value: v,
                        element: this
                    };
                }).get();

                // sort list
                list.sort(function (a, b) {
                    var valueA = a.value || '';
                    var valueB = b.value || '';

                    return valueA.localeCompare(valueB);
                });

                $.each(list, function (i, item) {
                    $(parent).append(item.element);
                });

                $(p).append(parent);
            },

            /**
             * Create a node
             *
             * @param {Stringor Element} The parent node
             * @return {Array} An array of nodes to create.
             */
            createNode: function (nodes, parent, sortNodes) {
                var self = this;

                // no nodes to create!
                if (!nodes.length) {
                    return;
                }

                // If parent is not an element, find the parent element
                if (!parent) {
                    parent = Wf.String.dirname($(nodes[0]).attr('data-id') || $(nodes[0]).attr('id'));
                }

                if ($.type(parent) == 'string') {
                    parent = this._findParent(parent);
                }

                // filter nodes that already exist
                nodes = $.grep(nodes, function (node) {
                    return self._findNode(node.id, parent).length === 0;
                });

                // remove active states
                $(this.element).find('.uk-tree-active').removeClass('uk-tree-active');

                /*
                 * Create the nodes from the array <li><div class="tree-row"><div
                 * class="tree-image"></div><span><a>node</a></span><div></li>
                 */
                if (nodes && nodes.length) {
                    // Get parent ul
                    var ul = $('.uk-tree-node:first', parent) || null;

                    // Create it if it doesn't exist
                    if (!ul.length) {
                        ul = document.createElement('ul');
                        $(ul).attr({
                            'role': 'group'
                        }).addClass('uk-tree-node').append('<li role="treeitem" aria-expanded="false"></li>');

                        $(parent).append(ul);
                    }

                    // Iterate through nodes array
                    $.each(nodes, function (i, node) {
                        if (!self._isNode(node.id, parent)) {
                            // title and link html
                            var title = node.name || node.id;

                            // decode name value from title
                            var name = Wf.String.decode(title);

                            // encode title
                            title = Wf.String.encode(title);

                            var url = node.url || '#';

                            if (!node['class']) {
                                node['class'] = 'folder';
                            }

                            // create the node html
                            var html = '<li data-id="' + self._escape(encodeURI(node.id)) + '" class="' + node['class'] + '" role="treeitem" aria-level="' + parseFloat($(parent).attr('aria-level')) + 1 + '" aria-label="' + title + '">';

                            html += '<div class="uk-tree-row">';

                            if (node['class'].indexOf('folder') >= 0) {
                                html += '<span class="uk-tree-toggle" role="presentation">' + ' <i class="uk-icon uk-icon-caret-right"></i>' + ' <i class="uk-icon uk-icon-caret-down"></i>' + '</span>';
                            }

                            html += '<a href="' + url + '" title="' + title + '"><span class="uk-tree-icon">';

                            if (node['class'].indexOf('folder') >= 0) {
                                html += '<i role="presentation" class="uk-icon uk-icon-folder"></i><i role="presentation" class="uk-icon uk-icon-folder-open"></i>';
                            } else {
                                html += '<i role="presentation" class="uk-icon uk-icon-file-text"></i>';
                            }

                            html += '</span>';

                            html += '<span class="uk-tree-text uk-margin-small-left uk-text-truncate" title="' + title + '">' + name + '</span>';
                            html += '</a></div>';
                            html += '</li>';

                            $(ul).append(html);

                            self.toggleNodeState(parent, 1);
                            self._trigger('nodecreate');
                        } else {
                            // Node exists, set as open
                            self.toggleNodeState(parent, 1);
                        }
                    });

                    // sort list nodes
                    if (sortNodes !== false && $(ul).children().length > 1) {
                        self.sortNodes(ul);
                    }

                } else {
                    // No new nodes, set as open
                    this.toggleNodeState(parent, 1);
                }
            },
            /**
             * Find the parent node
             *
             * @param {String}
             *            The child node id
             * @return {Element} The parent node.
             */
            _findParent: function (el) {
                if ($.type(el) === "string") {
                    return $('li[data-id="' + this._encode(el) + '"]:first', this.element);
                } else {
                    return $(el).parents('li:first');
                }
            },
            /**
             * Find a node by id
             *
             * @param {String}
             *            The child node title
             * @param {String /
             *            Element} The parent node
             * @return {Element} The node.
             */
            _findNode: function (id, parent) {
                if (!parent || parent === "/") {
                    parent = this.element;
                }

                if ($.type(parent) === "string") {
                    parent = this._findParent(parent);
                }

                // remove leading or trailing slash
                id = id.replace(/^\/|\/$/, '');

                return $(parent).find('li[data-id="' + this._escape(this._encode(id)) + '"]:first');
            },
            /**
             * Toggle the loader class on the node span element
             *
             * @param {Element}
             *            The target node
             */
            toggleLoader: function (node) {
                $(node).toggleClass('uk-tree-loading');
            },
            /**
             * Collapse all tree nodes except one excluded
             *
             * @param {Element}
             *            The excluded node
             */
            _collapseNodes: function (ex) {
                var self = this;

                if (!ex) {
                    this._resetNodes();
                }

                var parent = $(ex).parent();

                $('li', parent).each(function (i, el) {
                    if (el !== ex && $(el).parent() !== parent) {
                        self.toggleNodeState(el, 0);

                        var child = self._getNode(el);
                        // hide if found
                        $(child).addClass('uk-tree-hide');
                    }
                });
            },
            /**
             * Toggle a node's state, open or closed
             *
             * @param {Element}
             * The node
             */
            toggleNodeState: function (node, state) {
                if (state) {
                    $(node).addClass('uk-tree-open').attr('aria-expanded', true);
                } else {
                    $(node).removeClass('uk-tree-open').attr('aria-expanded', false);
                }

                if (state) {
                    if ($(node).hasClass('uk-tree-root')) {
                        return;
                    }

                    var c = $('.uk-tree-node', node);

                    if ($(node).hasClass('uk-tree-open')) {
                        $(c).removeClass('uk-tree-hide');
                    } else {
                        $(c).addClass('uk-tree-hide');
                    }
                }
            },
            /**
             * Toggle a node
             *
             * @param {Element}
             *            The node
             */
            toggleNode: function (e, node) {
                // Force reload
                if (e.shiftKey) {
                    return this._trigger('nodeload', node);
                }

                var child = this._getNode(node);

                // No children load or close
                if (!child.length) {
                    if ($(node).hasClass('uk-tree-open')) {
                        this.toggleNodeState(node, 0);
                    } else {
                        this._trigger('nodeload', node);
                    }
                    // Hide children, toggle node
                } else {
                    $(child).toggleClass('uk-tree-hide');
                    this.toggleNodeState(node, !$(child).hasClass('uk-tree-hide'));
                }

                // Collpase the all other tree nodes
                if (this.options.collapseTree) {
                    this._collapseNodes(node);
                }
            },
            refreshNode: function (node) {
                var parent = this._findParent(node);
                return this._trigger('nodeload', parent);
            },
            _encode: function (s) {
                // decode first in case already encoded
                try {
                    s = decodeURIComponent(s);
                } catch (e) {
                    // error
                }

                // encode but decode backspace
                return encodeURIComponent(s).replace(/%2F/gi, '\/');
            },
            /**
             * Private function Escape a string
             *
             * @param {String}
             *            The string
             * @return {String} The escaped string
             */
            _escape: function (s) {
                return s.replace(/'/g, '%27');
            },

            /**
             * Scroll to a node
             *
             * @param {String}
             *            The node id
             * @return void
             */
            scrollTo: function (id) {
                var el = this.element, node = this._findNode(id);

                if ($(node).length) {
                    var padding = parseInt($(node).css('padding-left'), 10) + parseInt($(this.element).css('padding-left'), 10);

                    var left = $(node).get(0).offsetLeft - padding;
                    var top = $(node).get(0).offsetTop - ($('.uk-tree-row', node).outerHeight() + 2);

                    // remove active states
                    $(el).find('.uk-tree-active').removeClass('uk-tree-active');

                    $(el).animate({
                        scrollLeft: Math.round(left)
                    }, 500).animate({
                        scrollTop: Math.round(top)
                    }, 1500, function () {
                        $(this).off(scrollEvents);
                    });

                    // mark as active
                    $(node).addClass('uk-tree-active');
                }
            }
        };

        // jQuery hook
        $.fn.tree = function (options) {
            var inst = new Tree(this, options);

            $(this).on('tree:createnode', function (e, node, parent, sortNodes) {
                if (typeof node === "string") {
                    node = [node];
                }

                inst.createNode(node, parent, sortNodes);
            });

            $(this).on('tree:removenode', function (e, node) {
                inst.removeNode(node);
            });

            $(this).on('tree:renamenode', function (e, node, name) {
                inst.renameNode(node, name);
            });

            $(this).on('tree:togglenode', function (e, ev, node) {
                inst.toggleNode(ev, node);
            });

            $(this).on('tree:togglenodestate', function (e, node, state) {
                inst.toggleNodeState(node, state);
            });

            $(this).on('tree:toggleloader', function (e, node) {
                inst.toggleLoader(node);
            });

            $(this).on('tree:refreshnode', function (e, node) {
                inst.refreshNode(node);
            });

            $(this).on('tree:scroll', function (e, id) {
                inst.scrollTo(id);
            });

            $(this).on('tree:init', function (e) {
                inst.nodeEvents();
            });

            return this;
        };
    })(jQuery, Wf);

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /* global jQuery */

    (function ($, window, undef) {

        var counter = 0;

        var mime = {
            "jpeg": "image/jpeg",
            "jpg": "image/jpeg",
            "png": "image/png",
            "gif": "image/gif",
            "tif": "image/tiff",
            "tiff": "image/tiff",
            "webp": "image/webp"
        };

        /**
         Generates an unique ID.
         @method uid
         @return {String} Virtually unique id.
         */
        function uid() {
            var guid = new Date().getTime().toString(32),
                i;

            for (i = 0; i < 5; i++) {
                guid += Math.floor(Math.random() * 65535).toString(32);
            }

            return 'wf_' + guid + (counter++).toString(32);
        }

        // cancel Events
        function cancel(e) {
            e.preventDefault();
            e.stopImmediatePropagation();
        }

        function Transport(options) {
            this.options = $.extend({
                callback: $.noop,
                headers: {},
                multipart: {},
                data_name: 'file'
            }, options);
        }

        Transport.prototype = {
            upload: function (file) {
                // store current file
                this.file = file;

                this.transport = new XMLHttpRequest;
                // upload using xhr2
                this.xhr();
            },
            error: function (status, text) {
                var callback = this.options.callback;

                var error = {
                    message: text || 'The server returned an invalid JSON response.',
                    file: this.file,
                    code: status || 500
                };

                callback('error', error);
            },
            response: function (data) {
                var callback = this.options.callback;

                if (data) {
                    var r;
                    // parse JSON data if valid
                    try {
                        r = $.parseJSON(data);
                    } catch (e) {
                        // malformed JSON
                        if (data.indexOf('{') !== -1) {
                            data = 'The server returned an invalid JSON response.';
                        }

                        this.error(500, data);

                        return false;
                    }

                    if (r.error) {
                        // return error
                        this.error(r.error.code, r.error.message);

                        return false;
                    }

                    // pass file element to response
                    r.file = this.file;

                    callback('uploadcomplete', r);

                    // clear file
                    this.file = null;
                } else {
                    this.error();
                }
            },
            xhr: function () {
                var self = this,
                    xhr = this.transport,
                    o = this.options,
                    callback = o.callback,
                    formData = new FormData();

                // get file object
                var file = this.file;

                // progress
                if (xhr.upload) {
                    xhr.upload.onprogress = function (e) {
                        if (e.lengthComputable) {
                            file.loaded = Math.min(file.size, e.loaded);
                            callback('progress', file);
                        }
                    };
                }

                xhr.onreadystatechange = function () {
                    if (xhr.readyState === 4) {
                        // success
                        if (xhr.status === 200) {
                            file.loaded = file.size;
                            // fire progress event
                            callback('progress', file);

                            formData = null; // Free memory

                            // pass to repsonse function
                            self.response(xhr.responseText);
                            // send error with xhr status
                        } else {
                            self.error(xhr.status);
                        }
                        // reset
                        xhr.onreadystatechange = $.noop;
                        xhr = null;
                    }
                };

                xhr.open("post", o.url, true);

                // Set custom headers
                $.each(o.headers, function (name, value) {
                    xhr.setRequestHeader(name, value);
                });

                // set xhr request header
                xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

                // Add multipart params
                $.each(o.multipart, function (name, value) {
                    if ($.type(value) === "object") {
                        formData.append(value.name, value.value);
                    } else {
                        formData.append(name, value);
                    }
                });

                // add file specific data
                if (file.data) {
                    $.each(file.data, function (name, value) {
                        if ($.type(value) === "object") {
                            formData.append(value.name, value.value);
                        } else {
                            formData.append(name, value);
                        }
                    });
                }

                // add method
                formData.append('method', 'upload');

                // add json-rpc id
                formData.append('id', uid());

                // Add file and send it
                formData.append(o.data_name, file);
                xhr.send(formData);

                return;
            },
            cleanup: function () {
                var file = this.file;

                if (file && file.input) {
                    // remove form
                    $(file.input).parent('form[target="wf_upload_iframe"]').remove();
                }

                return false;
            },

            abort: function () {
                this.transport.abort();

                this.transport.onreadystatechange = $.noop;
                this.transport = null;
                this.cleanup();
            }
        };

        /**
         * Uploader
         * @param {object} options
         * @returns {Uploader}
         */
        function Uploader(options) {
            var self = this;
            self.events = [];

            this.options = $.extend({
                container: 'body',
                multiple: true,
                input_name: 'file',
                drop_target: null,
                upload_button: null,
                filetypes: "*",
                max_size: 1024,
                data: {}
            }, options);

            this.files = [];
            var accept = [];

            if (this.options.filetypes.length > 1) {
                accept = $.map(this.options.filetypes.split(','), function (val) {
                    return '.' + val;
                });
            }

            // create element
            this.input = $('<input type="file" accept="' + accept.join(',') + '" />');

            // style and mark with a class
            $(this.input).addClass('wf-uploader-element');

            // add multiple option
            $(this.input).prop('multiple', this.options.multiple);

            return this;
        }

        /**
         * Upload prototype
         */
        Uploader.prototype = {
            _events: [],
            /**
             * Upload queue
             */
            files: [],
            /**
             * Add Upload Event
             * @param {string} ev Event name
             * @param {function} fct Event callback
             * @returns {void}
             */
            on: function (event, fn) {
                $(document).on('upload:' + event, fn);

                this._events.push(event);

                return this;
            },
            /**
             * Fire an Upload Event
             * @param {string} ev Event name
             * @returns {void}
             */
            fire: function (event) {
                $(document).trigger('upload:' + event, Array.prototype.slice.call(arguments, 1));

                return this;
            },
            /**
             * Initialize Uploader
             * @returns {void}
             */
            init: function () {
                // create empty files array
                var self = this,
                    o = this.options;

                // if a drop target is specified, add drop events
                if (o.drop_target) {

                    // Block browser default dragover dragenter, but fire event
                    $(o.drop_target).on('dragover', function (e) {
                        var dataTransfer = e.originalEvent.dataTransfer;

                        self.fire('dragover');

                        dataTransfer.dropEffect = 'copy';

                        cancel(e);
                    });

                    // fire off other drag events
                    $(o.drop_target).on('dragstart dragenter dragleave dragend', function (e) {
                        self.fire(e.type);

                        cancel(e);
                    });

                    // Attach drop handler and grab files
                    $(o.drop_target).on('drop', function (e) {
                        var dataTransfer = e.originalEvent.dataTransfer;

                        self.fire('drop');

                        // Add dropped files
                        if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {
                            $.each(dataTransfer.files, function (i, file) {
                                self.addFile(file);
                            });
                            cancel(e);
                        }

                        // if no upload button is set, begin upload
                        if (!o.upload_button && self.files.length) {
                            self.start();
                        }

                        cancel(e);
                    });
                }

                // if there browse button, create file input element
                if (o.browse_button) {
                    var btn = o.browse_button;
                    // add button class and wrap in a div
                    $(btn).addClass('wf-uploader-button').wrap('<div class="wf-uploader-container"></div>');

                    // add change event to input
                    $(this.input).on('change', function () {
                        if (this.files) {
                            $.each(this.files, function (i, file) {
                                self.addFile(file);
                            });
                        } else {
                            var name = this.value.replace(/\\/g, '/').replace(/\/(.+)$/, '$1');
                            // add file with name and element
                            self.addFile({ name: name, input: this });

                            // clone input and append
                            $(this).hide().clone(true).insertAfter(this).show();
                        }

                        // if no upload button is set, begin upload
                        if (!o.upload_button && self.files.length) {
                            self.start();
                        }
                    });

                    // clone "master" element and append to button
                    $(this.input).clone(true).insertAfter(btn);
                }

                self.fire('init');

                return this;
            },
            /**
             * Add a file to the Upload queue
             * @param {object} file
             * @returns {void}
             */
            addFile: function (file) {
                if (file && file.name) {                
                    // shortcut for file.name
                    var name = file.name;
                    // get file extension from name
                    var ext = name.substring(name.length, name.lastIndexOf('.') + 1);

                    // check for extension in file name, eg. image.php.jpg
                    if (/\.(php|php(3|4|5)|phtml|pl|py|jsp|asp|htm|html|shtml|sh|cgi)\./i.test(file.name)) {
                        this.fire('error', { "code": 800, "message": 'FILE_INVALID_ERROR', "file": file });
                        return false;
                    }

                    // Check file type. This is not a secutity check, but more for convenience
                    if (this.options.filetypes !== "*") {
                        // regular expression to test file type
                        var rx = new RegExp('^(' + this.options.filetypes.split(',').join('|') + ')$', 'i');

                        // check against allowed types
                        if (rx.test(ext) === false) {
                            this.fire('error', { "code": 601, "message": 'FILE_EXTENSION_ERROR', "file": file });
                            return false;
                        }
                    }

                    // check file size
                    if (file.size && parseInt(file.size, 10) > parseInt(this.options.max_size, 10) * 1024) {
                        this.fire('error', { "code": 600, "message": 'FILE_SIZE_ERROR', "file": file });
                        return false;
                    }

                    // set unique id
                    file.id = uid();

                    // set extension
                    file.extension = ext;

                    // set file type
                    file.mimetype = file.type || (/(jpg|jpeg|bmp|tiff|tif|gif|png|webp)/.test(ext) ? mime[ext] : 'text/plain');

                    // clean file path
                    name = name.replace(/\\/g, '/').replace(/\/+/g, '/');

                    // add filename
                    file.filename = name.split('/').pop();

                    // dispatch event (allow file to be renamed and updated)
                    this.fire('fileadded', file);

                    if (this.fileExists(file)) {
                        this.fire('error', { "code": 700, "message": 'FILE_EXISTS_ERROR', "file": file });
                        return false;
                    }

                    // add files to queue
                    this.files.push(file);
                }
            },
            removeFile: function (file) {
                // dispatch event
                this.fire('fileremoved', file);

                var i = this.getFileIndex(file);

                if (i !== -1) {
                    // remove from list
                    this.files.splice(i, 1);
                }

                return this;
            },
            getFileIndex: function (file) {
                var i, files = this.files,
                    len = files.length;

                for (i = 0; i < len; i++) {
                    if (files[i] && files[i].id === file.id) {
                        return i;
                    }
                }

                return -1;
            },
            fileExists: function (file) {
                var i, files = this.files,
                    len = files.length;

                for (i = 0; i < len; i++) {
                    if (files[i] && files[i].filename === file.filename) {
                        return true;
                    }
                }

                return false;
            },
            updateFile: function (file, property) {
                var self = this,
                    i = this.getFileIndex(file);

                if (i !== -1) {
                    $.each(property, function (name, value) {
                        if (/^(size|type|element)$/.test(name) === false) {
                            self.files[i][name] = value;
                        }
                    });
                }

                return this;
            },
            renameFile: function (file, name) {
                return this.updateFile(file, { 'filename': name });
            },

            upload: function (file, success, error) {
                var self = this,
                    o = this.options,
                    data;

                if ($.type(o.data) === "object") {
                    data = $.extend({ "name": file.filename || "" }, o.data);
                }

                if ($.type(o.data) === "array") {
                    data = $.merge([{ "name": "name", "value": file.filename || "" }], o.data);
                }

                // create upload arguments
                var args = {
                    url: o.url,
                    data_name: o.input_name,
                    multipart: data,
                    callback: function (ev, args) {
                        // fire event
                        self.fire(ev, args);

                        // adjust queue
                        if (ev === "uploadcomplete" || ev === "error") {
                            // destroy transport
                            self.transport = null;

                            // fire complete event
                            if (ev === "uploadcomplete") {
                                success(args);
                            } else {
                                error(args);
                            }
                        }
                    }
                };

                this.transport = new Transport(args);
                this.transport.upload(file);

                return this;
            },

            uploadFilesInBlocks: function (files, blockSize) {
                var self = this;

                function uploadFile(file) {
                    return new Promise((resolve, reject) => {
                        self.fire('uploadstart', file);

                        self.upload(file, function successCallback(response) {
                            resolve(response);

                            self.removeFile(file);
                        }, function errorCallback(error) {
                            reject(error);
                        });
                    });
                }

                function uploadNextBlock() {
                    // If there are no files left, return to stop the process
                    if (files.length === 0) {
                        self.fire("allcomplete");
                        return;
                    }

                    // Calculate the current block size
                    var currentBlockSize = Math.min(blockSize, files.length);

                    // Get the current block of files
                    var block = files.slice(0, currentBlockSize);// Always take from the start of the array
                    var uploadPromises = block.map(uploadFile);

                    Promise.all(uploadPromises).then(() => {
                        // Recursively call to upload the next block
                        setTimeout(uploadNextBlock, 500);
                        // eslint-disable-next-line dot-notation
                    }).catch((error) => {
                        console.error('An error occurred while uploading:', error);
                    });
                }

                // Start uploading the first block
                uploadNextBlock();
            },
     
            start: function () {
                // Upload files in blocks of 5
                this.uploadFilesInBlocks(this.files, 5);

                return this;
            },
            clear: function () {
                this.files = [];

                // clear input and remove all siblings
                $(this.element).val("").siblings('.wf-uploader-element').remove();

                return this;
            },
            stop: function () {
                if (this.transport) {
                    this.transport.abort();

                    this.fire('abort');
                }

                return this;
            },
            destroy: function () {
                if (this.transport) {
                    this.transport.cleanup();

                    this.transport = null;
                }

                this.clear();

                this.fire('destroy');

                // unbind all events
                $.each(this._events, function (i, ev) {
                    $(document).off('upload:' + ev);
                });

                return this;
            }
        };

        window.Uploader = Uploader;
    })(jQuery, window);

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /*global Wf, jQuery, Uploader */

    (function ($, Wf) {

        function mapIcon(ext) {
            if (/^(flv|mp4|m4v|webm|ogg|ogv|mov|wmv|avi|mvk|webm)$/.test(ext)) {
                return 'video';
            }

            if (/^(mp3|ogg|oga)$/.test(ext)) {
                return 'audio';
            }

            if (/^(jpg|jpeg|png|gif|png|svg|bmp|tiff|webp)$/.test(ext)) {
                return 'image';
            }

            if (/^(txt|htm|html)$/.test(ext)) {
                return 'text';
            }

            if (/^(doc|docx|dot|dotx)$/.test(ext)) {
                return 'word';
            }

            if (/^(xls|xlsx)$/.test(ext)) {
                return 'excel';
            }

            if (/^(ppt|pptx)$/.test(ext)) {
                return 'powerpoint';
            }

            if (/^(rar|zip|tar|gz)$/.test(ext)) {
                return 'zip';
            }

            if (/^(html|htm)$/.test(ext)) {
                return 'code';
            }

            if (/^(txt|rtf|csv)$/.test(ext)) {
                return 'text';
            }

            return ext;
        }

        function UploadWidget(element, options) {
            this.element = element || $('<div></div>');

            // uplaoder object
            this.uploader = {};
            // error count
            this.errors = 0;
            // uploading flag
            this.uploading = false;

            this.options = $.extend({
                field: $('input[name=file]:first'),
                max_size: false,
                limit: 0,
                filetypes: "*",
                insert: true,
                buttons: {},
                websafe_mode: 'utf-8',
                browse_button: '#upload-browse',
                upload_button: '#upload-start',
                drop_target: '#upload-body'
            }, options);

            this.init();
        }

        UploadWidget.prototype = {

            FILE_SIZE_ERROR: 600,
            FILE_EXTENSION_ERROR: 601,
            FILE_EXISTS_ERROR: 700,
            FILE_INVALID_ERROR: 800,

            /**
             * Shortcut function for event triggering
             * @param {string} ev Event name
             * @param {Mixed} args Arguments
             * @returns {void}
             */
            _trigger: function (ev, args) {
                $(this.element).trigger('uploadwidget:' + ev.toLowerCase(), args);
            },
            init: function () {
                // clear old uploader
                if (this.uploader instanceof Uploader) {
                    this.uploader.destroy();
                }

                $(this.options.field).remove();

                this._createUploader();
            },
            _createUploader: function () {
                var self = this;

                if (!$.support.xhr2) {
                    $(this.element).addClass('wf-uploader-html4');
                }

                this.uploader = new Uploader(this.options);

                // on Uploader init
                this.uploader.on('init', function () {
                    self._createDragDrop();
                    self._trigger('init');
                });

                // on add file
                this.uploader.on('fileadded', function (e, file) {
                    self._createQueue(file);
                    self._trigger('fileadded', file);
                });

                // on upload file
                this.uploader.on('uploadstart', function (e, file) {
                    self._onStart(file);
                });

                this.uploader.on('allcomplete', function () {
                    self._onAllComplete();
                });

                this.uploader.on('uploadcomplete', function (e, o) {
                    self._onComplete(o);
                });

                this.uploader.on('dragover', function (e, o) {
                    $(self.options.drop_target).addClass('wf-upload-dragover');
                });

                this.uploader.on('dragleave', function (e, o) {
                    $(self.options.drop_target).removeClass('wf-upload-dragover');
                });

                this.uploader.on('drop', function (e, o) {
                    $(self.options.drop_target).removeClass('wf-upload-dragover');
                });

                this.uploader.on('close', function (e, o) {
                    self.close();
                });

                /**
                 * Handle Error
                 */
                this.uploader.on('error', function (up, error) {
                    var file = error.file;

                    if (typeof error === "string") {
                        error = { "message": error, "code": 500 };
                    }

                    if (file) {
                        if (error.code < 600) {
                            $(file.element).removeClass('queue-item-loading').addClass('queue-item-error');
                        } else {
                            $(file.element).remove();
                        }

                        self._showError(error, file);
                    }

                    self.errors++;
                });

                this.uploader.on('fileremoved', function (file) { });

                this.uploader.on("progress", function (o, file) {
                    self._onProgress(file);
                });

                this.uploader.init();
            },

            _showError: function (error, file) {
                var self = this;

                error = $.extend({ "message": "", "code": 500 }, error);

                if ($.type(error.message) === "array") {
                    error.message = error.message.join("\n");
                }
                
                // encode as text
                error.message = $('<textarea></textarea>').html(error.message).text();

                // create language key from message
                var msg = error.message.replace(/[^a-z_ ]/gi, '').replace(/\s+/g, '_').toLowerCase();

                // get details
                var details = '';
                var message = Wf.translate(msg, error.message);

                // clean up message a bit
                message = message.replace(/<br[\s\/]+?>/gi, '');

                // process variable
                message = message.replace('%s', file.name);

                if (error.details) {
                    details = '<br />' + error.details;
                } else {
                    switch (error.code) {
                        case self.FILE_EXTENSION_ERROR:
                        case self.FILE_INVALID_ERROR:
                        case self.FILE_EXISTS_ERROR:
                            details = details.replace('%s', file.name);
                            break;

                        case self.FILE_SIZE_ERROR:
                            details = details.replace(/%([fsm])/g, function ($0, $1) {
                                switch ($1) {
                                    case 'f':
                                        return file.name;
                                    case 's':
                                        return Wf.String.formatSize(file.size);
                                    case 'm':
                                        return Wf.String.formatSize(self.options.max_size * 1024);
                                }
                            });

                            break;
                    }

                    if (details) {
                        message += '<br />' + details;
                    }
                }

                if (error.code < 600) {
                    $('.uk-progress', file.element).hide();
                    $('<div class="uk-alert uk-alert-danger uk-width-1-1 uk-text-center"></div>').html(message).appendTo(file.element);
                } else {
                    Wf.Modal.alert(message);
                    this.errors--;
                }
            },

            _onStart: function (file) {
                this._trigger('uploadstart', file);
                $(file.element).addClass('queue-item-loading').find('input[type="text"]').prop('disabled', true);
            },
            _isError: function (err) {
                if (err) {
                    if ($.isArray(err)) {
                        return err.length;
                    }

                    return true;
                }

                return false;
            },
            _onComplete: function (o) {
                var file = o.file;

                // add success class
                $(file.element).removeClass('queue-item-loading').addClass('queue-item-complete');

                var item = {
                    name: file.name
                };

                if (o.result.files && o.result.files.length) {
                    var obj = o.result.files[0] || {};
                    $.extend(item, obj.file || obj);
                }

                // trigger callback
                this._trigger('filecomplete', [file, item]);
            },
            _onAllComplete: function () {
                this.uploading = false;
                this._trigger('uploadcomplete', this.getErrorCount());
            },
            _setProgress: function (el, percent) {
                $('.uk-progress-bar', el).css('width', percent + '%').attr('aria-valuenow', percent + '%').text(percent + '%');
            },
            _onProgress: function (file) {
                if (!file.size) {
                    return;
                }

                var percent = Math.floor(file.loaded / file.size * 100);

                if (file.size === file.loaded) {
                    percent = 100;
                }

                this._setProgress(file.element, percent);
            },
            upload: function (args) {
                // Only if there are files to upload
                var files = this.uploader.files;

                if (files.length) {
                    this.uploading = true;

                    // set multipart params
                    this.uploader.options.data = args || {};

                    // start upload
                    this.uploader.start();
                }
                return false;
            },
            refresh: function () { },
            close: function () {
                if (this.uploader instanceof Uploader) {
                    if (this.uploading) {
                        this.uploader.stop();
                    }

                    this.uploader.destroy();
                }

                this.errors = 0;
                this.uploader = {};
                this.uploading = false;
            },
            getErrorCount: function () {
                return this.errors;
            },
            isUploading: function () {
                return this.uploading;
            },
            stop: function () {
                this.uploader.stop();
            },
            start: function () {
                this.uploader.start();
            },
            setStatus: function (s) {
                var file = this.currentFile;

                if (file) {
                    $(file.element).removeClass('queue-item-loading queue-item-complete queue-item-error').addClass(s.state || '');

                    if (s.state && s.state === 'error') {
                        this.errors++;

                        if (s.message) {
                            $('.uk-progress', file.element).hide();
                            $('<div class="uk-alert uk-alert-danger uk-width-1-1 uk-text-center"></div>').html(s.message).appendTo(file.element);
                        }
                    }
                }
            },
            _createDragDrop: function () {
                var self = this;

                // remove existing drag placeholder
                $('#upload-queue-drag').remove();

                // empty queue
                $('#upload-queue').empty();

                var msg = Wf.translate('upload_drop_details', '%filetypes files up to %max_size in size');

                // must have a variable
                if (msg.indexOf('%') !== -1) {
                    msg = msg.replace(/%([\w]+)/g, function (match, key) {
                        var value = self.options[key] || '';
        
                        if (key === 'filetypes') {
                            value = '<span class="uk-text-truncate uk-display-block">' + value + '</span>';
                        }
        
                        if (key === 'max_size') {
                            value = '<strong>' + Wf.String.formatSize(value * 1024) + '</strong>';
                        }
        
                        return value;
                    });
                }

                $('<div id="upload-queue-drag" class="uk-flex uk-flex-center uk-flex-column uk-flex-middle uk-text-large uk-height-1-1 uk-text-large uk-comment">' +
                    '   <div class="uk-comment-header uk-flex">' +
                    '       <i class="uk-icon-cloud-upload uk-icon-medium uk-margin-right uk-text-muted uk-comment-avatar"></i><h4 class="uk-comment-title">' + Wf.translate('upload_drop', 'Drop files here') + '</h4>' +
                    '   </div>' +
                    '   <p class="uk-margin-small uk-comment-meta uk-width-1-2 uk-text-center">' + msg + '</p>' +
                    '</div>').appendTo('#upload-queue-block').show();
            },
            /**
             * Rename a file in the uploader files list
             * @param {Object} file File object
             * @param {String} name New name
             */
            _renameFile: function (file, name) {
                this.uploader.renameFile(file, name);
                this._trigger('filerename', file);
            },
            /**
             * Remove all files
             * @private
             */
            _removeFiles: function () {
                this.uploader.splice();

                // reset errors
                this.errors = 0;

                // insert empty list element
                $(this.element).empty();
            },
            /**
             * Check if a file is in the queue already
             * @param file
             * @returns {Boolean}
             * @private
             */
            _fileExists: function (file) {
                return this.uploader.fileExists(file);
            },
            /**
             * Remove a file from the queue
             * @param {String} file File to remove
             */
            _removeFile: function (file) {
                this._trigger('filedelete', file);

                if ($(file.element).hasClass('queue-item-error')) {
                    this.errors--;
                }

                $(file.element).remove();

                this.uploader.removeFile(file);
            },
            _createQueue: function (file) {
                var self = this;

                // get the file title from the file name (without any path)
                var name = Wf.String.basename(file.filename);

                // sanitize name
                name = Wf.String.safe(name, self.options.websafe_mode, self.options.websafe_spaces);

                // set updated file name
                file.filename = name;

                // remove extension
                var title = Wf.String.stripExt(name);

                // create file list element
                file.element = document.createElement('div');

                // status / delete
                var remove = $('<button class="uk-button uk-button-link"></button>').attr({
                    'title': Wf.translate('delete', 'Delete')
                }).addClass('queue-item-action').on('click', function (e) {
                    e.preventDefault();

                    if (self.uploading) {
                        return self._stop(file);
                    }

                    return self._removeFile(file);
                }).append('<i class="uk-icon uk-icon-trash"></i>');

                // extension
                var ext = file.extension.toLowerCase();
                // input
                var input = $('<i class="uk-icon uk-icon-file-' + mapIcon(ext) + '"></i><input type="text" value="' + title + '" class="uk-width-1-1" /><span class="queue-item-extension uk-text-muted uk-icon-none">.' + file.extension + '</span>');
                var name = $('<div class="queue-item-name uk-width-3-4 uk-width-small-4-5 uk-form-icon uk-form-icon-both"></div>').append(input);

                var buttons = [remove];

                // add optional buttons
                $.each(self.options.buttons, function (name, props) {
                    var btn = $('<button class="uk-button uk-button-link" title="' + props.title || name + '"></button>').addClass(props['class']).on('click', function (e) {
                        if ($(this).hasClass('disabled')) {
                            e.preventDefault();
                            return;
                        }

                        var fn = props.click || $.noop;
                        fn.call(self, this);

                        e.preventDefault();
                    });

                    buttons.push(btn);
                });

                // size
                var size = $('<div class="queue-item-size uk-flex-item-auto uk-text-center uk-hidden-mini" title="' + Wf.String.formatSize(file.size) + '" role="presentation"></div>').html(Wf.String.formatSize(file.size));

                // create actions container
                var actions = $('<div class="queue-item-actions uk-flex uk-width-1-4 uk-width-small-1-5 uk-text-right"></div>').appendTo(file.element).append(size).append(buttons);
                var progress = $('<div class="uk-progress uk-width-1-1"><div class="uk-progress-bar"></div></div>');

                $(file.element).addClass('queue-item uk-width-1-1 uk-flex uk-flex-wrap').appendTo($(self.element)).append([name, actions, progress]);

                $('input[type="text"]', file.element).on('change keyup', function (e) {
                    var v = this.value;
                    // make web safe
                    v = Wf.String.safe(this.value, self.options.websafe_mode, self.options.websafe_spaces);

                    // toggle class if name is not safe
                    $(this).toggleClass('uk-form-danger', v !== this.value);

                    // update upload element
                    if (e.type === "change") {
                        self._renameFile(file, v + '.' + file.extension);
                    }
                }).trigger('change');

                self._trigger('fileSelect', file);
            },
            _stop: function (file) {
                this.uploader.stop();

                $(file.element).removeClass('queue-item-loading');
            }
        };

        // jQuery hook
        $.fn.uploader = function (options) {
            var inst = new UploadWidget(this, options);

            $(this).on('uploadwidget:upload', function (e, data) {
                if (inst.isUploading()) {
                    return false;
                }

                inst.upload(data);
            });

            $(this).on('uploadwidget:close', function () {
                inst.close();
            });

            return this;
        };
    })(jQuery, Wf);

    /* eslint-disable consistent-this */
    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /* global jQuery */

    (function ($) {

        $.fn.listsort = function (options) {
            options = $.extend({
                fields: {}
            }, options);

            var el = this;

            $.each(options.fields, function (element, props) {
                $(element).addClass('asc').on('click', function () {
                    var direction = 'asc';

                    $(this).toggleClass(function () {
                        if ($(this).is('.asc')) {
                            $(this).removeClass('asc');
                            direction = 'desc';
                        } else {
                            $(this).removeClass('desc');
                            direction = 'asc';
                        }

                        return direction;
                    });

                    var selector = props.selector;

                    if ($.type(selector) == 'string') {
                        selector = [selector];
                    }

                    $.each(selector, function (i, s) {
                        sortList(s, $(element).data('sort-type'), props.attribute, direction);
                    });
                });
            });

            function sortList(selector, type, attribute, direction) {
                var fn;

                switch (type) {
                    case 'date':
                        fn = sortDate;
                        break;
                    default:
                        fn = sortCompare;
                        break;
                }

                // create the list to sort
                var list = $(selector, el).map(function () {
                    var v = $(this).attr(attribute) || $(this).text();

                    if (type == 'number') {
                        v = parseFloat(v);
                    }

                    if (type == 'extension') {
                        v = v.substring(v.length, v.lastIndexOf('.') + 1).toLowerCase();
                    }

                    if (type == 'string') {
                        v = v.toLowerCase();
                    }

                    return {
                        value: v,
                        element: this
                    };
                }).get();

                // sort list
                list.sort(fn);

                if (direction == 'desc' || type == 'extension') {
                    list.reverse();
                }

                $.each(list, function (i, item) {
                    $(el).append(item.element);
                });

                // destroy list
                list = null;

                $(el).trigger('listsort:sort', { 'type': type, 'direction': direction });
            }
            function sortDate(a, b) {
                var x = a.value, y = b.value, r = 0, d1 = 0, d2 = 0, t1 = 0, t2 = 0;
                var re = /(\d{2})[\/](\d{2})[\/](\d{4}), (\d{2})[:](\d{2})/g;

                d1 = x.replace(re, '$3$2$1');
                d2 = y.replace(re, '$3$2$1');

                t1 = x.replace(re, '$4$5');
                t2 = y.replace(re, '$4$5');

                // sort date
                if (d1 > d2) {
                    r = 1;
                }

                if (d1 < d2) {
                    r = -1;
                }

                // sort time
                if (t1 > t2) {
                    r = 1;
                }

                if (t1 < t2) {
                    r = -1;
                }

                return r;
            }
            function sortCompare(a, b) {
                if (a.value < b.value) {
                    return -1;
                }

                if (b.value < a.value) {
                    return 1;
                }

                return 0;
            }

            return this;
        };
    })(jQuery);

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /*jshint smarttabs:true, undef:true, latedef:true, curly:true, bitwise:true, camelcase:true */
    /*globals $code */
    (function ($) {

    	var specialKeyCodeMap = {
    		9: 'tab',
    		17: 'ctrl',
    		18: 'alt',
    		27: 'esc',
    		37: 'left',
    		39: 'right',
    		13: 'enter',
    		38: 'up',
    		40: 'down',
    		91: 'cmd'
    	};

    	function defer(fn) {
    		setTimeout(fn, 0);
    	}

    	// http://stackoverflow.com/a/6969486
    	function escapeRegExChars(str) {
    		return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
    	}

    	/**
    	 * Debounce a function.
    	 * https://github.com/twitter/typeahead.js
    	 * Copyright 2013-2014 Twitter, Inc. and other contributors; Licensed MIT
    	 * @param {function} func
    	 * @param {integer} wait
    	 * @param {boolean} immediate
    	 * @return {void}
    	 */
    	function debounce(func, wait, immediate) {

    		var timeout, result;

    		return function () {
    			var context = this,
    				args = arguments,
    				later, callNow;

    			later = function () {
    				timeout = null;
    				{
    					result = func.apply(context, args);
    				}
    			};

    			callNow = immediate;

    			clearTimeout(timeout);
    			timeout = setTimeout(later, wait);

    			if (callNow) {
    				result = func.apply(context, args);
    			}

    			return result;
    		};
    	}

    	$.fn.listfilter = function (options) {

    		options = $.extend({
    			list: null,
    			items: null,
    			clear: null,
    			sort: null,
    			hide: false,
    			filter: null
    		}, options);

    		var el = this;

    		$(options.clear).on('click.listfilter', function (e) {
    			reset();

    			$(el).val('');

    			$(el).trigger('listfilter:clear', [e]);
    		});

    		// create filter event
    		$(el).on('listfilter:filter', function (e, s) {
    			filter(s);
    		});

    		// Debounce keyup function
    		var keyup = debounce(function (e) {
    			if (e.keyCode && specialKeyCodeMap[e.keyCode]) {
    				return;
    			}

    			var v = $(el).val();

    			// wait for input to update
    			defer(function () {
    				if (v === "") {
    					$(options.clear).trigger('click.listfilter');
    					return;
    				}

    				// cancel events
    				e.stopImmediatePropagation();
    				
    				// at least 3 characters required
    				if (v.length < 3) {
    					return;
    				}

    				$(el).trigger('listfilter:find', [v]);
    			});
    		}, 500);

    		// add keyup and change events to trigger filter
    		$(el).on('keyup.listfilter paste.listfilter cut.listfilter', keyup);

    		function toUnicode(s) {
    			
    			var str = '';

    			for (var i = 0, ln = s.length; i < ln; i++) {
    				var ch = s[i];
    				// only process on possible restricted characters or utf-8 letters/numbers
    				if (/[^\w\.\-\s \/]/i.test(ch)) {
    					ch = '\\u' + ch.charCodeAt(0);
    				}
    				str += ch;
    			}

    			return str;
    		}

    		function filter(s) {
    			var x = [],
    				v;

    			// filter by extension
    			if (s.charAt(0) === '.') {
    				v = s.substr(1);
    				matcher = new RegExp('\.(' + escapeRegExChars(v) + '[a-z0-9]*)$', "i");
    			} else {
    				s = toUnicode(s);
    				matcher = new RegExp(escapeRegExChars(s), "ui");
    			}

    			if (/[\u0000-\u1FFF\.\-\s ]/i.test(s)) {
    				$(options.selector, options.list).each(function () {
    					var match = false;

    					var title = $(this).attr('title');

    					// convert to unicode
    					title = toUnicode(title);

    					// check for match
    					match = matcher.test(title);

    					if (match) {
    						if ($.inArray(this, x) === -1) {
    							x.push(this);
    						}
    					} else {
    						var i = $.inArray(this, x);
    						if (i !== -1) {
    							x.splice(i, 1);
    						}
    					}
    				});
    			} else {
    				x = [];
    			}

    			if (x && x.length) {
    				$(options.selector, options.list).show().not(x).hide();

    				scroll(x[0]);

    			} else {
    				reset();
    			}

    			$(el).trigger('listfilter:found', [null, x]);
    		}

    		function scroll(el) {

    			var pos = $(el).position() || {top: 0};
    			var top = $(options.list).scrollTop();

    			$(options.list).css('overflow', 'hidden').animate({
    				scrollTop: pos.top + top
    			}, 1000, function () {
    				$(options.list).css('overflow', 'auto');
    			});
    		}

    		function reset() {
    			$(options.selector, options.list).show();
    			scroll($(options.selector, options.list).first());
    		}

    		return this;
    	};

    })(jQuery);

    /* eslint-disable consistent-this */
    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2024 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /* global tinyMCEPopup, jQuery, Wf */

    (function ($, Wf, undef) {
        var mimeTypes = {};

        // Parses the default mime types string into a mimes lookup map
        (function (data) {
            var items = data.split(","),
                i, y, ext;

            for (i = 0; i < items.length; i += 2) {
                ext = items[i + 1].split("|");
                for (y = 0; y < ext.length; y++) {
                    mimeTypes[ext[y]] = items[i];
                }
            }
        })(
            "video,flv|mp4|m4v|webm|ogg|ogv|mov|wmv|avi," +
            "audio,mp3|ogg|oga|webm|m4a," +
            "image,jpg|jpeg|apng|png|gif|png|svg|bmp|tiff|webp," +
            "text,txt|htm|html," +
            "word,doc|docx|dot|dotx," +
            "excel,xls|xlsx," +
            "powerpoint,ppt|pptx," +
            "zip,rar|zip|tar|gz," +
            "code,html|htm|xml," +
            "text,txt|rtf|csv"
        );

        // get mimetype from lookup map
        function getMimeType(ext) {
            ext = ext.toLowerCase();

            ext = $.trim(ext);

            return mimeTypes[ext] || ext;
        }

        // list of events to stop scoll animation on
        var scrollEvents = 'click.scroll mousedown.scroll wheel.scroll mousewheel.scroll keyup.scroll touchmove.scroll';

        var FileBrowser = function (element, options) {
            this.element = element;

            // set some variables

            $.extend(this, {
                _actions: {},
                _buttons: {
                    'folder': {},
                    'file': {}
                },
                _modal: [],
                // Returned items array
                _returnedItems: [],
                // 'Clipboard'
                _pasteitems: '',
                _pasteaction: '',
                // List limits
                _limitcount: 0,
                _limitend: 0
            });

            // set options to global
            this.options = FileBrowser.options;

            this.setOptions(options);

            // initialise
            this._init();

            // target element that triggered the current action
            this.actionTarget = null;
        };

        // Global options object - can be set externally
        FileBrowser.options = {
            // base url (used by external filesystems)
            base: '',
            // base dir
            dir: 'images',
            // source folder
            source: '',
            actions: null,
            buttons: null,
            folder_tree: true,
            details: true,
            search: true,
            upload: {
                max_size: 1024,
                filetypes: "*",
                overwrite: true,
                limit: 0,
                dialog: {},
                elements: null,
                buttons: {}
            },
            folder_new: {
                dialog: null
            },
            rename: {
                dialog: null
            },
            viewable: 'jpeg,jpg,gif,png,webp,avi,wmv,wm,asf,asx,wmx,wvx,mov,qt,mpg,mp3,mp4,m4v,mpeg,ogg,ogv,webm,swf,flv,f4v,xml,dcr,rm,ra,ram,divx,html,htm,txt,rtf,pdf,doc,docx,xls,xlsx,ppt,pptx',
            list_limit: 0,
            view_mode: 'list',
            expandable: true,
            websafe_mode: 'utf-8',
            websafe_spaces: false,
            websafe_textcase: '',
            date_format: '%d/%m/%Y, %H:%M',
            allow_download: false,
            use_state_cookies: true
        };

        FileBrowser.prototype = {

            /**
             * Shortcut function for event triggering
             * @param {string} ev Event name
             * @param {Mixed} args Arguments
             * @returns {void}
             */
            _trigger: function (ev, args) {
                $(this.element).trigger('filebrowser:' + ev.toLowerCase(), args);
            },

            setOptions: function (options) {
                this.options = $.extend(this.options, options);
            },

            getOptions: function () {
                return this.options;
            },

            /**
             * Initialize the filebrowser
             * @returns {void}
             */
            _init: function (options) {
                var self = this;

                // extend options with passed in values
                this.options = $.extend(this.options, options);

                // bind events - legacy
                $.each(this.options, function (k, v) {
                    // bind event from options
                    if (typeof v === "function") {
                        $(self.element).on('filebrowser:' + k.toLowerCase(), v);
                        // remove from options list
                        delete self.options[k];
                    }
                });

                // Create Actions and Button
                this._addActions(this.options.actions);
                this._addButtons(this.options.buttons);

                // Build file and folder lists
                var list = document.createElement('ul');

                $(list).addClass('item-list').attr({
                    'id': 'item-list',
                    'role': 'listbox'
                }).on('click.item-list', function (e) {
                    var n = e.target,
                        p = n.parentNode;

                    if ($(n).hasClass('ui-sortable-handle')) {
                        return;
                    }

                    // move to parent if target is span or i (size, date, thumbnail)
                    if ($(n).is('.uk-icon, span, a, img')) {
                        n = $(n).parents('li').get(0);
                    }

                    // set target element
                    self.actionTarget = n;

                    if (n.nodeName === "LI") {
                        if ($(n).hasClass('folder')) {
                            var u = $(n).data('url') || self._getPreviousDir();

                            e.preventDefault();

                            return self._changeDir(u);
                        }

                        // bail before preventDefault
                        if (e.altKey && $(n).find('a[download]').length) {
                            return true;
                        }

                        // set target to node
                        e.target = n;

                        self._setSelectedItems(e, true);

                        // get serialized object
                        self.serializeItemData(n).then(function (data) {
                            // trigger event
                            self._trigger('onFileClick', [n, data]);
                        });

                        e.preventDefault();

                        return true;
                    }

                    if (n.nodeName === "INPUT") {
                        if ($(n).is(':checked')) {
                            // set target to node
                            e.target = n;
                            // set selection
                            self._setSelectedItems(e, true);
                        } else {
                            self._removeSelectedItems([p.parentNode], true);
                        }

                        p = $(n).parents('li');

                        // get serialized object
                        self.serializeItemData(p).then(function (data) {
                            data.state = $(n).is(':checked');

                            // trigger event
                            self._trigger('onFileToggle', [p, data]);
                        });

                        return true;
                    }
                }).on('dblclick.item-list', function (e) {
                    var n = e.target;

                    // move to parent if target is span or i (size, date, thumbnail)
                    n = $(n).parents('li').get(0);

                    if ($(n).hasClass('folder')) {
                        e.preventDefault();
                        return false;
                    }

                    // get serialized object
                    self.serializeItemData(n).then(function (data) {
                        // trigger event
                        self._trigger('onFileInsert', [n, data]);
                    });

                    e.preventDefault();
                    return false;
                }).on('keydown.item-list', function (e) {
                    switch (e.which) {
                        case 13:
                            // get currently selected item
                            var n = $('li.selected:last', '#item-list').get(0);

                            if (!n) {
                                return;
                            }

                            // set target element
                            self.actionTarget = n;

                            var p = $(n).parents('li');

                            if ($(n).hasClass('folder')) {
                                var u = $(p).data('url') || self._getPreviousDir();
                                return self._changeDir(u);
                            } else {
                                self._setSelectedItems(e, true);

                                self.serializeItemData(n).then(function (data) {
                                    self._trigger('onFileClick', [n, data]);
                                });
                            }

                            break;
                        case 38:
                        case 40:
                            self._setSelectedItems(e);
                            break;
                    }

                    e.preventDefault();
                });

                $('.folder-up', '#browser').on('click', function (e) {
                    e.preventDefault();

                    // reset target element
                    self.actionTarget = null;

                    var u = self._getPreviousDir();
                    return self._changeDir(u);
                });

                // update browser list on scroll
                $('#browser-list').append(list).on('scroll.browser-list', function (e) {
                    self._updateList();
                });

                // Item details navigation
                $('.details-nav-left, .details-nav-right', '#browser-details-nav').on('click', function (e) {
                    var $item = $('li.selected.active', '#item-list').removeClass('active');

                    if ($(this).hasClass('details-nav-left')) {
                        $item.prevAll('li.selected:first').addClass('active');
                    }

                    if ($(this).hasClass('details-nav-right')) {
                        $item.nextAll('li.selected:first').addClass('active');
                    }

                    e.preventDefault();

                    self._showItemDetails();
                });

                var list_limit = self._getState('limit', this.options.list_limit, function (val) {
                    return !/([0125]+)/.test(val) === false;
                });

                // Set list limit selection
                $('#browser-list-limit-select').val(list_limit);

                $('#browser-list-limit-select').on('change', function () {
                    self._limitcount = 0;

                    self._setState('limit', $(this).val());

                    self.refresh();
                });

                // Browser list navigation
                $('ul li', '#browser-list-limit').on('click', function (e) {
                    e.preventDefault();

                    var x = 0,
                        count = self._limitcount,
                        limit = parseInt(self._limit, 10);

                    if ($(this).hasClass('limit-left')) {
                        x = count - limit;
                    }

                    if ($(this).hasClass('limit-right')) {
                        x = count + limit;
                    }

                    if ($(this).hasClass('limit-right-end')) {
                        x = count = self._limitend;
                    }

                    self._limitcount = x;

                    self.refresh();
                });

                // Check All checkbox
                $('input[type="checkbox"]', '#check-all').on('click', function (e) {
                    var el = e.target;

                    var s = $(el).is(':checked');

                    $('input[type="checkbox"]', '#browser-list').prop('checked', !!s);

                    if (s) {
                        self._selectItems($('li', '#browser-list').not('.folder-up'), true);
                    } else {
                        // remove all selections
                        self._deselectItems();
                    }
                });

                // setup list sorting
                this._setupListSort();

                // Show / hide search icon
                $('#block-search-icon').toggle(this.options.search);

                // show details button only if folder tree enabled and details enabled
                $('#show-details').toggle(this._treeLoaded());

                $('#show-search').on('click', function () {
                    $('#searchbox').toggleClass('uk-hidden').attr('aria-hidden', function () {
                        return $(this).hasClass('uk-hidden');
                    });

                    $(this).toggleClass('uk-active');

                    if ($(this).hasClass('uk-active')) {
                        $('#search').trigger('focus');
                    }
                });

                $('#search + .uk-icon').on('click', function () {
                    $('#search').trigger('focus');
                });

                $('body').on('click', function (e) {
                    if ($('#searchbox').hasClass('uk-hidden')) {
                        return;
                    }

                    if ($(e.target).is('#searchbox, #search, #show-search, #show-search .uk-icon-search, #search + .uk-icon')) {
                        return;
                    }

                    $('#show-search').removeClass('uk-active');

                    $('#searchbox').addClass('uk-hidden').attr('aria-hidden', true);
                });

                // Searchables
                $('#search').listfilter({
                    list: '#item-list',
                    selector: 'li',
                    clear: '#search + .uk-icon'
                }).on('listfilter:find', function (ev, s) {
                    var el = this;

                    /*var limit = $('#browser-list-limit-select').val();

                    // store the limit
                    if (limit) {
                        self._setState('limit', limit);
                    }*/

                    /*
                    // if we are not showing all items, get filtered list from server
                    var limit = $('#browser-list-limit-select').val();
                    var count = self._foldercount + self._filecount;

                    // if we are not showing all items, get filtered list from server
                    if (limit == 0 || parseInt(limit) > count) {
                        return $(this).trigger('listfilter:filter', s);
                    }*/

                    if (s) {
                        var prefix = "";

                        // check if we are searching by extension
                        if (s.charAt(0) === ".") {
                            s = s.substr(1);
                            prefix = ".";
                        }

                        // show loading message
                        self._setLoader();

                        $('#browser-list').one('load.filter', function () {
                            $(el).trigger('listfilter:found', [null, $('li.file', '#item-list').get()]);
                        });

                        // reset limit
                        //$('#browser-list-limit-select').prop('disabled', true).val(0);

                        self._reset();

                        // store query
                        self._searchQuery = prefix + s;

                        self._getList('', self._searchQuery);

                    } else {
                        self._searchQuery = '';
                        self.refresh();
                    }

                    return true;
                }).on('listfilter:clear', function (ev) {
                    /*var limit = self._getState('limit', self.options.list_limit, function (val) {
                        return !/([0125]+)/.test(val) === false;
                    })
        
                    // Set list limit selection
                    $('#browser-list-limit-select').prop('disabled', false).val(limit);*/

                    // clear search query
                    self._searchQuery = '';
                    self.refresh();
                });

                // Setup refresh button
                $('#refresh').on('click', function (e) {
                    self.refresh(e);
                }).on('button:refresh', function (e, state) {
                    if (state) {
                        $('.uk-icon', this).addClass('uk-icon-spinner');
                        $(this).prop('disabled', true);
                    } else {
                        $('.uk-icon', this).removeClass('uk-icon-spinner');
                        $(this).prop('disabled', false);
                    }
                });

                var showDetails = this._getState('details', 0, function (val) {
                    val = parseInt(val, 10);
                    return val === 0 || val === 1;
                });

                // show details view (hide tree)
                if (parseInt(showDetails, 10) || !this._treeLoaded()) {
                    $('#show-details').removeClass('uk-active');
                    $('main').addClass('uk-tree-hidden');
                } else {
                    $('#show-details').addClass('uk-active');
                    $('main').removeClass('uk-tree-hidden');
                }

                // Details button
                $('#show-details:visible').on('click', function (e) {
                    $(this).toggleClass('uk-active');
                    $('main').toggleClass('uk-tree-hidden');

                    self._setState('details', $('main').hasClass('uk-tree-hidden') ? 1 : 0);
                });

                if (this.options.expandable) {
                    $('#browser').addClass('expandable');

                    $('#layout-full-toggle').on('click', function () {
                        $('#browser').toggleClass('full-height');
                        self._trigger($('#browser').hasClass('full-height') ? 'onMaximise' : 'onMinimise');
                    });
                }

                // set scrollEvents cancel
                $('#browser-list').on(scrollEvents, function () {
                    $(this).stop();
                });

                // setup directory
                this._setupDir();

                // trigger init
                this._trigger('onInit', this);
            },

            _updateList: function () {
                var self = this;
                // get visible area
                var top = $('#browser-list').scrollTop(), area = $('#browser-list').height() + top;

                $('.file.jpg, .file.jpeg, .file.png, .file.gif, .file.bmp', '#item-list').not('[data-width]').each(function () {
                    // get item position
                    var pos = $(this).position();

                    if (pos.top < area) {
                        self._getDimensions(this);
                    }
                });
            },

            /**
             * Get the height of the dilaog interface.
             */
            _getInterfaceHeight: function () {
                // get the base interface height, ie: everything - the file browser
                var ih = Math.max(0, Math.round($('#browser').offset().top) - 5);

                // get parent form element
                var p = $('#browser').parent('form');

                if ($(p).next(':not(div.actionPanel)').length) {
                    ih = (Math.round($('div.actionPanel').offset().top) - 10) - $('#browser').innerHeight();
                }

                return ih;
            },

            /**
             * Resize the browser window
             * @param {String} Interface height.
             */
            resize: function (ih, init) {
                /*var fh = $('#browser').hasClass('full-height'), ih = ih || this._getInterfaceHeight();

                var ap = Math.round($('div.actionPanel').offset().top) - 10;

                $('#browser').css({
                    width: $('body').width()
                });*/

                //var bh = (fh ? ap : ap - ih) - $('#browser').innerHeight();

                /*$('#browser-tree, #tree-body, #browser-list, #browser-details, #browser-details~div.spacer, #browser-buttons').height(function (i, v) {
                    return v + bh;
                });*/

            },

            /**
             * Translate a string. Wrapper for $.Plugin translate function
             * @param {String} Language key
             * @param {String} Default value
             */
            _translate: function (s, ds) {
                return Wf.translate(s, ds);
            },

            /**
             * Setup list sorting for item list
             */
            _setupListSort: function () {
                var self = this;
                // Sortables

                // get the sort value from a cookie
                this._sortValue = this._getState('sort', '', function (val) {
                    return /[a-z-]+/.test(val);
                });

                /*$('#item-list').listsort({
                    fields: {
                        '#sort-ext': {
                            attribute: 'title',
                            selector: 'li.file'
                        },
                        '#sort-name': {
                            attribute: 'title',
                            selector: ['li.folder:not(.folder-up)', 'li.file']
                        },
                        '#sort-date': {
                            attribute: 'data-modified',
                            selector: ['li.folder:not(.folder-up)', 'li.file']
                        },
                        '#sort-size': {
                            attribute: 'data-size',
                            selector: 'li.file'
                        }
                    }
                }).on('listsort:sort', function (e, args) {
                    self._trigger('onListSort');

                    var direction = '';

                    if (args.direction == 'asc') {
                        direction = '-';
                    } else {
                        direction = '';
                    }

                    var type = 'name';

                    if (args.type == 'string') {
                        type = 'name'
                    }

                    if (args.type == 'number') {
                        type = 'size'
                    }

                    self._sortValue = direction + type;

                    // store in a cookie
                    self._setState('sort', self._sortValue);

                    if (self._limit > 0) {
                        return self.refresh();
                    }
                });*/

                $('#sort-ext, #sort-name, #sort-date, #sort-size').on('click', function () {
                    // reset all
                    $(this).siblings('.asc, .desc').removeClass('desc').addClass('asc');

                    var direction = '';

                    if ($(this).hasClass('asc')) {
                        $(this).removeClass('asc').addClass('desc');
                        direction = '-';
                    } else {
                        $(this).removeClass('desc').addClass('asc');
                        direction = '';
                    }

                    // get value
                    var type = $(this).data('sort');

                    self._sortValue = direction + type;

                    // store in a cookie
                    self._setState('sort', self._sortValue);

                    self.refresh();

                }).addClass(function () {
                    if (this.id.indexOf(self._sortValue) === -1) {
                        return 'asc';
                    }

                    if (self._sortValue && self._sortValue.charAt(0) === '-') {
                        return 'desc';
                    }

                    return 'asc';
                });
            },

            /**
             *Check if the path is local and /or a valid local file url
             */
            _validatePath: function (s) {
                function _toUnicode(c) {
                    c = c.toString(16).toUpperCase();

                    while (c.length < 4) {
                        c = '0' + c;
                    }

                    return '\\u' + c;
                }

                // contains .. or is not local
                if (/\.{2,}/.test(s) || (/:\/\//.test(s) && s.indexOf(Wf.getURI(true)) == -1)) {
                    return false;
                }

                // make relative if an absolute local file
                if (/:\/\//.test(s)) {
                    s = Wf.URL.toRelative(s);
                }

                // contains non-standard characters
                if (/[^\w\.\-\s \/]/i.test(s)) {
                    for (var i = 0, ln = s.length; i < ln; i++) {
                        var ch = s[i];
                        // only process on possible restricted characters or utf-8 letters/numbers
                        if (/[^\w\.\-\s \/]/i.test(ch)) {
                            // return false on character less than 127, eg: &?@* etc.
                            if (_toUnicode(ch.charCodeAt(0)) < '\\u007F') {
                                return false;
                            }
                        }
                    }
                }

                return true;
            },

            _trimPath: function (path) {
                // convert to string
                path = '' + path;
                return path.replace(/^\//, '').replace(/\/$/, '');
            },

            _cleanPath: function (path) {
                if (path) {
                    // make relative
                    if (new RegExp(':\/\/').test(path)) {
                        path = Wf.URL.toRelative(path);
                    }

                    // remove slashes
                    path = this._trimPath(path);

                    // get dir if file (relative to site url)
                    if (/\.([a-z0-9]{2,}$)/i.test(path)) {
                        path = Wf.String.dirname(path);
                        path = path.replace(new RegExp(this.options.dir), '').replace(/^[\/\\]+/, '');
                    }
                }
                return path;
            },

            /**
             * Set up the base directory
             * @param {String} src The base url
             */
            _setupDir: function () {
                var self = this, dir = '';

                // get the file src from the widget element
                var src = this.options.source || $(this.element).val();

                var base = this.options.base;

                // check for and remove base (external filesystems)
                if (src && base) {
                    if (src.indexOf(base) === 0) {
                        // remove base
                        src = src.substr(base.length + 1);
                    }
                }

                // convert &amp; and ? to &
                src = src.replace(/(&amp;|\?)/g, '&');

                // remove query etc.
                if (src.indexOf('&') !== -1) {
                    src = src.substr(0, src.indexOf('&'));
                }

                // remove slashes
                src = this._trimPath(src);

                // invalid src or not a local file resource
                if (!this._validatePath(src)) {
                    src = '';
                }

                // get directory from cookie
                if (!src) {
                    dir = this._getState('dir', '', function (val) {
                        return val && self._validatePath(val);
                    });
                }

                if (!this._validatePath(dir)) {
                    dir = '';
                }

                // store directory
                this._setDir(Wf.String.encodeURI(dir));

                // make sure its relative
                if (src && /:\/\//.test(src)) {
                    src = Wf.URL.toRelative(src);
                }

                // set loading status
                this.setStatus({
                    message: this._translate('loading', 'Loading...'),
                    state: 'load'
                });

                if (this._treeLoaded()) {
                    // Initialize tree view
                    this._createTree(src);
                } else {
                    // Load folder / file list
                    this._getList(src);
                }
            },

            _toggleTree: function (s) {
                // add full-width class to browser
                $('#browser').toggleClass('full-width', !s);

                $('div.layout-left', '#browser').attr('aria-hidden', !s);

                $('#sort-size, #sort-date').attr('aria-hidden', s);

                $('span.size, span.date', '#item-list').attr('aria-hidden', s);
            },

            /**
             * Check if a name is websafe
             */
            _isWebSafe: function (name) {
                // get websafe name
                var safe = Wf.String.safe(name, this.options.websafe_mode, this.options.websafe_spaces, this.options.websafe_textcase);
                // only check lowercase as both upper and lower are websafe
                return name.toLowerCase() === safe.toLowerCase();
            },

            _isViewable: function (name) {
                var button = this._getButton('file', 'view');
                var viewable = this.options.viewable;

                if (button && button.restrict) {
                    viewable = button.restrict;
                }

                return new RegExp('\\.(' + viewable.replace(/,/g, '|') + ')$', 'i').test(name);
            },

            _buildList: function (o) {
                var self = this,
                    h = '';

                // empty list
                $('#item-list').empty();

                $('#browser').toggleClass('root', this._isRoot());

                if (!this._isRoot()) ;

                if (o.folders.length) {

                    $.each(o.folders, function (i, e) {
                        var data = [],
                            classes = [];

                        if (!e.id) {
                            return true;
                        }

                        $.each(e.properties, function (k, v) {
                            if (v !== '') {
                                data.push('data-' + k + '="' + v + '"');
                            }
                        });

                        // add url data
                        data.push('data-url="' + (e.url || e.id) + '"');

                        // add websafe class
                        classes.push(self._isWebSafe(e.name) ? 'safe' : 'notsafe');
                        // add writable class
                        classes.push(e.writable ? 'writable' : 'notwritable');
                        // add custom classes
                        if (e.classes) {
                            classes.push(e.classes);
                        }

                        // if e.name contains / characters, split and wrap these parts and the / in a <strong> to make them bold
                        var name = e.name.replace(/([^\s\/]+)(\/)/g, function (m) {
                            return '<strong>' + m + '</strong>';
                        });

                        h += '<li class="uk-grid uk-grid-collapse uk-flex folder ' + classes.join(' ') + '" title="' + e.name + '"' + data.join(' ') + '>';
                        h += '  <label class="uk-width-0-10 uk-item-checkbox" aria-label="' + self._translate('select', 'Select') + '"><input type="checkbox" /></label>';
                        h += '  <i class="uk-width-1-10 uk-icon uk-icon-folder folder"></i>';
                        h += '  <a class="uk-width-1-5 uk-padding-remove uk-flex-item-auto uk-text-truncate" href="#">' + name + '</a>';
                        h += '  <span class="uk-width-6-10 uk-item-date uk-hidden-mini">' + Wf.String.formatDate(e.properties.modified, self.options.date_format) + '</span>';
                        h += '</li>';
                    });

                }

                if (o.files.length) {
                    $.each(o.files, function (i, e) {
                        var data = [],
                            classes = [];

                        if (!e.id) {
                            return true;
                        }

                        $.each(e.properties, function (k, v) {
                            if (v !== '') {
                                data.push('data-' + k + '="' + v + '"');
                            }
                        });

                        // add url data
                        if (e.url) {
                            data.push('data-url="' + e.url + '"');
                        }

                        // add id (legacy support)
                        data.push('id="' + e.id + '"');

                        // add websafe class
                        classes.push(self._isWebSafe(e.name) ? 'safe' : 'notsafe');
                        // add writable class
                        classes.push(e.writable ? 'writable' : 'notwritable');
                        // add selected item to returned items
                        if (e.selected) {
                            self._addReturnedItem({
                                'name': e.id
                            });
                        }
                        // add custom classes
                        if (e.classes) {
                            classes.push(e.classes);
                        }

                        var ext = Wf.String.getExt(e.name);
                        var name = Wf.String.stripExt(e.name);
                        var filename = name + '.' + ext;
                        var icon = ext.toLowerCase();

                        var download = '';

                        if (self.options.allow_download && e.properties.preview) {
                            download = ' download="' + filename + '"';
                        }

                        // if e.name contains / characters, split and wrap these parts and the / in a <strong> to make them bold
                        name = e.name.replace(/([^\s\/]+)(\/)/g, function (m) {
                            return '<strong>' + m + '</strong>';
                        });

                        h += '<li class="uk-grid uk-grid-collapse uk-flex file ' + ext.toLowerCase() + ' ' + classes.join(' ') + '" title="' + e.name + '"' + data.join(' ') + '>';
                        h += '  <label class="uk-width-0-10 uk-item-checkbox" aria-label="' + self._translate('select', 'Select') + '"><input type="checkbox" /></label>';
                        h += '  <i class="uk-width-1-10 uk-icon uk-icon-file uk-icon-file-' + getMimeType(icon) + ' file ' + icon + '"></i>';
                        h += '  <a class="uk-width-1-5 uk-padding-remove uk-flex-item-auto" href="' + (e.properties.preview || '#') + '"' + download + '>';
                        h += '      <span class="uk-item-text uk-text-truncate uk-display-inline-block">' + name + '</span>';
                        h += '      <span class="uk-item-extension uk-display-inline-block">.' + ext + '</span>';
                        h += '  </a>';
                        h += '  <span class="uk-width-2-10 uk-item-date uk-hidden-mini">' + Wf.String.formatDate(e.properties.modified, self.options.date_format) + '</span>';
                        h += '  <span class="uk-width-4-10 uk-item-size uk-hidden-mini">' + Wf.String.formatSize(e.properties.size) + '</span>';
                        h += '</li>';
                    });

                }

                $('#item-list').html(h);

                this._showListDetails();
            },

            _showListDetails: function () {
                var s = !$('.layout-icon', '#show-details').hasClass('tree') && this._treeLoaded();

                this._toggleTree(s);
            },

            /**
             * Check if the Tree option is set and the Tree Class is loaded
             * return Boolean.
             */
            _treeLoaded: function () {
                return this.options.folder_tree && typeof $.fn.tree === "function";
            },

            /**
             * Initialize the Tree
             * @param {String} src Optional src url eg: images/stories/fruit.jpg
             */
            _createTree: function (src) {
                var self = this;
                // use src or stored directory
                var path = src || this._dir;

                path = this._cleanPath(path);

                $('#tree-body').on('tree:init', function (e, callback) {
                    Wf.JSON.request('getTree', path, function (o) {
                        // Set default tree
                        $('#tree-body').html(o);

                        typeof callback === "function" && callback();

                        if (path && path !== self._trimPath(self.options.dir)) {
                            $('#tree-body').trigger('tree:scroll', path);
                        }

                        // Load folder / file list
                        self._getList(src);
                    });

                }).on('tree:nodeclick', function (e, evt, node) {
                    self.actionTarget = node;

                    self._changeDir($(node).attr('data-id'));
                }).on('tree:nodeload', function (e, node) {
                    self._refreshTree(node);
                }).tree();
            },

            _refreshTree: function (node) {
                node = node || $('.uk-tree-root', '#tree-body');

                $('#tree-body').trigger('tree:toggleloader', node);

                Wf.JSON.request('getTreeItem', $(node).attr('data-id'), function (o) {
                    if (o && !o.error) {
                        $('ul:first', node).remove();

                        $('#tree-body').trigger('tree:createnode', [o.folders, node]);
                        $('#tree-body').trigger('tree:togglenodestate', [node, true]);
                    }
                    $('#tree-body').trigger('tree:toggleloader', node);
                }, this);
            },

            /**
             * Reset the Manager
             */
            _reset: function () {
                // Clear selects
                this._deselectItems();
                // Clear returns
                this._returnedItems = [];

                //$('.uk-modal').trigger('modal.close');

                // uncheck all checkboxes
                $('input[type="checkbox"]', '#check-all').prop('checked', false);

                $('li', '#browser-details-nav').addClass('uk-invisible').attr('aria-hidden', true).filter('.details-nav-text').empty();

                // clear list limit
                this._limit = 0;
            },

            /**
             * Clear the Paste action
             */
            _clearPaste: function () {
                // Clear paste
                this._pasteaction = '';
                this._pasteitems = '';

                this._hideButtons($('.paste', '#buttons'));
            },

            /**
             * Set a status message
             * @param {String} message
             * @param {String} loading
             */
            setStatus: function (o) {
                $('#browser-message').removeClass('load error');

                // set state
                $('#browser-message').toggleClass(o.state);

                $('#refresh').trigger('button:refresh', [o.state]);

                // set message
                $('.message', '#browser-message').html(o.message);
            },

            /**
             * Set a message
             * @param {String} message
             * @param {String} classname
             */
            _setMessage: function (message, classname) {
                return true;
            },

            /**
             * Sets a loading message
             */
            _setLoader: function () {
                this.setStatus({
                    message: this._translate('message_load', 'Loading...'),
                    state: 'load'
                });
            },

            /**
             * Reset the message display
             */
            _resetMessage: function () {
                return true;
            },

            /**
             * Reset the status display
             */
            _resetStatus: function () {
                var self = this,
                    dir = decodeURIComponent(this._dir),
                    $status = $('#browser-message');

                // reset state
                this.setStatus({
                    message: '',
                    state: ''
                });

                var $pathway = $('.uk-breadcrumb.pathway', $status);
                // remove all but "home"
                $('li', $pathway).not(':first').remove();

                // get width
                var sw = $status.width();

                // add "home" click
                $('li:first', $pathway).on('click', function () {
                    self._changeDir('/');
                });

                // trim path
                dir = $.trim(this._trimPath(dir));

                // add folder count
                var $count = $('<li class="count">( ' + this._foldercount + ' ' + this._translate('folders', 'folders') + ', ' + this._filecount + ' ' + this._translate('files', 'files') + ')</li>').appendTo($pathway);

                // get base list width
                var w = $pathway.outerWidth(true);

                if (dir) {
                    var x = 1,
                        parts = dir.split('/');

                    $.each(parts, function (i, s) {
                        var path = s;

                        if (i > 0) {
                            path = parts.slice(0, i + 1).join('/');
                        }

                        var $item = $('<li title="' + s + '"></li>').on('click', function (e) {
                            self._changeDir(path);
                        }).append('<a>' + s + '</a>').insertBefore($count);

                        // add item width
                        w += $item.outerWidth(true);

                        if (w > sw) {
                            $('li', $pathway).eq(x++).addClass('uk-breadcrumb-truncate');
                        }
                    });
                }
            },

            /**
             * Get the parent directory
             * @return {String} s The parent/previous directory.
             */
            _getPreviousDir: function () {
                if (this._dir.length < 2) {
                    return this._dir;
                }

                var dirs = this._dir.split('/');
                var s = '';

                for (var i = 0; i < dirs.length - 1; i++) {
                    s = Wf.String.path(s, dirs[i]);
                }

                return s;
            },

            /**
             * Add an item to the returnedItems array
             * @return {Object} file The item.
             */
            _addReturnedItem: function (items) {
                if ($.type(items) == 'array') {
                    $.merge(this._returnedItems, items);
                } else {
                    this._returnedItems.push(items);
                }
            },

            /**
             * Setup the returned file after upload
             * @param {String} file The returning file name.
             */
            _returnFile: function (file) {
                this._addReturnedItem({
                    name: Wf.String.basename(file)
                });

                this._changeDir(Wf.String.dirname(file));
            },

            /**
             * Set the current directory
             * @param {String} dir
             */
            _setDir: function (dir) {
                this._dir = '' + dir;
            },

            /**
             * Get the base directory
             */
            getBaseDir: function () {
                return this.options.dir;
            },

            /**
             * Get the current directory
             */
            getCurrentDir: function () {
                return this._dir;
            },

            /**
             Determine whether current directory is root
             */
            _isRoot: function () {
                var s = this._dir;

                // remove slashes
                s = this._trimPath(s);

                return s === '';
            },

            /**
             * Change Directory
             * @param {String} dir
             */
            _changeDir: function (dir) {
                this._reset();
                this._limitcount = 0;
                this._setDir(dir);

                // show loading message
                this._setLoader();

                this._getList(dir);
            },

            _setState: function (name, state) {
                if (this.options.use_state_cookies) {
                    Wf.Storage.set("wf_" + Wf.getName() + '_' + name, state);
                }
            },

            _getState: function (name, def, callback) {
                if (!this.options.use_state_cookies) {
                    return def;
                }

                callback = callback || function (val) {
                    return val;
                };

                return Wf.Storage.get('wf_' + Wf.getName() + '_' + name, def, callback);
            },

            /**
             * Retrieve a list of files and folders
             * @param {String} src optional src url eg: images/stories/fruit.jpg
             */
            _getList: function (src, filter) {
                // get path from src or stored directory
                var path = src || this._dir;

                // store directory in cookie
                if ((src || this._dir === '')) {
                    this._setState('dir', this._cleanPath(path));
                }

                // hide all buttons
                this._hideButtons($('.button', '#buttons'));

                // get list limit
                this._limit = parseInt($('#browser-list-limit-select').val(), 10);

                // get sort value
                var sort = this._sortValue || '';

                var method = 'getItems';

                if (filter) {
                    method = 'searchItems';
                }

                // send request
                Wf.JSON.request(method, [path, this._limit, this._limitcount, filter || '', sort], this._loadList, this);
            },

            clearQuery: function () {
                $('#search').val('');
                this._searchQuery = '';
            },

            /**
             * Refresh the file list
             */
            refresh: function (e) {
                this._reset();

                this.targetElement = null;

                // show loading message
                this._setLoader();

                // event triggered refresh
                if (typeof e !== 'undefined') {
                    this.clearQuery();

                    $('form').append('<input type="hidden" name="refresh" value="1" />');
                    this._refreshTree();
                }

                // get list from server with query if set
                this._getList('', this._searchQuery);
            },

            /**
             * Load the browser list
             */
            load: function (items) {
                var self = this, src = "";

                // add returned items
                if (items) {
                    if ($.type(items) == 'string') {
                        items = [items];
                    }

                    $.each(items, function (i, item) {
                        if ($.type(item) == 'string') {
                            item = { name: item };
                        }

                        self._addReturnedItem(item);

                        // pass value of first item to src
                        if (i == 0) {
                            src = item.name;
                        }
                    });
                }

                // show loading message
                this._setLoader();

                this._getList(src);
            },

            /**
             * Show an error message
             */
            error: function (error) {
                this._raiseError(error);
            },

            startUpload: function () {
                $('#upload-queue').uploader('start');
            },

            stopUpload: function () {
                $('#upload-queue').uploader('stop');
            },

            setUploadStatus: function (o) {
                $('#upload-queue').uploader('setStatus', o);
            },

            /**
             * Load the file/folder list into the container div
             * @param {Object} The folder/file JSON object
             */
            _loadList: function (o) {
                var dir = '';

                $('input[name="refresh"]', 'form').remove();

                // data error...
                if (!o) {
                    // reset state
                    this.setStatus({
                        message: '',
                        state: ''
                    });

                    return false;
                }

                this._foldercount = o.total.folders;
                this._filecount = o.total.files;

                $('.limit-right li, .limit-left li', '#browser-list-limit').addClass('uk-invisible').attr('aria-hidden', true);

                if (this._limit) {
                    this._limitend = (o.total.folders + o.total.files) - this._limit;
                    var count = this._limitcount + o.folders.length + o.files.length;

                    if (count < (o.total.folders + o.total.files)) {
                        $('.limit-right li', '#browser-list-limit').removeClass('uk-invisible').attr('aria-hidden', false);
                    } else {
                        $('.limit-right li', '#browser-list-limit').addClass('uk-invisible').attr('aria-hidden', true);
                    }

                    if ((count - this._limit) > 0) {
                        $('.limit-left li', '#browser-list-limit').removeClass('uk-invisible').attr('aria-hidden', false);
                    } else {
                        $('.limit-left li', '#browser-list-limit').addClass('uk-invisible').attr('aria-hidden', true);
                    }
                }

                if (!this._searchQuery) {
                    $.each([].concat(o.folders, o.files), function (i, item) {
                        if (item.id) {
                            dir = Wf.String.encodeURI(Wf.String.dirname(item.id) || '/', true);
                            return false;
                        }
                    });

                    if (dir) {
                        this._setDir(dir);
                    }
                }

                // Add folder-up button
                if (!this._isRoot()) {
                    $('#folder-list').append('<li class="folder-up" title="Up"><a href="#">...</a></li>');

                    if (this._treeLoaded()) {
                        $('#tree-body').trigger('tree:createnode', [o.folders, this._dir]);

                        /// don't scroll on tree click
                        if ($(this.actionTarget).is('[role="treeitem"]') === false) {
                            $('#tree-body').trigger('tree:scroll', this._dir);
                        }
                    }
                }

                // Alternate loadList function
                this._trigger('onBeforeBuildList', null, o);

                // Build the file / folder list
                this._buildList(o);

                this._resetStatus();
                this._resetMessage();

                // Alternate loadList function
                this._trigger('onAfterBuildList', null, o);

                // select returned items
                if (this._returnedItems.length) {
                    this._findItem(this._returnedItems);
                    this._returnedItems = [];
                }

                // show paste button if files in 'clipboard'
                if (this._pasteitems) {
                    this._showPasteButton();
                }

                // trigger "load" event on browser list
                $('#browser-list').trigger('load');

                this._trigger('onListComplete');
            },

            /**
             * Execute a command
             * @param {String} The command name
             * @param {String} The command type
             * @param {String} The event that triggered the action
             */
            _execute: function (name, type, evt, options) {
                var self = this;
                var dir = this._dir;

                // remove slashes
                dir = this._trimPath(dir);

                var list = this._serializeSelectedItems();

                var site = Wf.getURI(true);

                var elements = '';

                if (this.options[name]) {
                    elements = this.options[name].elements || '';
                }

                switch (name) {
                    case 'help':
                        Wf.help();
                        break;
                    case 'insert':
                        this._trigger('onFileInsert', null, $('li.selected', '#item-list').get(0));
                        break;
                    case 'view':
                        var $item = $('li.selected.active:first', '#item-list');
                        var url = $item.data('url');
                        url = /http(s)?:\/\//.test(url) ? url : Wf.String.path(site, url);

                        // use preview url if available
                        if ($item.data('preview')) {
                            url = $item.data('preview');
                        }

                        var name = Wf.String.basename($item.attr('title'));

                        if (this._isViewable(name)) {
                            if (/\.(jpeg|jpg|gif|png|webp|svg|apng|avi|wmv|wm|asf|asx|wmx|wvx|mov|qt|mpg|mp3|mp4|m4v|mpeg|ogg|ogv|webm|swf|flv|f4v|xml|dcr|rm|ra|ram|divx|pdf)/i.test(name)) {

                                var args = { width: $item.data('width') || 0, height: $item.data('height') || 0 };

                                Wf.Modal.media(name, url, args);
                            } else {
                                Wf.Modal.iframe(name, url, {
                                    onFrameLoad: function (e) {
                                        var iframe = $('div.iframe-preview iframe').get(0);
                                        var h = iframe.contentWindow.document.body.innerHTML;
                                        var tmpDiv = document.createElement('div');

                                        $(tmpDiv).html(h);

                                        function toRelative(s) {
                                            s = Wf.URL.toRelative(s);
                                            return s.replace(/^administrator\//, '');
                                        }

                                        $('img, embed', $(tmpDiv)).each(function () {
                                            var s = toRelative($(this).attr('src'));

                                            if (!/http(s)?:\/\//.test(s)) {
                                                s = Wf.String.path(site, s);
                                            }
                                            $(this).attr('src', s);
                                        });

                                        $('a, area', $(tmpDiv)).each(function () {
                                            var s = toRelative($(this).attr('href'));

                                            if (!/http(s)?:\/\//.test(s)) {
                                                s = Wf.String.path(site, s);
                                            }
                                            $(this).attr('href', s);
                                        });

                                        $('object', $(tmpDiv)).each(function () {
                                            $('param[name=movie], param[name=src]', this).each(function () {
                                                var s = toRelative($(this).attr('value'));
                                                if (!/http(s)?:\/\//.test(s)) {
                                                    s = Wf.String.path(site, s);
                                                }
                                                $(this).attr('value', s);
                                            });

                                        });

                                        iframe.contentWindow.document.body.innerHTML = tmpDiv.innerHTML;
                                    }
                                });
                            }
                        }
                        break;
                    case 'upload':
                         // clear query
                        this.clearQuery();
                    
                        var uploadModal = Wf.Modal.upload($.extend({
                            elements: elements,
                            open: function () {
                                /**
                                 * Private internal function
                                 * Check file name against list
                                 * @param {Object} name File name
                                 */
                                function _checkName(file) {
                                    var found = false,
                                        msg = self._translate('file_exists_alert', 'A file with the same name exists in the target folder.');
                                    var name = Wf.String.safe(file.name, self.options.websafe_mode, self.options.websafe_spaces, self.options.websafe_textcase);

                                    $('li', 'file-list').each(function () {
                                        if (name == $(this).attr('title')) {
                                            found = true;
                                        }
                                    });

                                    var el = file.element,
                                        span = $('span.queue-name:first', el);

                                    if (found) {
                                        if (!$(el).hasClass('exists')) {
                                            $(el).addClass('exists');
                                            $(span).attr('title', name + '::' + msg);

                                            $(span).tips();
                                        }
                                    } else {
                                        if ($(el).hasClass('exists')) {
                                            $(el).removeClass('exists');

                                            $(span).attr('title', name);
                                        }
                                    }

                                    return true;
                                }

                                // Initialize uploader
                                $('#upload-queue').uploader($.extend({
                                    url: document.location.href,
                                    field: $('input[type="file"]:first'),
                                    websafe_mode: self.options.websafe_mode,
                                    websafe_spaces: self.options.websafe_spaces,
                                    websafe_textcase: self.options.websafe_textcase
                                }, self.options.upload)).on('uploadwidget:filerename', function (e, file) {
                                    return _checkName(file);
                                }).on('uploadwidget:filecomplete', function (e, file, item) {
                                    self._addReturnedItem(item);
                                    self._trigger('onUploadFile', null, file);

                                }).on('uploadwidget:uploadstart', function (e, file) {
                                    // add file specific upload data
                                    file.data = $(':input[name]:enabled', file.element).map(function () {
                                        return { name: this.name, value: this.value };
                                    });

                                    // disable fields
                                    $(':input[name]:enabled', file.element).prop('disabled', true);

                                }).on('uploadwidget:uploadcomplete', function (e, errors) {
                                    $('#upload-submit').disabled = false;

                                    if (!errors) {
                                        // Refresh file list
                                        self._getList();

                                        window.setTimeout(function () {
                                            $(uploadModal).trigger('modal.close');
                                        }, 1000);

                                        self._trigger('onUploadComplete');
                                    }
                                });

                                self._trigger('onUploadOpen');
                            },
                            upload: function () {
                                // get form data
                                var serialized = $(':input[name]:enabled', '#upload-body').map(function () {
                                    return { name: this.name, value: this.value };
                                });

                                var fields = $.merge($('form > :input:enabled').serializeArray(), serialized);

                                // set current directory
                                fields.push({
                                    "name": "upload-dir",
                                    "value": dir
                                });

                                self._trigger('onUpload', null, [fields]);

                                // trigger the upload, with data
                                $('#upload-queue').trigger('uploadwidget:upload', [fields]);

                                return false;
                            },
                            close: function () {
                                $('#upload-queue').trigger('uploadwidget:close');
                            }
                        }, self.options.upload.dialog));
                        break;
                    case 'folder_new':
                        Wf.Modal.prompt(self._translate('folder_new', 'New Folder'), function (v, args) {
                            if (v) {
                                self._setLoader();

                                v = Wf.String.safe(v, self.options.websafe_mode, self.options.websafe_spaces, self.options.websafe_textcase);
                                args = [dir, v].concat(args || []);

                                Wf.JSON.request('folderNew', args, function (o) {
                                    if (o) {

                                        // only create in root
                                        if (self._isRoot()) {
                                            $('#tree-body').trigger('tree:createnode', [o.folders, self._dir]);
                                        }

                                        self._trigger('onFolderNew');
                                    }

                                    self.refresh();
                                });
                            }
                        }, {
                            elements: elements,
                            label: {
                                'confirm': self._translate('create', 'Create')
                            },
                            validate: function (value) {
                                if (!value) {
                                    return false;
                                }

                                return Wf.String.safe(value, self.options.websafe_mode, self.options.websafe_spaces, self.options.websafe_textcase);
                            }
                        });
                        break;

                    // Cut / Copy operation
                    case 'copy':
                    case 'cut':
                        if (name === 'copy' && (evt.metaKey || evt.ctrlKey)) {
                            var items = this.getSelectedItems(), clip = [];

                            $.each(items, function () {
                                if (!$(this).hasClass('file')) {
                                    return true;
                                }

                                var url = $(this).data('url');

                                if (url.indexOf('://') === -1) {
                                    url = Wf.String.path(site, url);
                                    url = Wf.URL.toAbsolute(url);
                                }

                                if (url) {
                                    clip.push(url);
                                }
                            });

                            if (clip.length) {
                                var inp = document.createElement('input'), val = clip.join(',');

                                $(inp).css({ 'position': 'absolute', 'left': -9999 }).attr('readonly', true).appendTo('body').val(val).focus();

                                if (inp.select) {
                                    inp.select();

                                    try {
                                        // copy text
                                        document.execCommand('copy');
                                    } catch (err) {
                                        // error
                                    }
                                }

                                $(inp).remove();
                            }

                            evt.preventDefault();

                            return;
                        }

                        this._pasteaction = name;
                        this._pasteitems = list;

                        this._showPasteButton();

                        break;

                    // Paste the file
                    case 'paste':
                         // clear query
                        this.clearQuery();
                    
                        var fn = (this._pasteaction == 'copy') ? 'copyItem' : 'moveItem';
                        this._setLoader();

                        var items = this._pasteitems.split(',');

                        // eslint-disable-next-line no-case-declarations
                        function callback(o, dir) {
                            if (o.folders.length) {
                                // remove from tree
                                if (self._treeLoaded()) {
                                    // remove existing items
                                    $.each(items, function (i, item) {
                                        if (fn == 'moveItem') {
                                            $('#tree-body').trigger('tree:removenode', [item]);
                                        }
                                    });

                                    var folders = $.map(o.folders, function (item, i) {
                                        var name = item.name;

                                        return {
                                            "id": name,
                                            "name": Wf.String.basename(name)
                                        };
                                    });

                                    // create new items
                                    $('#tree-body').trigger('tree:createnode', [folders, dir]);
                                }
                            }
                        }

                        $.each(items, function (i, item) {
                            var complete = i === items.length - 1;

                            Wf.JSON.request(fn, [item, dir], function (o) {
                                if (o) {
                                    if (o.confirm) {
                                        var confirmCallback = function (state) {
                                            Wf.JSON.request(fn, [item, dir, state], function (o) {
                                                if (o && !o.error) {
                                                    callback(o, dir);
                                                }
                                            });
                                        };

                                        Wf.Modal.confirm(
                                            self._translate('paste_item_confirm', 'An item with the same name already exists in this folder. Do you want to replace it with the one you’re pasting?'),
                                            confirmCallback,
                                            {
                                                header: false,
                                                close: function () {
                                                    if (complete) {
                                                        self._clearPaste();
                                                        self.refresh();
                                                    }
                                                },
                                                buttons: [
                                                    {
                                                        text: self._translate('cancel', 'Cancel'),
                                                        icon: 'uk-icon-close',
                                                        attributes: {
                                                            "class": "uk-modal-close"
                                                        }
                                                    },
                                                    {
                                                        text: self._translate('paste_keep_both', 'Keep Both'),
                                                        icon: 'uk-icon-copy',
                                                        click: function (e) {
                                                            // execute callback
                                                            confirmCallback.call(this, 'copy');
                                                        },
                                                        attributes: {
                                                            "type": "submit",
                                                            "class": "uk-button-success uk-modal-close"
                                                        }
                                                    },
                                                    {
                                                        text: self._translate('paste_replace', 'Replace'),
                                                        icon: 'uk-icon-check',
                                                        click: function (e) {
                                                            // execute callback
                                                            confirmCallback.call(this, 'replace');
                                                        },
                                                        attributes: {
                                                            "type": "submit",
                                                            "class": "uk-button-primary uk-modal-close",
                                                            "autofocus": true
                                                        }
                                                    }
                                                ]
                                            }
                                        );
                                    } else {
                                        callback(o, dir);

                                        if (complete) {
                                            self._clearPaste();
                                            self.refresh();
                                        }

                                        var result = o.folders.length ? o.folders[0].name : o.files[0].name;

                                        self._trigger('onPaste', [fn, item, result]);
                                    }
                                } else {
                                    if (complete) {
                                        self._clearPaste();
                                        self.refresh();
                                    }
                                }
                            }, self, true);
                        });

                        break;

                    // Delete a file or folder
                    case 'delete':
                        var msg = self._translate('delete_item_alert', 'Delete Selected Item(s)');

                        Wf.Modal.confirm(msg, function (state) {
                            if (state) {
                                self._setLoader();
                                Wf.JSON.request('deleteItem', list, function (o) {
                                    if (o) {
                                        if (o.folders.length) {
                                            // remove from tree
                                            if (self._treeLoaded()) {
                                                $.each(o.folders, function (i, item) {
                                                    $('#tree-body').trigger('tree:removenode', [item]);
                                                });
                                            }
                                            self._trigger('onFolderDelete', null, o.folders);
                                        }

                                        if (o.files.length) {
                                            self._trigger('onFileDelete', null, o.files);
                                        }
                                    }
                                    self.refresh();
                                });
                            }
                        }, {
                            label: {
                                'confirm': self._translate('delete', 'Delete'),
                                'cancel': self._translate('cancel', 'Cancel')
                            },
                            header: false
                        });
                        break;

                    // Rename a file or folder
                    case 'rename':
                        var s = this.getSelectedItems(0);
                        var v = Wf.String.basename(list);
                        var ext;

                        if ($(s).hasClass('file')) {
                            // get and store extension
                            ext = Wf.String.getExt(v);
                            // get the filename
                            v = Wf.String.filename(v);
                        }

                        var renameModal = Wf.Modal.prompt('Rename', function (name, args) {
                            name = Wf.String.safe(name, self.options.websafe_mode, self.options.websafe_spaces, self.options.websafe_textcase);

                            if (v === name) {
                                Wf.Modal.alert(self._translate('rename_item_name_new', 'Please specify a new name for the item'));
                                return false;
                            }

                            Wf.Modal.confirm(self._translate('rename_item_alert', 'Renaming files/folders will break existing links. Continue?'), function (state) {
                                if (state) {
                                    self._setLoader();

                                    args = [list, name].concat(args || []);

                                    Wf.JSON.request('renameItem', args, function (o) {
                                        if (o) {
                                            self._reset();

                                            var item = Wf.String.path(self._dir, name);

                                            // folder rename successful
                                            if (o.folders.length) {
                                                // rename in tree
                                                if (self._treeLoaded()) {
                                                    $('#tree-body').trigger('tree:renamenode', [list, item]);
                                                }

                                                self._trigger('onFolderRename', [list, item]);
                                            }

                                            // add extension to file name
                                            if (ext) {
                                                item = item + '.' + ext;
                                            }

                                            // file rename successful
                                            if (o.files.length) {
                                                self._trigger('onFileRename', [list, item]);
                                            }

                                            if (item) {
                                                self._addReturnedItem({
                                                    name: item
                                                });
                                            }
                                        }
                                        self.refresh();
                                    });

                                    // close modal
                                    $(renameModal).trigger('modal.close');
                                } else {
                                    $(renameModal).trigger('modal.close');
                                }
                            });
                        }, {
                            value: v,
                            header: false,
                            label: {
                                'confirm': self._translate('rename', 'Rename')
                            },
                            elements: elements,
                            close_on_submit: false,
                            validate: function (value) {
                                if (!value) {
                                    return false;
                                }

                                return Wf.String.safe(value, self.options.websafe_mode, self.options.websafe_spaces, self.options.websafe_textcase);
                            }
                        });
                        break;
                    case 'custom':
                        var dialog = options.dialog, action = options.action || null;

                        Wf.Modal.custom(dialog.title, function (args) {
                            args = [list].concat(args || []);
                            
                            Wf.JSON.request(action, args, function (o) {
                                self.refresh();
                            });
                        }, {
                            elements: dialog.elements
                        });

                        break;
                }
            },

            /**
             * Show an error dialog
             * @param {String} error
             */
            _raiseError: function (error) {
                var self = this,
                    err = '';

                switch ($.type(error)) {
                    case 'array':
                        err += '<ul class="error-list">';
                        $.each(error, function (k, v) {
                            err += '<li>' + v + '</li>';
                        });

                        err += '</ul>';
                        break;
                    case 'string':
                    default:
                        err = error;
                        break;
                }

                this._dialog.alert = Wf.Modal.alert(err, {
                    close: function () {
                        self.refresh();
                    }

                });
            },

            /**
             * Add an array of actions
             * @param {Object} actions
             */
            _addActions: function (actions) {
                var self = this;

                $.each(actions, function (i, action) {
                    self._addAction(action);
                });

            },

            /**
             * Add an action to the Manager
             * @param {Object} options
             */
            _addAction: function (o) {
                var self = this,
                    name = o.name || '',
                    fn = this._execute;

                if (o.action) {
                    fn = o.action;
                }

                var map = {
                    'folder_new': 'folder-plus',
                    'upload': 'cloud-upload',
                    'help': 'question-circle'
                };

                // normalise class name
                var cls = name.replace(/_/g, '-');

                // create anchor element
                var action = document.createElement('button');

                $(action).addClass('action uk-button');

                if (name) {
                    $(action).attr({
                        'id': name,
                        'title': o.title,
                        'aria-label': o.title
                    }).addClass(cls).append('<label id="' + name + '_label" class="uk-text uk-hidden-mini">&nbsp;' + o.title + '</label>');

                    var icon = (map[name] || name);

                    $.each(icon.split(' '), function (i, k) {
                        $(action).prepend('<i class="uk-icon uk-icon-small uk-icon-' + cls + ' uk-icon-' + k + '"></i>');
                    });

                    // stack icons
                    if (icon.indexOf(' ') >= 0) {
                        $('.uk-icon', action).first().addClass('uk-icon-stack uk-text-contrast').removeClass('uk-icon-medium');
                        $('<span class="uk-stack uk-stack-medium"></span>').prependTo(action).append($('.uk-icon', action));
                    }

                    if (o.name) {
                        $(action).on('mousedown.action', function (e) {
                            e.preventDefault();
                            e.stopImmediatePropagation();

                            if ($.type(fn) == 'function') {
                                return fn.call(self, name);
                            }

                            return self._trigger(fn, name);
                        });
                    }

                    this._actions[name] = action;
                }

                $('#browser-actions').append(action);
            },

            /**
             * Get an action by name
             * @param {String} name
             */
            _getAction: function (name) {
                return this._actions[name];
            },

            /**
             * Add an array of buttons to the Manager
             * @param {Object} buttons
             */
            _addButtons: function (buttons) {
                var self = this;

                if (buttons) {
                    if (buttons.folder) {
                        $.each(buttons.folder, function (i, button) {
                            if (button) {
                                self._addButton(button, 'folder');
                            }
                        });
                    }

                    if (buttons.file) {
                        $.each(buttons.file, function (i, button) {
                            if (button) {
                                self._addButton(button, 'file');
                            }
                        });
                    }
                }
            },

            /**
             * Add a button to the Manager
             * @param {Object} o Button Object
             * @param {String} type
             */
            _addButton: function (o, type) {
                var self = this,
                    fn = this._execute;

                if (o.action) {
                    fn = o.action;
                }

                var map = {
                    'delete': 'trash',
                    'cut': 'cut',
                    'copy': 'copy',
                    'paste': 'paste',
                    'rename': 'edit',
                    'preview': 'preview',
                    'view': 'preview',
                    'image-editor': 'crop',
                    'text-editor': 'file-xml'
                };

                // only create button type once
                var button = $('button.' + o.name, $('#browser-buttons'));

                if (!button.length) {
                    button = document.createElement('button');

                    $(button).attr({
                        'title': o.title,
                        'aria-label': o.title
                    });

                    var name = o.name.replace(/_/g, '-');

                    if (o.icon) {
                        var icons = o.icon.split(' ');

                        $.each(icons, function (i, icon) {
                            $(button).append('<i class="uk-icon uk-icon-' + (map[icon] || icon) + '"></i>');
                        });

                        if (icons.length > 1) {
                            $('<span class="uk-stack"></span>').append($('.uk-icon', button)).appendTo(button);
                        }
                    } else {
                        $(button).prepend('<i class="uk-icon uk-icon-' + (map[name] || name) + '"></i>');
                    }

                    if (name) {
                        $(button).on('mousedown.button', function (evt) {
                            evt.preventDefault();
                            evt.stopPropagation();

                            if ($('li.selected', '#item-list').length || self._pasteitems) {
                                if (o.sticky) {
                                    $(button).toggleClass('uk-active');
                                }

                                if (o.dialog) {
                                    return self._execute('custom', type, evt, o);
                                }

                                if ($.type(fn) == 'function') {
                                    return fn.call(self, name, type, evt);
                                }

                                return self._trigger(fn, type);
                            }
                        });

                    }

                    $('#browser-buttons').append(button);
                    $(button).addClass('uk-button uk-button-link button ' + o.name + ' uk-hidden');
                }

                this._buttons[type][o.name] = {
                    'name': o.name,
                    'element': button,
                    'trigger': o.trigger,
                    'multiple': o.multiple,
                    'single': $.type(o.single) === 'undefined' ? true : o.single,
                    'restrict': o.restrict || '',
                    'sticky': o.sticky
                };
            },

            /**
             * Hide all buttons
             */
            _hideAllButtons: function () {
                var self = this;

                $('.button', '#browser-buttons').each(function () {
                    self._hideButton(this);
                });

            },

            /**
             * Hide buttons by type
             * @param {String} type The button type
             */
            _hideButtons: function (buttons) {
                var self = this;

                $.each(buttons, function (i, button) {
                    self._hideButton(button);
                });

            },

            /**
             * Hide a button
             * @param {String} button The button to hide
             */
            _hideButton: function (button) {
                $(button).addClass('uk-hidden').attr('aria-hidden', true);
            },

            /**
             * Show all buttons
             * @param {String} type The button type to show
             */
            _showButtons: function () {
                var self = this;

                this._hideAllButtons();

                var folder = $('li.folder.selected', '#item-list');
                var file = $('li.file.selected', '#item-list');

                // multiple type selection
                if (file.length && folder.length) {
                    var buttons = {};

                    var filebtns = this._buttons.file;
                    var folderbtns = this._buttons.folder;

                    $.each(filebtns, function (k, o) {
                        if (!o.trigger && o.multiple) {
                            if (folderbtns[k]) {
                                buttons[k] = o;
                            }
                        }
                    });

                    $.each(folderbtns, function (k, o) {
                        if (!o.trigger && o.multiple) {
                            if (filebtns[k]) {
                                buttons[k] = o;
                            }
                        }
                    });

                    $.each(buttons, function (k, o) {
                        self._showButton(o.element, o.single, true);
                    });

                } else {
                    // set folder as default type
                    var type = file.length ? 'file' : 'folder';

                    $.each(this._buttons[type], function (k, o) {
                        if (!o.trigger && !o.restrict) {
                            self._showButton(o.element, o.single, o.multiple);
                        }

                        if (o.restrict) {
                            var re = o.restrict.split(',').join('|');
                            var item = self.getSelectedItems(0);

                            if (new RegExp('\\.(' + re + ')$', 'i').test($(item).attr('title'))) {
                                self._showButton(o.element, o.single, o.multiple);
                            }
                        }
                    });
                }

                if (this._pasteitems) {
                    this._showPasteButton();
                }
            },

            /**
             * Show a button
             * @param {String} button The button to show
             * @param {Boolean} multiple Whether a button is a multiple selection action
             */
            _showButton: function (button, single, multiple) {
                if (button) {
                    var show = false,
                        n = $('li.selected', '#item-list').length;

                    if (n > 1) {
                        if (multiple) {
                            show = true;
                        }
                    } else {
                        if (single) {
                            show = true;
                        }
                    }

                    if (show) {
                        $(button).removeClass('uk-hidden').removeAttr('aria-hidden');
                    } else {
                        $(button).addClass('uk-hidden').attr('aria-hidden', false);
                    }
                }
            },

            /**
             * Get a button
             * @param {String} type The button type
             * @param {String} name The button name
             */
            _getButton: function (type, name) {
                return this._buttons[type][name] || null;
            },

            /**
             * Show the paste button
             */
            _showPasteButton: function () {
                this._showButton($('.button.paste', '#browser-buttons'), true, true);
            },

            /**
             * Determine whether an item is selected
             * @param {Object} el The list item
             */
            _isSelectedItem: function (el) {
                return $(el).is('li.selected');
            },

            /**
             * Deselect all list items
             */
            _deselectItems: function () {
                // deselect item and uncheck checkboxes
                $('li.selected', '#item-list').removeClass('selected active').find('input[type="checkbox"]').prop('checked', false);

                // empty text and comment
                $('#browser-details-text, #browser-details-comment').empty();

                $.each(['#browser-details-nav-left', '#browser-details-nav-right', '#browser-details-nav-text'], function (i, el) {
                    $(el).addClass('uk-invisible').attr('aria-hidden', true);
                });

                this._hideAllButtons();

                $('input[type="checkbox"]', '#check-all').prop('checked', false);
            },

            /**
             * Select an array of items
             * @param {Array} items The array of items to select
             * @param {Boolean} show Show item properties
             */
            _selectItems: function (items, show) {
                $(items).addClass('selected').find('input[type="checkbox"]').prop('checked', true);

                if (show) {
                    this._showSelectedItems();
                }

                var $list = $('#item-list');

                if ($('input:checked', $list).length === $('li', $list).length) {
                    $('input[type="checkbox"]', '#check-all').prop('checked', true);
                }

                this._trigger('onSelectItems', null, items);
            },

            /**
             * Remove items from a selection
             * @param {Array} el Array of elements to remove
             * @param {Boolean} show Show remaining item properties
             */
            _removeSelectedItems: function (items, show) {
                $(items).removeClass('selected active').find('input[type="checkbox"]').prop('checked', false);

                if (show) {
                    this._showSelectedItems();
                }

                this._trigger('onRemoveItems', null, items);
            },

            /**
             * Return selected items by key or all selected items
             * @param {String} key Item key
             */
            getSelectedItems: function (key) {
                var $items = $('li.selected', '#item-list');

                if (typeof key === 'number') {
                    return $items[key] || $items;
                }

                return $items;
            },

            /**
             * Return selected items by key or all selected items
             * @param {Array} items Array of items to select
             */
            setSelectedItems: function (items) {
                this._findItem(items);
            },

            /**
             * Process a selection click
             * @param {String} e The click event.
             * @param {Boolean} multiple Allow multiple selections.
             */
            _setSelectedItems: function (e, multiple) {
                var checkbox = false;

                // the selected element
                var el = e.target;
                // cache list
                var $list = $('#item-list');

                if (e.type === 'keydown') {
                    // element is probably parent ul, so get last selected item
                    el = $('li.selected:last', $list).get(0);

                    $list = $('#browser-list');

                    // change target for keydown
                    if (e.which == 38) {
                        el = el.previousSibling;
                    }

                    if (e.which == 40) {
                        el = el.nextSibling;
                    }

                    if (!el) {
                        return;
                    }

                    if (el.offsetTop > $list.innerHeight() || el.offsetTop < $list.scrollTop()) {
                        $list.scrollTop((el.offsetTop + $(el).innerHeight()) - $list.height());
                    }
                }

                if ($(el).is('input[type="checkbox"]')) {
                    multiple = true;
                    checkbox = true;

                    el = $(el).parents('li').get(0);
                }

                // If not li element, must be a so get parent li
                if (el.nodeName != 'LI') {
                    el = el.parentNode;
                }

                var selected = $('li.selected', $list);

                // Prevent double clicking
                if (this._isSelectedItem(el) && selected.length === 1) {
                    e.preventDefault();
                    return false;
                }

                // Get items
                var items = $('li.folder, li.file', $list);
                // get key
                var ctrl = (e.ctrlKey || e.metaKey),
                    shift = e.shiftKey;

                // Single click
                if (!ctrl && !shift && !checkbox || !multiple) {
                    // uncheck all boxes
                    $(el).find('input[type="checkbox"]').prop('checked', false);

                    // deselect all
                    this._deselectItems();

                    // select item
                    this._selectItems([el], true);

                    // ctrl & shift
                } else if (multiple && (ctrl || shift || checkbox)) {
                    // ctrl
                    if (ctrl || checkbox) {
                        if (this._isSelectedItem(el)) {
                            this._removeSelectedItems([el], true);
                        } else {
                            this._selectItems([el], true);
                        }
                    }

                    // shift
                    if (shift) {
                        if (selected.length) {
                            // selected item index
                            var si = $(selected).index();
                            // click item index
                            var ci = $(el, items).index();
                            var selection = [];

                            // Clear selection
                            this._deselectItems();

                            // Clicked item further up list than selected item
                            if (ci > si) {
                                for (var i = ci; i >= si; i--) {
                                    selection.push(items[i]);
                                }
                            } else {
                                // Clicked item further down list than selected item
                                for (var i = si; i >= ci; i--) {
                                    selection.push(items[i]);
                                }
                            }
                            this._selectItems(selection, true);
                        } else {
                            this._selectItems([el], true);
                        }
                    }
                }
            },

            /**
             * Show the selected items' details
             */
            _showSelectedItems: function () {
                var $items = $('li.selected', '#item-list'),
                    n = $items.length;

                // reset if no selection
                if (!n) {
                    this._reset();
                } else {
                    // make the first item active
                    $items.first().addClass('active');

                    this._showItemDetails();
                }
            },

            /**
             * Find a select an item (file) by name, id or url
             * @param {String} name The file name.
             */
            _findItem: function (files, type) {
                var self = this,
                    items = [];
                type = type || 'file';

                if ($.type(files) == 'string') {
                    files = [files];
                }

                var insert = false;
                var $list = $('#item-list');

                var base = self.getBaseDir();

                $.each(files, function (i, file) {
                    if (file && file.name) {
                        var name = decodeURIComponent(file.name);

                        if ($list.length) {
                            var item = [];

                            // find item from name, id or data-url
                            item = $('li.' + type + '[title="' + Wf.String.basename(name) + '"], li.' + type + '[data-url="' + Wf.String.path(base, name) + '"]', $list);

                            if (item.length) {
                                if (file.insert) {
                                    insert = true;
                                    items = item;

                                    self.serializeItemData(item).then(function (data) {
                                        self._trigger('onFileClick', [item, data]);
                                    });
                                }

                                if (!insert) {
                                    $.merge(items, item);
                                }
                            }
                        }
                    }
                });

                if (items.length) {

                    var h = $(items).first().outerHeight() + $('.folder-up').outerHeight();
                    var top = $(items).get(0).offsetTop - h;

                    $('#browser-list').animate({
                        scrollTop: Math.round(top)
                    }, 1500, function () {
                        $(this).off(scrollEvents);
                    });
                }

                // Select items and display properties
                this._selectItems(items, true);
            },

            serializeItemData: function (item) {
                var self = this;

                return new Promise(function (resolve, reject) {
                    var props = {};

                    $.each(['url', 'preview', 'width', 'height', 'description', 'modified', 'size'], function (i, key) {
                        props[key] = $(item).attr('data-' + key) || '';
                    });

                    // get title from element attribute
                    props.title = $(item).attr('title');

                    // get item basename
                    props.title = Wf.String.basename(props.title);

                    if (props.url) {
                        resolve(props);
                    } else {
                        var path = Wf.String.path(self._dir, props.title);

                        Wf.JSON.request('getFileDetails', [path], function (o) {
                            if (o && !o.error) {
                                props = $.extend(props, o);
                            }

                            resolve(props);
                        });
                    }
                });
            },

            /**
             * Serialize the current item selection, add current dir to path
             */
            _serializeSelectedItems: function () {
                var self = this;

                return $('li.selected', '#item-list').map(function () {
                    return Wf.String.path(self._dir, $(this).attr('title'));
                }).get().join(',');

            },

            /**
             * Show a file /folder properties / details
             */
            _showItemDetails: function () {
                var self = this,
                    $items = $('li.selected', '#item-list'),
                    n = $items.length;
                var $nav = $('#browser-details-nav');

                // show navigation buttons
                if (n > 1) {

                    // get active item index
                    var index = $items.index($items.filter('.active'));

                    if (index) {
                        $('.details-nav-left', $nav).removeClass('uk-invisible').attr('aria-hidden', false);
                    } else {
                        $('.details-nav-left', $nav).addClass('uk-invisible').attr('aria-hidden', true);
                    }

                    if (index + 1 < n) {
                        $('.details-nav-right', $nav).removeClass('uk-invisible').attr('aria-hidden', false);
                    } else {
                        $('.details-nav-right', $nav).addClass('uk-invisible').attr('aria-hidden', true);
                    }

                    $('.details-nav-text', $nav).removeClass('uk-invisible').html(function () {
                        return self._translate('one_of_many', '%o of %m').replace('%o', index + 1).replace('%m', n);
                    });

                    // hide navigation buttons
                } else {
                    $('li', $nav).addClass('uk-invisible').attr('aria-hidden', true);
                }

                // show relevant buttons
                this._showButtons();

                // get item details
                this._getItemDetails();
            },

            _getDimensions: function (file) {
                var img = new Image();

                if (!$(file).data('preview')) {
                    return;
                }

                var src = $(file).data('preview');

                $(file).addClass('loading disabled').children('span.checkbox').addClass('disabled');

                img.onload = function () {
                    $(file).attr({
                        'data-preview': src,
                        'data-width': img.width,
                        'data-height': img.height
                    });

                    $(file).removeClass('loading disabled').children('span.checkbox').removeClass('disabled');
                };

                img.onerror = function () {
                    $(file).removeClass('loading disabled').children('span.checkbox').removeClass('disabled');
                };

                img.src = src;
            },

            _getMediaProps: function (file) {
                return new Promise(function (resolve, reject) {
                    if (!file.type) {
                        return reject();
                    }

                    if (file.type === "video" && /\.(mp4|m4v|ogg|ogv|webm)$/i.test(file.preview) && $.support.video) {
                        var props = {}, video = document.createElement('video');

                        video.onloadedmetadata = function () {
                            props = {
                                "duration": parseInt(video.duration / 60, 10) + ':' + parseInt(video.duration % 60, 10),
                                "width": video.videoWidth,
                                "height": video.videoHeight
                            };

                            video = null;
                            resolve(props);
                        };

                        video.src = file.preview;

                    } else if (file.type === "audio" && /\.(mp3|oga|ogg)$/i.test(file.preview) && $.support.audio) {
                        var props = {}, audio = document.createElement('audio');

                        audio.onloadedmetadata = function () {
                            props.duration = parseInt(audio.duration / 60, 10) + ':' + parseInt(audio.duration % 60, 10);

                            audio = null;
                            resolve(props);
                        };

                        audio.src = file.preview;

                    } else if (file.type === "video" && /\.(wmv|avi|mov)$/i.test(file.preview) && $.support.video) {
                        var props = {}, video = document.createElement('video');

                        document.body.appendChild(video);

                        video.style.position = 'absolute';
                        video.style.left = '-10000px';

                        var timer = setTimeout(function () {

                            if (video && video.clientWidth) {
                                props.duration = '';
                                props.width = video.clientWidth;
                                props.height = video.clientHeight;

                                clearTimeout(timer);
                                document.body.removeChild(video);
                                video = null;
                                resolve(props);
                            }
                        }, 100);

                        video.src = file.preview;
                    } else if (file.type === "image") {
                        var props = {}, image = new Image();

                        image.onload = function () {
                            props.width = image.width;
                            props.height = image.height;

                            resolve(props);
                        };

                        var src = Wf.String.encodeURI(file.preview) + '?' + new Date().getTime();

                        if (/:\/\//.test(file.preview) || file.preview.indexOf('?') !== -1) {
                            src = file.preview;
                        }

                        image.src = src;

                    } else {
                        reject();
                    }
                });
            },

            /**
             * Get a file or folder's properties
             */
            _getItemDetails: function () {
                var self = this,
                    mime;

                var item = $('li.selected.active', '#item-list');
                var title = Wf.String.basename($(item).attr('title'));
                var type = $(item).hasClass('folder') ? 'folder' : 'file';

                $('#browser-details-text').empty().addClass('loading');

                var path = Wf.String.path(this._dir, Wf.String.encodeURI(title));

                var name = title,
                    ext = '';

                $(self.element).next('span.loader').remove();

                if (type == 'file') {
                    name = Wf.String.stripExt(title);
                    ext = Wf.String.getExt(title);
                }

                // create properties list
                var info = document.createElement('div');
                $(info).addClass('uk-comment uk-height-1-1').append('<div class="uk-comment-header"><h5 class="uk-width-1-1 uk-margin-remove uk-text-bold uk-text-truncate" title="' + name + '">' + name + '</h5><div class="uk-comment-meta">' + ext + ' ' + self._translate(type, Wf.String.ucfirst(type)) + '</div><div class="uk-comment-meta" id="info-properties"><div></div>');

                // additional data for file items
                $(info).append('<div class="uk-comment-body uk-width-1-1 uk-text-center" id="info-preview"></div>');

                // remove the loader and append info
                $('#browser-details-text').removeClass('loading').empty().append(info);

                var comments = '';

                // check if item writable - show warning
                if ($(item).hasClass('notwritable')) {
                    comments +=
                        '<li class="comments ' + type + ' notwritable">' +
                        '<span class="hastip" title="' + self._translate('notwritable_desc', 'Unwritable') + '">' + self._translate('notwritable', 'Unwritable') + '</span>' +
                        '</li>';
                }

                // check if item websafe - show warning
                /*if ($(item).hasClass('notsafe')) {
                    comments +=
                        '<li class="comments ' + type + ' notsafe">' +
                        '<span class="hastip" title="' + self._translate('bad_name_desc', 'Bad file or folder name') + '">' + self._translate('bad_name', 'Bad file or folder name') + '</span>' +
                        '</li>';
                }*/

                // process triggered buttons
                if ($(item).data('trigger')) {
                    $.each($(item).data('trigger').split(','), function (i, v) {
                        if (v !== '') {
                            var button = self._getButton(type, v);

                            if (button) {
                                self._showButton(button.element, button.single, button.multiple);
                            }
                        }
                    });
                }

                // Size
                if ($(item).data('size')) {
                    $('.uk-comment-header', info).append('<div class="uk-comment-meta" id="info-size">' + tinyMCEPopup.getLang('dlg.size', 'Size') + ': ' + Wf.String.formatSize($(item).data('size')) + '</div>');
                }

                // Modified
                if ($(item).data('modified')) {
                    $('.uk-comment-header', info).append('<div class="uk-comment-meta" id="info-modified">' + tinyMCEPopup.getLang('dlg.modified', 'Modified') + ': ' + Wf.String.formatDate($(item).data('modified'), self.options.date_format) + '</div>');
                }

                // Permissions
                if ($(item).data('permissions')) {
                    $('.uk-comment-header', info).append('<div class="uk-comment-meta" id="info-permissions">' + tinyMCEPopup.getLang('dlg.permissions', 'Permissions') + ': ' + $(item).data('permissions') + '</div>');
                }

                if (comments) {
                    $('#browser-details-comment').empty().append('<ul>' + comments + '</ul>');
                }

                $('span.hastip', $('#browser-details-comment')).tips();

                if (type === "folder") {
                    self._trigger('onFolderDetails', null, item);
                } else {
                    // Process properties callback
                    self.serializeItemData(item).then(function (data) {

                        function callback(data) {
                            // Dimensions (will only apply to file items)
                            if (data.width && data.height) {
                                $('.uk-comment-header', info).append('<div class="uk-comment-meta" id="info-dimensions">' + self._translate('dimensions', 'Dimensions') + ': ' + data.width + ' x ' + data.height + '</div>');

                                // create thumbnail preview
                                if (mime && mime === "image") {
                                    $('#info-preview').empty().append('<img src="' + data.preview + '" alt="" />').removeClass('loading');
                                }
                            }

                            // Duration (will only apply to file items)
                            if (data.duration) {
                                $('.uk-comment-header', info).append('<div class="uk-comment-meta" id="info-duration">' + tinyMCEPopup.getLang('dlg.duration', 'Duration') + ': ' + data.duration + '</div>');
                            }

                            self._trigger('onFileDetails', [item, data]);
                        }

                        $.each(data, function (key, value) {
                            $(item).data(key, value);
                        });

                        // get mime type
                        mime = getMimeType(ext);

                        // only process mime-types that can have dimensions or duration
                        if (mime && /^(image|video|audio)$/.test(mime)) {
                            // check if image has dimensions
                            if (mime === "image") {
                                if (data.width && data.height) {
                                    return callback(data);
                                }
                            }
                            // check if video has dimensions and duration
                            if (mime === "video") {
                                if (data.width && data.height && data.duration) {
                                    return callback(data);
                                }
                            }
                            // check that audio has duration
                            if (mime === "audio") {
                                if (data.duration) {
                                    return callback(data);
                                }
                            }

                            self._getMediaProps({
                                "preview": data.preview,
                                "type": mime
                            }).then(function (o) {
                                $.each(o, function (key, value) {
                                    data[key] = value;
                                    $(item).data(data);
                                });

                                callback(data);
                            }, function () {
                                Wf.JSON.request('getDimensions', [path], function (o) {
                                    if (o && !o.error) {
                                        $.each(o, function (key, value) {
                                            data[key] = value;
                                            $(item).data(data);
                                        });
                                    }
                                    callback(data);
                                });
                            });
                        }
                    });
                }
            }
        };

        // jQuery hook
        $.fn.filebrowser = function (options) {
            $(this).addClass('filebrowser');

            var instance = new FileBrowser(this, options);

            $(this).on('filebrowser:insert', function (e, cb) {
                var selected = instance.getSelectedItems();

                var promises = [];

                $(selected).each(function () {
                    promises.push(instance.serializeItemData(this));
                });

                Promise.all(promises).then(function (props) {
                    if (typeof cb === "function") {
                        return cb(selected, props);
                    }

                    return props;
                });
            });

            $(this).on('filebrowser:status', function (e, status) {
                instance.setStatus(status);
            });

            $(this).on('filebrowser:load', function (e, url) {
                return instance.load(url);
            });

            $(this).on('filebrowser:refresh', function () {
                return instance.refresh();
            });

            $(this).on('filebrowser:sort', function () {
                return instance._showItemDetails();
            });

            // expose FileBrowser functions
            $.fn.filebrowser.getbasedir = function () {
                return instance.getBaseDir();
            };

            $.fn.filebrowser.getcurrentdir = function () {
                return instance.getCurrentDir();
            };

            $.fn.filebrowser.getselected = function () {
                return instance.getSelectedItems();
            };

            $.fn.filebrowser.status = function (status) {
                return instance.setStatus(status);
            };

            $.fn.filebrowser.load = function (url) {
                return instance.load(url);
            };

            return this;
        };

        // expose FileBrowser object to global scope
        window.FileBrowser = FileBrowser;
    })(jQuery, Wf);

})();
