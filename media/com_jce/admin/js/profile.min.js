(function () {
    'use strict';

    /**
     * @package    JCE
     * @copyright    Copyright (c) 2009-2021 Ryan Demmer. All rights reserved.
     * @license    GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */

    /* global jQuery */

    (function ($, window) {
        var Joomla = window.Joomla || {};

        function ucfirst(str) {
            return str.charAt(0).toUpperCase() + str.substring(1);
        }

        Joomla.submitbutton = function (task) {
            var form = document.getElementById('adminForm');

            form.task.value = task;

            // disable form inputs for cancel submit
            if (task == 'profile.cancel') {
                $('.tab-pane :input[name]').prop('disabled', true);
            } else {
                // trigger onSubmit callback
                onSubmit();
            }

            try {
                Joomla.submitform(task, form);
            } catch (e) {
                // error
            }
        };

        $.fn.dragHelper = function (options) {
            var downButton, overlay, start, stop, drag, startX, startY;

            // eslint-disable-next-line consistent-this
            var element = this;

            start = function (e) {
                var dw = $(document).width(),
                    dh = $(document).height();

                e.preventDefault();
                downButton = e.button;
                startX = e.screenX;
                startY = e.screenY;

                overlay = $('<div />').css({
                    position: "absolute",
                    top: 0,
                    left: 0,
                    width: dw,
                    height: dh,
                    zIndex: 0x7FFFFFFF,
                    opacity: 0.0001
                }).appendTo('body');

                // Bind mouse events
                $(document).on('mousemove.drag', function (e) {
                    drag(e);
                });
                $(document).on('mouseup.drag', function (e) {
                    stop(e);
                });

                // Begin drag
                $(element).trigger('drag:start', e);
            };

            drag = function (e) {
                if (e.button !== downButton) {
                    return stop(e);
                }

                e.deltaX = e.screenX - startX;
                e.deltaY = e.screenY - startY;

                e.preventDefault();

                $(element).trigger('drag:drag', e);
            };

            stop = function (e) {
                $(document).off('mousemove.drag mouseup.drag');

                $(overlay).remove();

                $(element).trigger('drag:stop', e);
            };

            /**
             * Destroys the drag/drop helper instance.
             *
             * @method destroy
             */
            this.destroy = function () {
                $(element).off();
            };

            $(element).on('mousedown.drag', function (e) {
                start(e);
            });

            return this;
        };

        function htmlspecialchars_decode(str) {
            var reverseEntities = {
                '&lt;': '<',
                '&gt;': '>',
                '&amp;': '&',
                '&quot;': '"',
                '&apos;': "'"
            };
            return str.replace(/&(#)?([\w]+);/g, function (all, numeric, value) {
                if (numeric) {
                    return String.fromCharCode(value);
                }

                return reverseEntities[all];
            });
        }

        $(document).ready(function () {
            $('select[data-toggle]').on('change', function () {
                var key = $(this).attr('data-toggle'), value = $(this).val();

                // find all targets
                var $targets = $(this).parents('.controls').find('[data-toggle-target]');

                // hide all targets
                $targets.hide().find(':input').prop('disabled', true);

                // find the target for this key and value
                var $item = $targets.filter('[data-toggle-target="' + key + '-' + value + '"]');

                // show the target and enable inputs
                $item.show().find(':input').prop('disabled', false);

                // update chosen
                if ($.fn.chosen) {
                    $item.find('select').chosen('destroy').chosen();
                }
            });

            $('select[data-toggle]').trigger('change');
        });

        // fire when everything is loaded
        $(window).on('load', function () {
            $('.com_jce_select_custom').each(function () {
                // eslint-disable-next-line consistent-this
                var elm = this, id = $(this).attr('id'), selector = '#' + id + '_chzn';

                function tagHandler(event, element) {
                    // Search a highlighted result

                    var highlighted = $(selector).find('li.active-result.highlighted').first();

                    // Add the highlighted option
                    if (event.which === 13 && highlighted.text() !== '') {
                        // Extra check. If we have added a custom tag with element text remove it
                        var customOptionValue = highlighted.text();

                        $(selector).find('option').filter(function () {
                            return $(element).val() == customOptionValue;
                        }).remove();

                        // Select the highlighted result
                        var customOption = $(selector).find('option').filter(function () {
                            return $(element).html() == highlighted.text();
                        }).attr('selected', 'selected');
                    } else {
                        // Extra check. Search if the custom tag already exists
                        var customOption = $(elm).find('option').filter(function () {
                            return $(element).html() == customOption;
                        });

                        if (customOption.text() !== '') {
                            customOption.attr('selected', 'selected');
                        } else {
                            var option = $('<option>');
                            option.text(element.value).val(element.value);
                            option.attr('selected', 'selected');
                            // Append the option and repopulate the chosen field
                            $(elm).append(option);
                        }
                    }

                    element.value = '';

                    $(elm).trigger('liszt:updated');
                }

                // Method to add tags pressing comma
                $(selector).find('input').on('keypress', function (event) {
                    if (event.charCode === 44) {
                        // Tag is greater than the minimum required chars
                        if (this.value && this.value.length >= 3) {
                            tagHandler(event, this);
                        }

                        // Do not add comma to tag at all
                        event.preventDefault();
                    }
                });

                // Method to add tags pressing enter
                $(selector).find('input').on('keyup', function (event) {
                    if (event.which === 13) {
                        // Tag is greater than the minimum required chars
                        if (this.value && this.value.length >= 3) {
                            tagHandler(event, this);
                        }

                        event.preventDefault();
                    }
                });
            });
        });

        function init() {
            var skip = true;
            var base_url = '';

            $('script[src*="media/com_jce/admin/js/profile.min.js"]').each(function () {
                var url = this.src;
                base_url = url.substring(0, url.indexOf('media'));
            });

            // set up change event for extensions options
            $('#jform_components_select input').on('change', function () {
                if (!this.checked) {
                    return;
                }

                var state = parseInt($(this).val(), 10);
                $('#jform_components').parents('.control-group').toggle(!!state);

            }).trigger('change');

            // add "isdirty" class to each input on change
            $('#profile-features :input[name], #profile-editor :input[name], #profile-plugins :input[name]').on('change', function () {
                // skip on init
                if (skip) {
                    return;
                }

                // skip name values that are not submittable
                if (this.name.indexOf('jform') === -1) {
                    return;
                }

                // get name as escaped string
                var name = this.name.replace('!"#$%&()*+,./:;<=>?@[\]^`{|}~', '\\$1', 'g');

                // add class to this element and any that share it's name, eg: param[]
                $(this).add('[name="' + name + '"]').addClass('isdirty');
            }).on('liszt:updated', function () {
                $(this).addClass('isdirty');
            });

            // Layout
            createLayout();

            // drag
            var startSize;

            $('.mce-resizehandle').dragHelper().on('drag:start', function (e) {
                startSize = {
                    width: $('.editor-layout .mce-tinymce').width(),
                    height: $('.mce-edit-area').height()
                };
            }).on('drag:drag', function (o, e) {
                var width = startSize.width + e.deltaX;
                var height = startSize.height + e.deltaY;

                if (width !== null) {
                    width = Math.max(100, width);
                    width = Math.min(0xFFFF, width);

                    $('.editor-layout .mce-tinymce, .widthMarker').width(width);
                    $('#jform_config_editor_width').val(width);

                    $('.widthMarker span').html(width + 'px');
                }

                if (height !== null) {
                    height = Math.max(100, height);
                    height = Math.min(0xFFFF, height);

                    $('.editor-layout .mce-edit-area').height(height);
                    $('#jform_config_editor_height').val(height);
                }
            });

            $('#jform_config_editor_width').change(function () {
                var v = $(this).val() || '100%',
                    s = v + 'px';

                if (/%/.test(v)) {
                    s = v, v = 100;
                } else {
                    v = parseInt(v, 10), s = v + 'px';
                }

                $('.widthMarker span').html(s);
                $('.widthMarker, .mce-tinymce').width(s);
            });

            $('#jform_config_editor_width').change(function () {
                var v = $(this).val() || 'auto';

                if (/%/.test(v)) {
                    v = 'auto';
                } else {
                    if ($.type(v) === 'number') {
                        v = parseInt(v, 10);
                    }
                }
            });

            // Toolbar Theme
            $('#jform_config_editor_toolbar_theme').change(function () {
                var value = this.value;

                if (value.indexOf('.') !== -1) {
                    value = value.replace(/([^\.]+)\.([\w]+)/, function (match, skin, variant) {
                        skin = 'mce' + ucfirst(skin);

                        return skin + 'Skin ' + skin + 'Skin' + (ucfirst(variant));
                    });
                } else {
                    value = 'mce' + ucfirst(value) + 'Skin';
                }

                // editor layout
                $('.editor-layout .mceEditor, .editor-button-pool .mceEditor').attr('class', function (i, value) {
                    return $.trim(value.replace(/mce([a-z0-9]+)Skin([a-z0-9]*)/gi, ''));
                }).addClass('mceDefaultSkin ' + value);

                // tabs
                $('.mceDefaultSkin', '#profile-plugins').attr('class', function (i, value) {
                    return $.trim(value.replace(/mce([a-z0-9]+)Skin([a-z0-9]*)/gi, ''));
                }).addClass('mceDefaultSkin ' + value);

                $('#mce-theme').remove();

                // skip the default theme as this is always loaded
                if (this.value === "default") {
                    return;
                }

                var stylesheet = this.value.replace(/\.\w+/, '');

                $('<link href="' + base_url + 'media/com_jce/editor/tinymce/themes/advanced/skins/' + stylesheet + '/ui.admin.css" rel="stylesheet" id="mce-theme" />').appendTo('head');
            }).change();

            // Editor Path
            $('#jform_config_editor_path :input[name]:checked').change(function () {
                $('.editor-layout .mce-tinymce .mce-statusbar .mce-path').toggle($(this).val() == 1);
            }).change();

            // Additional Features
            $('.editor-features input:checkbox').click(function () {
                setPlugins();
            });

            // resizing
            $('#paramseditorresizing').change(function () {
                var v = $(this).val();
                // show statusbar by default
                $('.editor-layout .mce-tinymce .mce-statusbar .mce-resizehandle').toggle(v == 1);
            }).change();

            // toggle on/off
            $('#jform_config_editor_toggle').change(function () {
                var v = $(this).val();
                // show statusbar by default
                $('#editor_toggle').toggle(v === 1);
            }).change();

            // hide toggle display if required
            $('#editor_toggle').prop('hidden', $('#jform_config_editor_toggle').length == 0);

            // editor toggle label
            $('#jform_config_editor_toggle_label').on('change keyup', function () {
                if (this.value) {
                    // show statusbar by default
                    $('#editor_toggle').text(this.value);
                }
            });

            // reset input[type="number"] if < 1
            $('input[type="number"]').change(function () {
                if (this.value < 1) {
                    this.value = "";
                }
            });

            // fix encoding of some characters in text fields
            $('input[data-decode]').val(function (index, value) {
                if (value) {
                    value = htmlspecialchars_decode(value);
                }

                return value;
            });

            skip = false;

            // secondary tabs within profile content
            $('.nav-tabs li', '.tab-content').on('click', function (e) {
                e.preventDefault();

                var idx = $(this).index(), $container = $(this).parent().parent('.tabbable');

                $(this).parent().children('.active').removeClass('active show hide');
                $(this).addClass('active show');

                $('.tab-content .tab-pane', $container).removeClass('active show hide').eq(idx).addClass('active show');
            });

            // add sortable to checkboxes
            $('.checkboxes.sortable').sortable({
                axis: 'y',
                placeholder: "sortable-placeholder",
                start: function (event, ui) {
                    $(ui.placeholder).height($(ui.item).height()).width($(ui.item).width());
                },
                update: function (event, ui) {
                    $('input', ui.item).trigger('change');
                }
            });

            $('.ui-jce').removeClass('loading');
        }

        function onSubmit() {
            // disable inputs not changed
            $('#profile-features :input[name], #profile-editor :input[name], #profile-plugins :input[name]').not('.isdirty').prop('disabled', true);
        }

        function fixLayout() {
            // remove all empty groups and add new empty group
            $('.editor-layout .mce-btn-group').filter(function () {
                return $(this).children('div').length === 0;
            }).remove().addBack(':last-child').after('<div class="mce-container mce-flow-layout-item mce-btn-group" />');

            // get options
            var options = $('.mce-btn-group').sortable('option');

            // destroy sortables
            $('.editor-layout .mce-btn-group.ui-sortable').sortable('destroy');

            // re-make sortables
            $('.editor-layout .mce-btn-group').sortable(options);
        }

        function createLayout() {
            // List items
            $(".sortableList").sortable({
                connectWith: '.sortableList',
                axis: 'y',
                update: function (event, ui) {
                    setRows();
                    setPlugins();
                },
                start: function (event, ui) {
                    $(ui.placeholder).width($(ui.item).width()).height($(ui.item).height());
                },
                placeholder: 'sortable-row-highlight',
                opacity: 0.8
            });

            // create empty groups
            $('.mce-btn-group:last-child').after('<div class="mce-container mce-flow-layout-item mce-btn-group" />');

            $('.sortableListItem').sortable({
                items: '.mce-btn',
                connectWith: '.sortableListItem',
                placeholder: 'sortable-btn-highlight mce-widget mce-btn',
                cancel: '',
                update: function (event, ui) {
                    setRows();
                    setPlugins();

                    fixLayout();
                },
                start: function (event, ui) {
                    $(ui.item).parents('.mce-toolbar-grp').addClass('ui-sortable-sorting');
                    $(ui.placeholder).width($(ui.item).width()).height($(ui.item).height());

                    $('.mce-btn-group:empty').addClass('visible');
                },
                stop: function (event, ui) {
                    $(ui.item).parents('.mce-toolbar-grp').removeClass('ui-sortable-sorting');
                },
                opacity: 0.8
            });
        }

        function setRows() {
            // set a default non-value. Will be cleaned before saving
            var v = '*';
            
            var rows = $.map($('.editor-layout .mce-toolbar').has('.mce-btn'), function (toolbar) {
                return $.map($('.mce-btn', toolbar), function (button) {
                    return $(button).data('name');
                }).join(',');
            });

            if (rows.length) {
                v = rows.join(';');
            }

            // set rows and trigger change
            $('input[name="jform\\[rows\\]"]').val(v).change();
        }

        /**
         * show / hide parameters for each plugin
         * @param {Object} id
         * @param {Object} state
         */
        function setPlugins() {
            var plugins = [];

            $('.ui-sortable > .mce-btn', '.editor-layout').each(function () {
                plugins.push($(this).data('name'));
            });

            $('.editor-features input:checkbox:checked').each(function () {
                plugins.push($(this).val());
            });

            // set plugins and trigger change
            $('input[name="jform\\[plugins\\]"]').val(plugins.join(',')).change();

            setParams(plugins);
        }

        function setParams(plugins) {
            var $tabs = $('#profile-plugins-tabs > .nav-item');

            // hide and deactivate all tabs and panels
            $tabs.removeClass('hide active').each(function (i) {
                var name = $(this).children('[href]').attr('href').replace('#profile-plugins-', '');

                var s = $.inArray(name, plugins) != -1;

                // hide panel and disable forms
                $('#profile-plugins-' + name).removeClass('show active').find('input[name], select[name]').prop('disabled', !s);

                if (!s) {
                    $(this).addClass('hide');
                }
            });

            // show first tab pane
            $tabs.not('.hide').first().addClass('active show').trigger('click');
        }

        $(document).ready(function () {
            window.setTimeout(function () {
                init();
            }, 100);
        });

        // End Profiles
    })(jQuery, window);

    /* global jQuery */
    (function ($) {

        window.WfSelectUsers = function () {
            var name = $("#jform_users").val() || $("#jform_users").attr('value'),
                id = $('#jform_users_id').val();

            var opt = new Option(name, id);

            // clear id and value
            $('#jform_users, #jform_users_id').val('').attr('value', '');

            // get existing select value
            var value = $('#jform_users_select').val();

            // cast as array
            if (!Array.isArray(value)) {
                value = [value];
            }

            // add new id
            value.push(id);

            // add new option to select list if it does not exist
            if ($('#jform_users_select').find('option[value="' + id + '"]').length === 0) {
                $('#jform_users_select').append(opt);
            }

            // update value and "chosen"
            $('#jform_users_select').val(value).trigger('chosen:updated').trigger('liszt:updated.chosen');

            // udpdate fancy-select "choices"
            $('#jform_users_select').parents('joomla-field-fancy-select').each(function () {
                if (!this.choicesInstance) {
                    return;
                }

                this.choicesInstance.setValue([{ value: id, label: name }]);
            });
        };

    })(jQuery);

    /**
     * @package   	JCE
     * @copyright 	Copyright (c) 2009-2021 Ryan Demmer. All rights reserved.
     * @license   	GNU/GPL 2 or later - http://www.gnu.org/licenses/old-licenses/gpl-2.0.html
     * JCE is free software. This version may have been modified pursuant
     * to the GNU General Public License, and as distributed it includes or
     * is derivative of works licensed under the GNU General Public License or
     * other free or open source software licenses.
     */
    /* global jQuery */
    (function ($) {

        $(document).ready(function () {
            $('.filetype').each(function () {
                var self = this;

                // create hidden input
                var $input = $('input[type="hidden"]', this);

                function serialize() {
                    var list = [];

                    $(self).parent().find('.filetype-list').each(function () {
                        // checkboxes
                        var v1 = $(this).find('.filetype-item input[type="checkbox"]').map(function () {
                            if (!this.checked) {
                                return "-" + this.value;
                            }
                            return this.value;
                        }).get();

                        // custom values
                        var v2 = $(this).find('.filetype-custom input').map(function () {
                            if (this.value !== "") {
                                return this.value;
                            }
                        }).get();

                        var group = "";

                        $(this).find('.filetype-group input[type="checkbox"]').map(function () {
                            group = $(this).parents('.filetype-group').data('filetype-group');

                            if (!this.checked) {
                                group = "-" + group;
                            }
                        });

                        var items = $.merge(v1, v2).join(",");

                        if (group) {
                            list.push(group + "=" + items);
                        } else {
                            list.push(items);
                        }
                    });

                    var v = list.join(";");

                    // set value to hidden input
                    $input.val(v).addClass('isdirty');
                    // set value to original input
                    $(self).val(v);
                }

                // get all checkboxes
                $('input[type="checkbox"]', this).on('click', function () {
                    serialize();
                });

                $('.filetype-edit', this).on('click', function (e) {
                    e.preventDefault();
                    $('.filetype-list', self).slideToggle();
                });

                $(this).on('change', '.filetype-custom input', function (e) {
                    e.preventDefault();
                    $(this).siblings('.file').attr("class", "").addClass("file").addClass(this.value);
                    serialize();
                });

                $(this).on('click', '.filetype-custom .filetype-clear', function (e) {
                    e.preventDefault();
                    $(this).siblings('input').val("");
                });

                $('.filetype-add', this).on('click', function (e) {
                    e.preventDefault();

                    var $p = $(this).parents('.filetype-item');

                    var clone = $p.clone();

                    $(clone).find('input').val("");

                    $(clone).insertAfter($p);
                });

                $(this).on('click', '.filetype-remove', function (e) {
                    e.preventDefault();

                    $(this).parents('.filetype-item').remove();
                    serialize();
                });

                if ($('.filetype-group', this).length) {
                    $('.filetype-list', this).sortable({
                        "axis": "y",
                        "items": "> .filetype-item",
                        "connectWith": ".filetype .filetype-list",
                        "update": function (event, ui) {
                            serialize();
                        }
                    });
                }
            });
        });
    })(jQuery);

    /* global jQuery */

    (function ($) {
        var previewStyles = ['fontFamily', 'fontSize', 'fontWeight', 'textDecoration', 'textTransform', 'color', 'backgroundColor'];

        // camelcase style - from JQuery 1.10.2 - http://code.jquery.com/jquery-1.10.2.js
        function camelCase(str) {
            return str.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function (all, letter) {
                return letter.toUpperCase();
            });
        }

        /**
         * Update title styles
         * @param {type} n
         * @param {type} string
         * @returns {undefined}
         */
        function updateStyles(n, string) {
            // validate style
            if (/\s*([^:]+):\s*([^;]+);?/.test(string) == false) {
                return;
            }
            
            $.each(string.split(';'), function (i, s) {
                var kv = $.trim(s).split(':');

                if (kv.length > 1) {
                    var k = $.trim(kv[0]),
                        v = $.trim(kv[1]);

                    if ($.inArray(camelCase(k), previewStyles) !== -1) {
                        $(n).css(k, v);
                    }
                }
            });
        }

        $(document).ready(function () {
            var init = true;

            // create close action
            $('.styleformat-item-trash', '.styleformat-list').on('click', function (e) {
                e.preventDefault();

                // if there  is only one item, clear and hide
                if ($('div.styleformat-list div.styleformat').length === 1) {

                    // clear inputs and remove styles
                    $(this).parents('.styleformat').find('input, select').val('').removeAttr('style');
                    // hide
                    $(this).parents('.styleformat').hide();
                    // otherwise remove it
                } else {
                    $(this).parents('.styleformat').remove();
                }

                $('.styleformat-list').trigger('update');

                e.preventDefault();
            });

            // create new action
            $('.styleformat-item-plus', '.styleformat-list').on('click', function (e) {
                e.preventDefault();

                var $item = $(this).prev();

                if ($.fn.chosen) {
                    $('select', $item).chosen('destroy');
                }

                var $clone = $item.clone(true).insertBefore(this).show();

                // show all
                $('div', $clone).removeClass('hide');

                // trigger collapse
                $('a.close.collapse', $clone).removeClass('icon-chevron-down').addClass('icon-chevron-up');

                // clear inputs and remove styles
                $('input, select', $clone).val('').removeAttr('style').first().focus();

                e.preventDefault();
            });

            $('.styleformat-list').sortable({
                axis: 'y',
                update: function (event, ui) {
                    $('div.styleformat-list').trigger('update');
                },
                handle: '.styleformat-item-handle',
                items: '.styleformat',
                placeholder: "styleformat-highlight",
                start: function (event, ui) {
                    $(ui.placeholder).height($(ui.item).height());
                }
            }).on('update', function () {
                var list = [],
                    v = "";

                // get each styleformat item
                $('.styleformat', this).each(function () {
                    var data = {},
                        // eslint-disable-next-line consistent-this
                        p = this,
                        x = 0;

                    // only proceed if title set and at least one other value of element, class or style
                    if ($('.styleformat-item-title input', p).val()) {
                        // get all values in sequence and encode
                        $('input[type="text"], select', p).each(function () {
                            var key = $(this).parents('[data-key]').data('key'), val = $(this).val();

                            if (val != "") {
                                // count keys to make sure we have at least one
                                if (key == 'element' || key == 'classes' || key == 'styles' || key == 'attributes') {
                                    x++;
                                }

                                data[key] = val;
                            }
                        });
                    }

                    // check if empty, convert to string
                    if (x > 0 && !$.isEmptyObject(data)) {
                        list.push(data);
                    }
                });

                if (list.length) {
                    v = JSON.stringify(list);
                }

                if (!init) {
                    // serialize and return
                    $('input[type="hidden"]', this).first().val(v).trigger('change');
                }
            });

            $('.styleformat').each(function () {
                // trigger input change
                $('input[type="text"], select', this).on('change', function () {
                    $('div.styleformat-list').trigger('update');

                    var title = $('div.styleformat-item-title input', $(this).parents('div.styleformat'));
                    var key = $(this).parents('[data-key]').data('key'), val = $(this).val();

                    if (key == "element") {
                        $(title).attr('class', function (i, cls) {
                            if (cls) {
                                return $.trim(cls.replace(/stc_[a-z0-9]+/g, '').replace(/\s+/g, ' '));
                            }
                            
                            return '';
                        });

                        if (/^(h[1-6]|em|strong|code|sub|sup)$/.test(val)) {
                            $(title).addClass('stc_' + val);
                        }
                    }

                    if (key == "styles") {
                        $(title).attr('style', "");
                        updateStyles(title, val);
                    }
                }).trigger('change');

                // create collapsible action
                $('.collapse', this).on('click.collapse', function (e) {
                    e.preventDefault();
                    $(this).parents('.styleformat').toggleClass('styleformat-collapse');
                });
            });

            // hide all
            if ($('.styleformat', '.styleformat-list').length > 1) {
                $('.styleformat', '.styleformat-list').addClass('styleformat-collapse');
            }

            if (init) {
                $(document).ready(function () {
                    if ($.fn.chosen) {
                        $('.styleformat select').chosen('destroy');
                    }
                });
            }

            // set init flag false
            init = false;

            // update if there is more than 1 input, ie: conversion of legacy theme_advanced_styles
            if ($('input[type="hidden"]', '.styleformat-list').length > 1) {
                $('.styleformat-list').trigger('update');
            }
        });
    })(jQuery);

    /* global jQuery */
    (function ($) {

        $(document).ready(function () {

            $('.fontlist').each(function () {
                // eslint-disable-next-line consistent-this
                var el = this;

                // trigger input change
                $('input[type="checkbox"]', this).on('click', function () {
                    $('.fontlist').trigger('update');
                });

                $('input[type="text"]', this).on('change', function () {
                    $('.fontlist').trigger('update');
                });

                // create close action
                $('.font-item-trash', this).on('click', function (e) {
                    e.preventDefault();

                    $(this).parents('.font-item').remove();
                    $('.fontlist').trigger('update');
                });

                // create new action
                $('.font-item-plus', this).on('click', function (e) {
                    e.preventDefault();

                    $('.font-item[hidden]', el).clone(true).insertBefore(this).removeAttr('hidden').find('input').val("").first().focus();
                });

            }).on('update', function () {
                var data = [], v = "";

                $('.font-item', this).not('.hide').each(function () {
                    var obj = {};

                    var key = $('input:text', this).first().val(), val = $('input:text', this).last().val();

                    if (key && val) {
                        obj[key] = val;
                    }

                    var values = $('input:checkbox:checked', this).val();

                    if (values) {
                        var pair = values.split('=');

                        if (pair.length === 2) {
                            obj[pair[0]] = pair[1];
                        }
                    }

                    if (!$.isEmptyObject(obj)) {
                        data.push(obj);
                    }
                });

                // pass through array of object
                if (data.length) {
                    v = JSON.stringify(data);
                }

                // serialize and return
                $('input[type="hidden"]', this).val(v).trigger('change');
            }).sortable({
                axis: 'y',
                items: '.font-item',
                update: function (event, ui) {
                    $('.fontlist').trigger('update');
                },
                placeholder: "font-item-highlight sortable-placeholder",
                start: function (event, ui) {
                    $(ui.placeholder).height($(ui.item).height()).width($(ui.item).width());
                }
            });
        });
    })(jQuery);

    /* global jQuery */
    (function ($) {

        $(document).ready(function () {

            $('.blockformats').each(function () {
                // eslint-disable-next-line consistent-this
                var el = this;

                // trigger input change
                $('input[type="checkbox"]', this).on('click', function () {
                    $(el).trigger('update');
                });

            }).on('update', function () {
                // trigger change on all inputs
                $(':input[name]', this).trigger('change');
            }).sortable({
                axis: 'y',
                update: function (event, ui) {
                    $('.blockformats').trigger('update');
                },
                placeholder: "blockformat-item-highlight sortable-placeholder",
                start: function (event, ui) {
                    $(ui.placeholder).height($(ui.item).height()).width($(ui.item).width());
                }
            });
        });
    })(jQuery);

})();
